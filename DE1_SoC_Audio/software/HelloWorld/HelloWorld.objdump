
HelloWorld.elf:     file format elf32-littlenios2
HelloWorld.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x05080244

Program Header:
    LOAD off    0x00001000 vaddr 0x05080000 paddr 0x05080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x05080020 paddr 0x05080020 align 2**12
         filesz 0x0000581c memsz 0x0000581c flags r-x
    LOAD off    0x00007000 vaddr 0x00000000 paddr 0x0508583c align 2**12
         filesz 0x00001ab4 memsz 0x00001c08 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  05080000  05080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  05080020  05080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000055f8  05080244  05080244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000048  00000000  0508583c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00000048  05085884  00007048  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00001ab4  050872f0  00008ab4  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  00001c08  00001c08  00008ab4  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  050872f0  050872f0  00008ab4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00008ab4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a30  00000000  00000000  00008ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00016588  00000000  00000000  00009508  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000603f  00000000  00000000  0001fa90  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000068fc  00000000  00000000  00025acf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000159c  00000000  00000000  0002c3cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000277c  00000000  00000000  0002d968  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00004a4c  00000000  00000000  000300e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  00034b30  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000680  00000000  00000000  00034b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000377c6  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000377c9  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000377d5  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000377d6  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000377d7  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000377db  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000377df  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000377e3  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000377ec  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000377f5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  000377fe  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000061  00000000  00000000  00037808  2**0
                  CONTENTS, READONLY
 30 .jdi          000049d0  00000000  00000000  00037869  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000a5840  00000000  00000000  0003c239  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
05080000 l    d  .entry	00000000 .entry
05080020 l    d  .exceptions	00000000 .exceptions
05080244 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
00000048 l    d  .rwdata	00000000 .rwdata
00001ab4 l    d  .bss	00000000 .bss
00001c08 l    d  .sdram	00000000 .sdram
050872f0 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../HelloWorld_bsp//obj/HAL/src/crt0.o
0508028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 findfp.c
05080430 l     F .text	00000008 __fp_unlock
05080444 l     F .text	0000019c __sinit.part.1
050805e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00000048 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_close.c
0508308c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
05083198 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
050831c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
050832b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
05083390 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0508347c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
05083650 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001aa4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0508389c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
050839d0 l     F .text	00000034 alt_dev_reg
00000a1c l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
05083cc4 l     F .text	0000020c altera_avalon_jtag_uart_irq
05083ed0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
05084508 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
05084770 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
05084be4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
05084d24 l     F .text	0000003c alt_get_errno
05084d60 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001adc g     O .bss	00000004 alt_instruction_exception_handler
05082e84 g     F .text	00000054 _isatty_r
0508358c g     F .text	0000007c alt_main
050802c4 g     F .text	000000c0 _puts_r
00001b08 g     O .bss	00000100 alt_irq
05082bac g     F .text	00000060 _lseek_r
05085884 g       *ABS*	00000000 __flash_rwdata_start
00001c08 g       *ABS*	00000000 __alt_heap_start
05082160 g     F .text	0000005c __sseek
05080780 g     F .text	00000010 __sinit
050805e8 g     F .text	00000068 __sfmoreglue
0508362c g     F .text	00000024 __malloc_unlock
0508184c g     F .text	0000015c memmove
05080768 g     F .text	00000018 _cleanup
0508511c g     F .text	00000024 altera_nios2_gen2_irq_init
05080000 g     F .entry	0000001c __reset
05080020 g       *ABS*	00000000 __flash_exceptions_start
05082e28 g     F .text	0000005c _fstat_r
00001ac0 g     O .bss	00000004 errno
050820dc g     F .text	00000008 __seofread
00001ac8 g     O .bss	00000004 alt_argv
00009a7c g       *ABS*	00000000 _gp
0000089c g     O .rwdata	00000180 alt_fd_list
05085140 g     F .text	00000090 alt_find_dev
05081704 g     F .text	00000148 memcpy
05080438 g     F .text	0000000c _cleanup_r
05084ca8 g     F .text	0000007c alt_io_redirect
0508583c g       *ABS*	00000000 __DTOR_END__
05080384 g     F .text	00000014 puts
0508540c g     F .text	0000009c alt_exception_cause_generated_bad_addr
050840c8 g     F .text	0000021c altera_avalon_jtag_uart_read
05082fd0 g     F .text	00000064 .hidden __udivsi3
050832ec g     F .text	000000a4 isatty
0508537c g     F .text	00000090 alt_icache_flush
00001abc g     O .bss	00000004 __malloc_top_pad
050807d0 g     F .text	000004bc __sfvwrite_r
05082034 g     F .text	00000054 _sbrk_r
05082dc8 g     F .text	00000060 _read_r
00001a9c g     O .rwdata	00000004 alt_max_fd
050823cc g     F .text	000000f0 _fclose_r
05082748 g     F .text	00000030 fflush
00001ab8 g     O .bss	00000004 __malloc_max_sbrked_mem
050834b8 g     F .text	000000d4 lseek
00001a7c g     O .rwdata	00000004 _global_impure_ptr
05081ad0 g     F .text	00000564 _realloc_r
00001c08 g       *ABS*	00000000 __bss_end
05084af4 g     F .text	000000f0 alt_iic_isr_register
05085014 g     F .text	00000108 alt_tick
050807a0 g     F .text	00000018 __fp_lock_all
05084aa8 g     F .text	0000004c alt_ic_irq_enabled
05084f78 g     F .text	0000009c alt_alarm_stop
00001ad0 g     O .bss	00000004 alt_irq_active
050800fc g     F .exceptions	000000d4 alt_irq_handler
00000874 g     O .rwdata	00000028 alt_dev_null
05084728 g     F .text	00000048 alt_dcache_flush_all
00001ab4 g       *ABS*	00000000 __ram_rwdata_end
00001a94 g     O .rwdata	00000008 alt_dev_list
050838d8 g     F .text	000000f8 write
00000048 g       *ABS*	00000000 __ram_rodata_end
05083200 g     F .text	000000b0 fstat
05083034 g     F .text	00000058 .hidden __umodsi3
00001c08 g       *ABS*	00000000 end
05083c04 g     F .text	000000c0 altera_avalon_jtag_uart_init
050801d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0508583c g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
05084580 g     F .text	0000007c alt_avalon_timer_sc_init
050842e4 g     F .text	00000224 altera_avalon_jtag_uart_write
05080790 g     F .text	00000004 __sfp_lock_acquire
05081620 g     F .text	000000e4 memchr
0508289c g     F .text	00000310 _free_r
05085688 g     F .text	00000180 __call_exitprocs
00001a84 g     O .rwdata	00000004 __malloc_sbrk_base
05080244 g     F .text	0000004c _start
00001ad4 g     O .bss	00000004 _alt_tick_rate
00001ad8 g     O .bss	00000004 _alt_nticks
0508368c g     F .text	000000fc read
05083a3c g     F .text	00000064 alt_sys_init
05085570 g     F .text	00000118 __register_exitproc
05083f70 g     F .text	00000068 altera_avalon_jtag_uart_close
00000048 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001ae0 g     O .bss	00000028 __malloc_current_mallinfo
05083aa0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
050852d8 g     F .text	000000a4 alt_get_fd
05082378 g     F .text	00000054 _close_r
050854f4 g     F .text	0000007c memcmp
05083b60 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001c08 g       *ABS*	00000000 __alt_stack_base
05083bb0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
05082224 g     F .text	00000154 __swsetup_r
05080650 g     F .text	00000118 __sfp
0000046c g     O .rwdata	00000408 __malloc_av_
0508079c g     F .text	00000004 __sinit_lock_release
05082088 g     F .text	00000054 __sread
050851d0 g     F .text	00000108 alt_find_file
050847ac g     F .text	000000a4 alt_dev_llist_insert
05083608 g     F .text	00000024 __malloc_lock
050837ec g     F .text	000000b0 sbrk
050826ec g     F .text	0000005c _fflush_r
00001ab4 g       *ABS*	00000000 __bss_start
050819a8 g     F .text	00000128 memset
05080290 g     F .text	00000034 main
00001acc g     O .bss	00000004 alt_envp
00001ab4 g     O .bss	00000004 __malloc_max_total_mem
05083b00 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
050821bc g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
050824bc g     F .text	00000014 fclose
05080e14 g     F .text	0000080c _malloc_r
00001aa0 g     O .rwdata	00000004 alt_errno
05080c8c g     F .text	000000c4 _fwalk
05082ed8 g     F .text	00000084 .hidden __divsi3
05082778 g     F .text	00000124 _malloc_trim_r
0508583c g       *ABS*	00000000 __CTOR_END__
0508583c g       *ABS*	00000000 __flash_rodata_start
0508583c g       *ABS*	00000000 __DTOR_LIST__
05083a04 g     F .text	00000038 alt_irq_init
05083788 g     F .text	00000064 alt_release_fd
050854a8 g     F .text	00000014 atexit
050821c4 g     F .text	00000060 _write_r
00001a80 g     O .rwdata	00000004 _impure_ptr
00001ac4 g     O .bss	00000004 alt_argc
050824d0 g     F .text	0000021c __sflush_r
050848b0 g     F .text	00000060 _do_dtors
05080020 g       .exceptions	00000000 alt_irq_entry
050807b8 g     F .text	00000018 __fp_unlock_all
00001a8c g     O .rwdata	00000008 alt_fs_list
05080020 g       *ABS*	00000000 __ram_exceptions_start
05080000 g       *ABS*	00000000 __alt_mem_onchip_memory2
05084944 g     F .text	00000050 alt_ic_isr_register
00001ab4 g       *ABS*	00000000 _edata
00001c08 g       *ABS*	00000000 _end
05080244 g       *ABS*	00000000 __ram_exceptions_end
05083fd8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
05084a1c g     F .text	0000008c alt_ic_irq_disable
050820e4 g     F .text	0000007c __swrite
00001a88 g     O .rwdata	00000004 __malloc_trim_threshold
050854bc g     F .text	00000038 exit
05080d50 g     F .text	000000c4 _fwalk_reent
05082f5c g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
05080020 g     F .exceptions	00000000 alt_exception
05080794 g     F .text	00000004 __sfp_lock_release
00000000 g       *ABS*	00000000 __alt_mem_sdram
05085808 g     F .text	00000034 _exit
050845fc g     F .text	0000012c alt_alarm_start
05082c0c g     F .text	000001bc __smakebuf_r
05080398 g     F .text	00000098 strlen
05084e24 g     F .text	00000154 open
05084910 g     F .text	00000034 alt_icache_flush_all
00001aa8 g     O .rwdata	00000004 alt_priority_mask
05084994 g     F .text	00000088 alt_ic_irq_enable
00001aac g     O .rwdata	00000008 alt_alarm_list
05084850 g     F .text	00000060 _do_ctors
050830c8 g     F .text	000000d0 close
050833f8 g     F .text	00000084 alt_load
05080798 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

05080000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 5080000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 5080004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 5080008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 508000c:	00bffd16 	blt	zero,r2,5080004 <__flash_rwdata_start+0xffffa780>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 5080010:	00414234 	movhi	at,1288
    ori r1, r1, %lo(_start)
 5080014:	08409114 	ori	at,at,580
    jmp r1
 5080018:	0800683a 	jmp	at
 508001c:	00000000 	call	0 <__alt_mem_sdram>

Disassembly of section .exceptions:

05080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 5080020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 5080024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 5080028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 508002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 5080030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 5080034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 5080038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 508003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 5080040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 5080044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 5080048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 508004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 5080050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 5080054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 5080058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 508005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 5080060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 5080064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 5080068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 508006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 5080070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 5080074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 5080078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 508007c:	10000326 	beq	r2,zero,508008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 5080080:	20000226 	beq	r4,zero,508008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 5080084:	50800fc0 	call	50800fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 5080088:	00000706 	br	50800a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 508008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 5080090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 5080094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 5080098:	50801d00 	call	50801d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 508009c:	1000021e 	bne	r2,zero,50800a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 50800a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 50800a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 50800a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 50800ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 50800b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 50800b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 50800b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 50800bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 50800c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 50800c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 50800c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 50800cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 50800d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 50800d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 50800d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 50800dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 50800e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 50800e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 50800e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 50800ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 50800f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 50800f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 50800f8:	ef80083a 	eret

050800fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 50800fc:	defff904 	addi	sp,sp,-28
 5080100:	dfc00615 	stw	ra,24(sp)
 5080104:	df000515 	stw	fp,20(sp)
 5080108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 508010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 5080110:	0005313a 	rdctl	r2,ipending
 5080114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 5080118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 508011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 5080120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 5080124:	00800044 	movi	r2,1
 5080128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 508012c:	e0fffb17 	ldw	r3,-20(fp)
 5080130:	e0bffc17 	ldw	r2,-16(fp)
 5080134:	1884703a 	and	r2,r3,r2
 5080138:	10001426 	beq	r2,zero,508018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 508013c:	00800034 	movhi	r2,0
 5080140:	1086c204 	addi	r2,r2,6920
 5080144:	e0fffd17 	ldw	r3,-12(fp)
 5080148:	180690fa 	slli	r3,r3,3
 508014c:	10c5883a 	add	r2,r2,r3
 5080150:	10c00017 	ldw	r3,0(r2)
 5080154:	00800034 	movhi	r2,0
 5080158:	1086c204 	addi	r2,r2,6920
 508015c:	e13ffd17 	ldw	r4,-12(fp)
 5080160:	200890fa 	slli	r4,r4,3
 5080164:	1105883a 	add	r2,r2,r4
 5080168:	10800104 	addi	r2,r2,4
 508016c:	10800017 	ldw	r2,0(r2)
 5080170:	1009883a 	mov	r4,r2
 5080174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 5080178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 508017c:	0005313a 	rdctl	r2,ipending
 5080180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 5080184:	e0bfff17 	ldw	r2,-4(fp)
 5080188:	00000706 	br	50801a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 508018c:	e0bffc17 	ldw	r2,-16(fp)
 5080190:	1085883a 	add	r2,r2,r2
 5080194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 5080198:	e0bffd17 	ldw	r2,-12(fp)
 508019c:	10800044 	addi	r2,r2,1
 50801a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 50801a4:	003fe106 	br	508012c <__flash_rwdata_start+0xffffa8a8>

    active = alt_irq_pending ();
 50801a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 50801ac:	e0bffb17 	ldw	r2,-20(fp)
 50801b0:	103fdb1e 	bne	r2,zero,5080120 <__flash_rwdata_start+0xffffa89c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 50801b4:	0001883a 	nop
}
 50801b8:	0001883a 	nop
 50801bc:	e037883a 	mov	sp,fp
 50801c0:	dfc00117 	ldw	ra,4(sp)
 50801c4:	df000017 	ldw	fp,0(sp)
 50801c8:	dec00204 	addi	sp,sp,8
 50801cc:	f800283a 	ret

050801d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 50801d0:	defffb04 	addi	sp,sp,-20
 50801d4:	dfc00415 	stw	ra,16(sp)
 50801d8:	df000315 	stw	fp,12(sp)
 50801dc:	df000304 	addi	fp,sp,12
 50801e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 50801e4:	000531fa 	rdctl	r2,exception
 50801e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 50801ec:	e0bffd17 	ldw	r2,-12(fp)
 50801f0:	10801f0c 	andi	r2,r2,124
 50801f4:	1004d0ba 	srli	r2,r2,2
 50801f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 50801fc:	0005333a 	rdctl	r2,badaddr
 5080200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 5080204:	d0a01817 	ldw	r2,-32672(gp)
 5080208:	10000726 	beq	r2,zero,5080228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 508020c:	d0a01817 	ldw	r2,-32672(gp)
 5080210:	e0fffd17 	ldw	r3,-12(fp)
 5080214:	e1bffe17 	ldw	r6,-8(fp)
 5080218:	e17fff17 	ldw	r5,-4(fp)
 508021c:	1809883a 	mov	r4,r3
 5080220:	103ee83a 	callr	r2
 5080224:	00000206 	br	5080230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 5080228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 508022c:	0005883a 	mov	r2,zero
}
 5080230:	e037883a 	mov	sp,fp
 5080234:	dfc00117 	ldw	ra,4(sp)
 5080238:	df000017 	ldw	fp,0(sp)
 508023c:	dec00204 	addi	sp,sp,8
 5080240:	f800283a 	ret

Disassembly of section .text:

05080244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 5080244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 5080248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 508024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 5080250:	00bffd16 	blt	zero,r2,5080248 <__flash_rwdata_start+0xffffa9c4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 5080254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 5080258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 508025c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 5080260:	d6a69f14 	ori	gp,gp,39548
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 5080264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 5080268:	1086ad14 	ori	r2,r2,6836

    movhi r3, %hi(__bss_end)
 508026c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 5080270:	18c70214 	ori	r3,r3,7176

    beq r2, r3, 1f
 5080274:	10c00326 	beq	r2,r3,5080284 <_start+0x40>

0:
    stw zero, (r2)
 5080278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 508027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 5080280:	10fffd36 	bltu	r2,r3,5080278 <__flash_rwdata_start+0xffffa9f4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 5080284:	50833f80 	call	50833f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 5080288:	508358c0 	call	508358c <alt_main>

0508028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 508028c:	003fff06 	br	508028c <__flash_rwdata_start+0xffffaa08>

05080290 <main>:
 */

#include <stdio.h>

int main()
{
 5080290:	defffe04 	addi	sp,sp,-8
 5080294:	dfc00115 	stw	ra,4(sp)
 5080298:	df000015 	stw	fp,0(sp)
 508029c:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 50802a0:	01000034 	movhi	r4,0
 50802a4:	21000004 	addi	r4,r4,0
 50802a8:	50803840 	call	5080384 <puts>

  return 0;
 50802ac:	0005883a 	mov	r2,zero
}
 50802b0:	e037883a 	mov	sp,fp
 50802b4:	dfc00117 	ldw	ra,4(sp)
 50802b8:	df000017 	ldw	fp,0(sp)
 50802bc:	dec00204 	addi	sp,sp,8
 50802c0:	f800283a 	ret

050802c4 <_puts_r>:
 50802c4:	defff604 	addi	sp,sp,-40
 50802c8:	dc000715 	stw	r16,28(sp)
 50802cc:	2021883a 	mov	r16,r4
 50802d0:	2809883a 	mov	r4,r5
 50802d4:	dc400815 	stw	r17,32(sp)
 50802d8:	dfc00915 	stw	ra,36(sp)
 50802dc:	2823883a 	mov	r17,r5
 50802e0:	50803980 	call	5080398 <strlen>
 50802e4:	10c00044 	addi	r3,r2,1
 50802e8:	d8800115 	stw	r2,4(sp)
 50802ec:	00800034 	movhi	r2,0
 50802f0:	10800504 	addi	r2,r2,20
 50802f4:	d8800215 	stw	r2,8(sp)
 50802f8:	00800044 	movi	r2,1
 50802fc:	d8800315 	stw	r2,12(sp)
 5080300:	00800084 	movi	r2,2
 5080304:	dc400015 	stw	r17,0(sp)
 5080308:	d8c00615 	stw	r3,24(sp)
 508030c:	dec00415 	stw	sp,16(sp)
 5080310:	d8800515 	stw	r2,20(sp)
 5080314:	80000226 	beq	r16,zero,5080320 <_puts_r+0x5c>
 5080318:	80800e17 	ldw	r2,56(r16)
 508031c:	10001426 	beq	r2,zero,5080370 <_puts_r+0xac>
 5080320:	81400217 	ldw	r5,8(r16)
 5080324:	2880030b 	ldhu	r2,12(r5)
 5080328:	10c8000c 	andi	r3,r2,8192
 508032c:	1800061e 	bne	r3,zero,5080348 <_puts_r+0x84>
 5080330:	29001917 	ldw	r4,100(r5)
 5080334:	00f7ffc4 	movi	r3,-8193
 5080338:	10880014 	ori	r2,r2,8192
 508033c:	20c6703a 	and	r3,r4,r3
 5080340:	2880030d 	sth	r2,12(r5)
 5080344:	28c01915 	stw	r3,100(r5)
 5080348:	d9800404 	addi	r6,sp,16
 508034c:	8009883a 	mov	r4,r16
 5080350:	50807d00 	call	50807d0 <__sfvwrite_r>
 5080354:	1000091e 	bne	r2,zero,508037c <_puts_r+0xb8>
 5080358:	00800284 	movi	r2,10
 508035c:	dfc00917 	ldw	ra,36(sp)
 5080360:	dc400817 	ldw	r17,32(sp)
 5080364:	dc000717 	ldw	r16,28(sp)
 5080368:	dec00a04 	addi	sp,sp,40
 508036c:	f800283a 	ret
 5080370:	8009883a 	mov	r4,r16
 5080374:	50807800 	call	5080780 <__sinit>
 5080378:	003fe906 	br	5080320 <__flash_rwdata_start+0xffffaa9c>
 508037c:	00bfffc4 	movi	r2,-1
 5080380:	003ff606 	br	508035c <__flash_rwdata_start+0xffffaad8>

05080384 <puts>:
 5080384:	00800034 	movhi	r2,0
 5080388:	1086a004 	addi	r2,r2,6784
 508038c:	200b883a 	mov	r5,r4
 5080390:	11000017 	ldw	r4,0(r2)
 5080394:	50802c41 	jmpi	50802c4 <_puts_r>

05080398 <strlen>:
 5080398:	208000cc 	andi	r2,r4,3
 508039c:	10002026 	beq	r2,zero,5080420 <strlen+0x88>
 50803a0:	20800007 	ldb	r2,0(r4)
 50803a4:	10002026 	beq	r2,zero,5080428 <strlen+0x90>
 50803a8:	2005883a 	mov	r2,r4
 50803ac:	00000206 	br	50803b8 <strlen+0x20>
 50803b0:	10c00007 	ldb	r3,0(r2)
 50803b4:	18001826 	beq	r3,zero,5080418 <strlen+0x80>
 50803b8:	10800044 	addi	r2,r2,1
 50803bc:	10c000cc 	andi	r3,r2,3
 50803c0:	183ffb1e 	bne	r3,zero,50803b0 <__flash_rwdata_start+0xffffab2c>
 50803c4:	10c00017 	ldw	r3,0(r2)
 50803c8:	01ffbff4 	movhi	r7,65279
 50803cc:	39ffbfc4 	addi	r7,r7,-257
 50803d0:	00ca303a 	nor	r5,zero,r3
 50803d4:	01a02074 	movhi	r6,32897
 50803d8:	19c7883a 	add	r3,r3,r7
 50803dc:	31a02004 	addi	r6,r6,-32640
 50803e0:	1946703a 	and	r3,r3,r5
 50803e4:	1986703a 	and	r3,r3,r6
 50803e8:	1800091e 	bne	r3,zero,5080410 <strlen+0x78>
 50803ec:	10800104 	addi	r2,r2,4
 50803f0:	10c00017 	ldw	r3,0(r2)
 50803f4:	19cb883a 	add	r5,r3,r7
 50803f8:	00c6303a 	nor	r3,zero,r3
 50803fc:	28c6703a 	and	r3,r5,r3
 5080400:	1986703a 	and	r3,r3,r6
 5080404:	183ff926 	beq	r3,zero,50803ec <__flash_rwdata_start+0xffffab68>
 5080408:	00000106 	br	5080410 <strlen+0x78>
 508040c:	10800044 	addi	r2,r2,1
 5080410:	10c00007 	ldb	r3,0(r2)
 5080414:	183ffd1e 	bne	r3,zero,508040c <__flash_rwdata_start+0xffffab88>
 5080418:	1105c83a 	sub	r2,r2,r4
 508041c:	f800283a 	ret
 5080420:	2005883a 	mov	r2,r4
 5080424:	003fe706 	br	50803c4 <__flash_rwdata_start+0xffffab40>
 5080428:	0005883a 	mov	r2,zero
 508042c:	f800283a 	ret

05080430 <__fp_unlock>:
 5080430:	0005883a 	mov	r2,zero
 5080434:	f800283a 	ret

05080438 <_cleanup_r>:
 5080438:	01414234 	movhi	r5,1288
 508043c:	2948f304 	addi	r5,r5,9164
 5080440:	5080d501 	jmpi	5080d50 <_fwalk_reent>

05080444 <__sinit.part.1>:
 5080444:	defff704 	addi	sp,sp,-36
 5080448:	00c14234 	movhi	r3,1288
 508044c:	dfc00815 	stw	ra,32(sp)
 5080450:	ddc00715 	stw	r23,28(sp)
 5080454:	dd800615 	stw	r22,24(sp)
 5080458:	dd400515 	stw	r21,20(sp)
 508045c:	dd000415 	stw	r20,16(sp)
 5080460:	dcc00315 	stw	r19,12(sp)
 5080464:	dc800215 	stw	r18,8(sp)
 5080468:	dc400115 	stw	r17,4(sp)
 508046c:	dc000015 	stw	r16,0(sp)
 5080470:	18c10e04 	addi	r3,r3,1080
 5080474:	24000117 	ldw	r16,4(r4)
 5080478:	20c00f15 	stw	r3,60(r4)
 508047c:	2080bb04 	addi	r2,r4,748
 5080480:	00c000c4 	movi	r3,3
 5080484:	20c0b915 	stw	r3,740(r4)
 5080488:	2080ba15 	stw	r2,744(r4)
 508048c:	2000b815 	stw	zero,736(r4)
 5080490:	05c00204 	movi	r23,8
 5080494:	00800104 	movi	r2,4
 5080498:	2025883a 	mov	r18,r4
 508049c:	b80d883a 	mov	r6,r23
 50804a0:	81001704 	addi	r4,r16,92
 50804a4:	000b883a 	mov	r5,zero
 50804a8:	80000015 	stw	zero,0(r16)
 50804ac:	80000115 	stw	zero,4(r16)
 50804b0:	80000215 	stw	zero,8(r16)
 50804b4:	8080030d 	sth	r2,12(r16)
 50804b8:	80001915 	stw	zero,100(r16)
 50804bc:	8000038d 	sth	zero,14(r16)
 50804c0:	80000415 	stw	zero,16(r16)
 50804c4:	80000515 	stw	zero,20(r16)
 50804c8:	80000615 	stw	zero,24(r16)
 50804cc:	50819a80 	call	50819a8 <memset>
 50804d0:	05814234 	movhi	r22,1288
 50804d4:	94400217 	ldw	r17,8(r18)
 50804d8:	05414234 	movhi	r21,1288
 50804dc:	05014234 	movhi	r20,1288
 50804e0:	04c14234 	movhi	r19,1288
 50804e4:	b5882204 	addi	r22,r22,8328
 50804e8:	ad483904 	addi	r21,r21,8420
 50804ec:	a5085804 	addi	r20,r20,8544
 50804f0:	9cc86f04 	addi	r19,r19,8636
 50804f4:	85800815 	stw	r22,32(r16)
 50804f8:	85400915 	stw	r21,36(r16)
 50804fc:	85000a15 	stw	r20,40(r16)
 5080500:	84c00b15 	stw	r19,44(r16)
 5080504:	84000715 	stw	r16,28(r16)
 5080508:	00800284 	movi	r2,10
 508050c:	8880030d 	sth	r2,12(r17)
 5080510:	00800044 	movi	r2,1
 5080514:	b80d883a 	mov	r6,r23
 5080518:	89001704 	addi	r4,r17,92
 508051c:	000b883a 	mov	r5,zero
 5080520:	88000015 	stw	zero,0(r17)
 5080524:	88000115 	stw	zero,4(r17)
 5080528:	88000215 	stw	zero,8(r17)
 508052c:	88001915 	stw	zero,100(r17)
 5080530:	8880038d 	sth	r2,14(r17)
 5080534:	88000415 	stw	zero,16(r17)
 5080538:	88000515 	stw	zero,20(r17)
 508053c:	88000615 	stw	zero,24(r17)
 5080540:	50819a80 	call	50819a8 <memset>
 5080544:	94000317 	ldw	r16,12(r18)
 5080548:	00800484 	movi	r2,18
 508054c:	8c400715 	stw	r17,28(r17)
 5080550:	8d800815 	stw	r22,32(r17)
 5080554:	8d400915 	stw	r21,36(r17)
 5080558:	8d000a15 	stw	r20,40(r17)
 508055c:	8cc00b15 	stw	r19,44(r17)
 5080560:	8080030d 	sth	r2,12(r16)
 5080564:	00800084 	movi	r2,2
 5080568:	80000015 	stw	zero,0(r16)
 508056c:	80000115 	stw	zero,4(r16)
 5080570:	80000215 	stw	zero,8(r16)
 5080574:	80001915 	stw	zero,100(r16)
 5080578:	8080038d 	sth	r2,14(r16)
 508057c:	80000415 	stw	zero,16(r16)
 5080580:	80000515 	stw	zero,20(r16)
 5080584:	80000615 	stw	zero,24(r16)
 5080588:	b80d883a 	mov	r6,r23
 508058c:	000b883a 	mov	r5,zero
 5080590:	81001704 	addi	r4,r16,92
 5080594:	50819a80 	call	50819a8 <memset>
 5080598:	00800044 	movi	r2,1
 508059c:	84000715 	stw	r16,28(r16)
 50805a0:	85800815 	stw	r22,32(r16)
 50805a4:	85400915 	stw	r21,36(r16)
 50805a8:	85000a15 	stw	r20,40(r16)
 50805ac:	84c00b15 	stw	r19,44(r16)
 50805b0:	90800e15 	stw	r2,56(r18)
 50805b4:	dfc00817 	ldw	ra,32(sp)
 50805b8:	ddc00717 	ldw	r23,28(sp)
 50805bc:	dd800617 	ldw	r22,24(sp)
 50805c0:	dd400517 	ldw	r21,20(sp)
 50805c4:	dd000417 	ldw	r20,16(sp)
 50805c8:	dcc00317 	ldw	r19,12(sp)
 50805cc:	dc800217 	ldw	r18,8(sp)
 50805d0:	dc400117 	ldw	r17,4(sp)
 50805d4:	dc000017 	ldw	r16,0(sp)
 50805d8:	dec00904 	addi	sp,sp,36
 50805dc:	f800283a 	ret

050805e0 <__fp_lock>:
 50805e0:	0005883a 	mov	r2,zero
 50805e4:	f800283a 	ret

050805e8 <__sfmoreglue>:
 50805e8:	defffc04 	addi	sp,sp,-16
 50805ec:	dc400115 	stw	r17,4(sp)
 50805f0:	2c7fffc4 	addi	r17,r5,-1
 50805f4:	8c401a24 	muli	r17,r17,104
 50805f8:	dc800215 	stw	r18,8(sp)
 50805fc:	2825883a 	mov	r18,r5
 5080600:	89401d04 	addi	r5,r17,116
 5080604:	dc000015 	stw	r16,0(sp)
 5080608:	dfc00315 	stw	ra,12(sp)
 508060c:	5080e140 	call	5080e14 <_malloc_r>
 5080610:	1021883a 	mov	r16,r2
 5080614:	10000726 	beq	r2,zero,5080634 <__sfmoreglue+0x4c>
 5080618:	11000304 	addi	r4,r2,12
 508061c:	10000015 	stw	zero,0(r2)
 5080620:	14800115 	stw	r18,4(r2)
 5080624:	11000215 	stw	r4,8(r2)
 5080628:	89801a04 	addi	r6,r17,104
 508062c:	000b883a 	mov	r5,zero
 5080630:	50819a80 	call	50819a8 <memset>
 5080634:	8005883a 	mov	r2,r16
 5080638:	dfc00317 	ldw	ra,12(sp)
 508063c:	dc800217 	ldw	r18,8(sp)
 5080640:	dc400117 	ldw	r17,4(sp)
 5080644:	dc000017 	ldw	r16,0(sp)
 5080648:	dec00404 	addi	sp,sp,16
 508064c:	f800283a 	ret

05080650 <__sfp>:
 5080650:	defffb04 	addi	sp,sp,-20
 5080654:	dc000015 	stw	r16,0(sp)
 5080658:	04000034 	movhi	r16,0
 508065c:	84069f04 	addi	r16,r16,6780
 5080660:	dcc00315 	stw	r19,12(sp)
 5080664:	2027883a 	mov	r19,r4
 5080668:	81000017 	ldw	r4,0(r16)
 508066c:	dfc00415 	stw	ra,16(sp)
 5080670:	dc800215 	stw	r18,8(sp)
 5080674:	20800e17 	ldw	r2,56(r4)
 5080678:	dc400115 	stw	r17,4(sp)
 508067c:	1000021e 	bne	r2,zero,5080688 <__sfp+0x38>
 5080680:	50804440 	call	5080444 <__sinit.part.1>
 5080684:	81000017 	ldw	r4,0(r16)
 5080688:	2480b804 	addi	r18,r4,736
 508068c:	047fffc4 	movi	r17,-1
 5080690:	91000117 	ldw	r4,4(r18)
 5080694:	94000217 	ldw	r16,8(r18)
 5080698:	213fffc4 	addi	r4,r4,-1
 508069c:	20000a16 	blt	r4,zero,50806c8 <__sfp+0x78>
 50806a0:	8080030f 	ldh	r2,12(r16)
 50806a4:	10000c26 	beq	r2,zero,50806d8 <__sfp+0x88>
 50806a8:	80c01d04 	addi	r3,r16,116
 50806ac:	00000206 	br	50806b8 <__sfp+0x68>
 50806b0:	18bfe60f 	ldh	r2,-104(r3)
 50806b4:	10000826 	beq	r2,zero,50806d8 <__sfp+0x88>
 50806b8:	213fffc4 	addi	r4,r4,-1
 50806bc:	1c3ffd04 	addi	r16,r3,-12
 50806c0:	18c01a04 	addi	r3,r3,104
 50806c4:	247ffa1e 	bne	r4,r17,50806b0 <__flash_rwdata_start+0xffffae2c>
 50806c8:	90800017 	ldw	r2,0(r18)
 50806cc:	10001d26 	beq	r2,zero,5080744 <__sfp+0xf4>
 50806d0:	1025883a 	mov	r18,r2
 50806d4:	003fee06 	br	5080690 <__flash_rwdata_start+0xffffae0c>
 50806d8:	00bfffc4 	movi	r2,-1
 50806dc:	8080038d 	sth	r2,14(r16)
 50806e0:	00800044 	movi	r2,1
 50806e4:	8080030d 	sth	r2,12(r16)
 50806e8:	80001915 	stw	zero,100(r16)
 50806ec:	80000015 	stw	zero,0(r16)
 50806f0:	80000215 	stw	zero,8(r16)
 50806f4:	80000115 	stw	zero,4(r16)
 50806f8:	80000415 	stw	zero,16(r16)
 50806fc:	80000515 	stw	zero,20(r16)
 5080700:	80000615 	stw	zero,24(r16)
 5080704:	01800204 	movi	r6,8
 5080708:	000b883a 	mov	r5,zero
 508070c:	81001704 	addi	r4,r16,92
 5080710:	50819a80 	call	50819a8 <memset>
 5080714:	8005883a 	mov	r2,r16
 5080718:	80000c15 	stw	zero,48(r16)
 508071c:	80000d15 	stw	zero,52(r16)
 5080720:	80001115 	stw	zero,68(r16)
 5080724:	80001215 	stw	zero,72(r16)
 5080728:	dfc00417 	ldw	ra,16(sp)
 508072c:	dcc00317 	ldw	r19,12(sp)
 5080730:	dc800217 	ldw	r18,8(sp)
 5080734:	dc400117 	ldw	r17,4(sp)
 5080738:	dc000017 	ldw	r16,0(sp)
 508073c:	dec00504 	addi	sp,sp,20
 5080740:	f800283a 	ret
 5080744:	01400104 	movi	r5,4
 5080748:	9809883a 	mov	r4,r19
 508074c:	50805e80 	call	50805e8 <__sfmoreglue>
 5080750:	90800015 	stw	r2,0(r18)
 5080754:	103fde1e 	bne	r2,zero,50806d0 <__flash_rwdata_start+0xffffae4c>
 5080758:	00800304 	movi	r2,12
 508075c:	98800015 	stw	r2,0(r19)
 5080760:	0005883a 	mov	r2,zero
 5080764:	003ff006 	br	5080728 <__flash_rwdata_start+0xffffaea4>

05080768 <_cleanup>:
 5080768:	00800034 	movhi	r2,0
 508076c:	10869f04 	addi	r2,r2,6780
 5080770:	11000017 	ldw	r4,0(r2)
 5080774:	01414234 	movhi	r5,1288
 5080778:	2948f304 	addi	r5,r5,9164
 508077c:	5080d501 	jmpi	5080d50 <_fwalk_reent>

05080780 <__sinit>:
 5080780:	20800e17 	ldw	r2,56(r4)
 5080784:	10000126 	beq	r2,zero,508078c <__sinit+0xc>
 5080788:	f800283a 	ret
 508078c:	50804441 	jmpi	5080444 <__sinit.part.1>

05080790 <__sfp_lock_acquire>:
 5080790:	f800283a 	ret

05080794 <__sfp_lock_release>:
 5080794:	f800283a 	ret

05080798 <__sinit_lock_acquire>:
 5080798:	f800283a 	ret

0508079c <__sinit_lock_release>:
 508079c:	f800283a 	ret

050807a0 <__fp_lock_all>:
 50807a0:	00800034 	movhi	r2,0
 50807a4:	1086a004 	addi	r2,r2,6784
 50807a8:	11000017 	ldw	r4,0(r2)
 50807ac:	01414234 	movhi	r5,1288
 50807b0:	29417804 	addi	r5,r5,1504
 50807b4:	5080c8c1 	jmpi	5080c8c <_fwalk>

050807b8 <__fp_unlock_all>:
 50807b8:	00800034 	movhi	r2,0
 50807bc:	1086a004 	addi	r2,r2,6784
 50807c0:	11000017 	ldw	r4,0(r2)
 50807c4:	01414234 	movhi	r5,1288
 50807c8:	29410c04 	addi	r5,r5,1072
 50807cc:	5080c8c1 	jmpi	5080c8c <_fwalk>

050807d0 <__sfvwrite_r>:
 50807d0:	30800217 	ldw	r2,8(r6)
 50807d4:	10006726 	beq	r2,zero,5080974 <__sfvwrite_r+0x1a4>
 50807d8:	28c0030b 	ldhu	r3,12(r5)
 50807dc:	defff404 	addi	sp,sp,-48
 50807e0:	dd400715 	stw	r21,28(sp)
 50807e4:	dd000615 	stw	r20,24(sp)
 50807e8:	dc000215 	stw	r16,8(sp)
 50807ec:	dfc00b15 	stw	ra,44(sp)
 50807f0:	df000a15 	stw	fp,40(sp)
 50807f4:	ddc00915 	stw	r23,36(sp)
 50807f8:	dd800815 	stw	r22,32(sp)
 50807fc:	dcc00515 	stw	r19,20(sp)
 5080800:	dc800415 	stw	r18,16(sp)
 5080804:	dc400315 	stw	r17,12(sp)
 5080808:	1880020c 	andi	r2,r3,8
 508080c:	2821883a 	mov	r16,r5
 5080810:	202b883a 	mov	r21,r4
 5080814:	3029883a 	mov	r20,r6
 5080818:	10002726 	beq	r2,zero,50808b8 <__sfvwrite_r+0xe8>
 508081c:	28800417 	ldw	r2,16(r5)
 5080820:	10002526 	beq	r2,zero,50808b8 <__sfvwrite_r+0xe8>
 5080824:	1880008c 	andi	r2,r3,2
 5080828:	a4400017 	ldw	r17,0(r20)
 508082c:	10002a26 	beq	r2,zero,50808d8 <__sfvwrite_r+0x108>
 5080830:	05a00034 	movhi	r22,32768
 5080834:	0027883a 	mov	r19,zero
 5080838:	0025883a 	mov	r18,zero
 508083c:	b5bf0004 	addi	r22,r22,-1024
 5080840:	980d883a 	mov	r6,r19
 5080844:	a809883a 	mov	r4,r21
 5080848:	90004626 	beq	r18,zero,5080964 <__sfvwrite_r+0x194>
 508084c:	900f883a 	mov	r7,r18
 5080850:	b480022e 	bgeu	r22,r18,508085c <__sfvwrite_r+0x8c>
 5080854:	01e00034 	movhi	r7,32768
 5080858:	39ff0004 	addi	r7,r7,-1024
 508085c:	80800917 	ldw	r2,36(r16)
 5080860:	81400717 	ldw	r5,28(r16)
 5080864:	103ee83a 	callr	r2
 5080868:	0080570e 	bge	zero,r2,50809c8 <__sfvwrite_r+0x1f8>
 508086c:	a0c00217 	ldw	r3,8(r20)
 5080870:	98a7883a 	add	r19,r19,r2
 5080874:	90a5c83a 	sub	r18,r18,r2
 5080878:	1885c83a 	sub	r2,r3,r2
 508087c:	a0800215 	stw	r2,8(r20)
 5080880:	103fef1e 	bne	r2,zero,5080840 <__flash_rwdata_start+0xffffafbc>
 5080884:	0005883a 	mov	r2,zero
 5080888:	dfc00b17 	ldw	ra,44(sp)
 508088c:	df000a17 	ldw	fp,40(sp)
 5080890:	ddc00917 	ldw	r23,36(sp)
 5080894:	dd800817 	ldw	r22,32(sp)
 5080898:	dd400717 	ldw	r21,28(sp)
 508089c:	dd000617 	ldw	r20,24(sp)
 50808a0:	dcc00517 	ldw	r19,20(sp)
 50808a4:	dc800417 	ldw	r18,16(sp)
 50808a8:	dc400317 	ldw	r17,12(sp)
 50808ac:	dc000217 	ldw	r16,8(sp)
 50808b0:	dec00c04 	addi	sp,sp,48
 50808b4:	f800283a 	ret
 50808b8:	800b883a 	mov	r5,r16
 50808bc:	a809883a 	mov	r4,r21
 50808c0:	50822240 	call	5082224 <__swsetup_r>
 50808c4:	1000eb1e 	bne	r2,zero,5080c74 <__sfvwrite_r+0x4a4>
 50808c8:	80c0030b 	ldhu	r3,12(r16)
 50808cc:	a4400017 	ldw	r17,0(r20)
 50808d0:	1880008c 	andi	r2,r3,2
 50808d4:	103fd61e 	bne	r2,zero,5080830 <__flash_rwdata_start+0xffffafac>
 50808d8:	1880004c 	andi	r2,r3,1
 50808dc:	10003f1e 	bne	r2,zero,50809dc <__sfvwrite_r+0x20c>
 50808e0:	0039883a 	mov	fp,zero
 50808e4:	0025883a 	mov	r18,zero
 50808e8:	90001a26 	beq	r18,zero,5080954 <__sfvwrite_r+0x184>
 50808ec:	1880800c 	andi	r2,r3,512
 50808f0:	84c00217 	ldw	r19,8(r16)
 50808f4:	10002126 	beq	r2,zero,508097c <__sfvwrite_r+0x1ac>
 50808f8:	982f883a 	mov	r23,r19
 50808fc:	94c09336 	bltu	r18,r19,5080b4c <__sfvwrite_r+0x37c>
 5080900:	1881200c 	andi	r2,r3,1152
 5080904:	10009e1e 	bne	r2,zero,5080b80 <__sfvwrite_r+0x3b0>
 5080908:	81000017 	ldw	r4,0(r16)
 508090c:	b80d883a 	mov	r6,r23
 5080910:	e00b883a 	mov	r5,fp
 5080914:	508184c0 	call	508184c <memmove>
 5080918:	80c00217 	ldw	r3,8(r16)
 508091c:	81000017 	ldw	r4,0(r16)
 5080920:	9005883a 	mov	r2,r18
 5080924:	1ce7c83a 	sub	r19,r3,r19
 5080928:	25cf883a 	add	r7,r4,r23
 508092c:	84c00215 	stw	r19,8(r16)
 5080930:	81c00015 	stw	r7,0(r16)
 5080934:	a0c00217 	ldw	r3,8(r20)
 5080938:	e0b9883a 	add	fp,fp,r2
 508093c:	90a5c83a 	sub	r18,r18,r2
 5080940:	18a7c83a 	sub	r19,r3,r2
 5080944:	a4c00215 	stw	r19,8(r20)
 5080948:	983fce26 	beq	r19,zero,5080884 <__flash_rwdata_start+0xffffb000>
 508094c:	80c0030b 	ldhu	r3,12(r16)
 5080950:	903fe61e 	bne	r18,zero,50808ec <__flash_rwdata_start+0xffffb068>
 5080954:	8f000017 	ldw	fp,0(r17)
 5080958:	8c800117 	ldw	r18,4(r17)
 508095c:	8c400204 	addi	r17,r17,8
 5080960:	003fe106 	br	50808e8 <__flash_rwdata_start+0xffffb064>
 5080964:	8cc00017 	ldw	r19,0(r17)
 5080968:	8c800117 	ldw	r18,4(r17)
 508096c:	8c400204 	addi	r17,r17,8
 5080970:	003fb306 	br	5080840 <__flash_rwdata_start+0xffffafbc>
 5080974:	0005883a 	mov	r2,zero
 5080978:	f800283a 	ret
 508097c:	81000017 	ldw	r4,0(r16)
 5080980:	80800417 	ldw	r2,16(r16)
 5080984:	11005736 	bltu	r2,r4,5080ae4 <__sfvwrite_r+0x314>
 5080988:	85c00517 	ldw	r23,20(r16)
 508098c:	95c05536 	bltu	r18,r23,5080ae4 <__sfvwrite_r+0x314>
 5080990:	00a00034 	movhi	r2,32768
 5080994:	10bfffc4 	addi	r2,r2,-1
 5080998:	9009883a 	mov	r4,r18
 508099c:	1480012e 	bgeu	r2,r18,50809a4 <__sfvwrite_r+0x1d4>
 50809a0:	1009883a 	mov	r4,r2
 50809a4:	b80b883a 	mov	r5,r23
 50809a8:	5082ed80 	call	5082ed8 <__divsi3>
 50809ac:	15cf383a 	mul	r7,r2,r23
 50809b0:	81400717 	ldw	r5,28(r16)
 50809b4:	80800917 	ldw	r2,36(r16)
 50809b8:	e00d883a 	mov	r6,fp
 50809bc:	a809883a 	mov	r4,r21
 50809c0:	103ee83a 	callr	r2
 50809c4:	00bfdb16 	blt	zero,r2,5080934 <__flash_rwdata_start+0xffffb0b0>
 50809c8:	8080030b 	ldhu	r2,12(r16)
 50809cc:	10801014 	ori	r2,r2,64
 50809d0:	8080030d 	sth	r2,12(r16)
 50809d4:	00bfffc4 	movi	r2,-1
 50809d8:	003fab06 	br	5080888 <__flash_rwdata_start+0xffffb004>
 50809dc:	0027883a 	mov	r19,zero
 50809e0:	0011883a 	mov	r8,zero
 50809e4:	0039883a 	mov	fp,zero
 50809e8:	0025883a 	mov	r18,zero
 50809ec:	90001f26 	beq	r18,zero,5080a6c <__sfvwrite_r+0x29c>
 50809f0:	40005a26 	beq	r8,zero,5080b5c <__sfvwrite_r+0x38c>
 50809f4:	982d883a 	mov	r22,r19
 50809f8:	94c0012e 	bgeu	r18,r19,5080a00 <__sfvwrite_r+0x230>
 50809fc:	902d883a 	mov	r22,r18
 5080a00:	81000017 	ldw	r4,0(r16)
 5080a04:	80800417 	ldw	r2,16(r16)
 5080a08:	b02f883a 	mov	r23,r22
 5080a0c:	81c00517 	ldw	r7,20(r16)
 5080a10:	1100032e 	bgeu	r2,r4,5080a20 <__sfvwrite_r+0x250>
 5080a14:	80c00217 	ldw	r3,8(r16)
 5080a18:	38c7883a 	add	r3,r7,r3
 5080a1c:	1d801816 	blt	r3,r22,5080a80 <__sfvwrite_r+0x2b0>
 5080a20:	b1c03e16 	blt	r22,r7,5080b1c <__sfvwrite_r+0x34c>
 5080a24:	80800917 	ldw	r2,36(r16)
 5080a28:	81400717 	ldw	r5,28(r16)
 5080a2c:	e00d883a 	mov	r6,fp
 5080a30:	da000115 	stw	r8,4(sp)
 5080a34:	a809883a 	mov	r4,r21
 5080a38:	103ee83a 	callr	r2
 5080a3c:	102f883a 	mov	r23,r2
 5080a40:	da000117 	ldw	r8,4(sp)
 5080a44:	00bfe00e 	bge	zero,r2,50809c8 <__flash_rwdata_start+0xffffb144>
 5080a48:	9de7c83a 	sub	r19,r19,r23
 5080a4c:	98001f26 	beq	r19,zero,5080acc <__sfvwrite_r+0x2fc>
 5080a50:	a0800217 	ldw	r2,8(r20)
 5080a54:	e5f9883a 	add	fp,fp,r23
 5080a58:	95e5c83a 	sub	r18,r18,r23
 5080a5c:	15efc83a 	sub	r23,r2,r23
 5080a60:	a5c00215 	stw	r23,8(r20)
 5080a64:	b83f8726 	beq	r23,zero,5080884 <__flash_rwdata_start+0xffffb000>
 5080a68:	903fe11e 	bne	r18,zero,50809f0 <__flash_rwdata_start+0xffffb16c>
 5080a6c:	8f000017 	ldw	fp,0(r17)
 5080a70:	8c800117 	ldw	r18,4(r17)
 5080a74:	0011883a 	mov	r8,zero
 5080a78:	8c400204 	addi	r17,r17,8
 5080a7c:	003fdb06 	br	50809ec <__flash_rwdata_start+0xffffb168>
 5080a80:	180d883a 	mov	r6,r3
 5080a84:	e00b883a 	mov	r5,fp
 5080a88:	da000115 	stw	r8,4(sp)
 5080a8c:	d8c00015 	stw	r3,0(sp)
 5080a90:	508184c0 	call	508184c <memmove>
 5080a94:	d8c00017 	ldw	r3,0(sp)
 5080a98:	80800017 	ldw	r2,0(r16)
 5080a9c:	800b883a 	mov	r5,r16
 5080aa0:	a809883a 	mov	r4,r21
 5080aa4:	10c5883a 	add	r2,r2,r3
 5080aa8:	80800015 	stw	r2,0(r16)
 5080aac:	d8c00015 	stw	r3,0(sp)
 5080ab0:	50826ec0 	call	50826ec <_fflush_r>
 5080ab4:	d8c00017 	ldw	r3,0(sp)
 5080ab8:	da000117 	ldw	r8,4(sp)
 5080abc:	103fc21e 	bne	r2,zero,50809c8 <__flash_rwdata_start+0xffffb144>
 5080ac0:	182f883a 	mov	r23,r3
 5080ac4:	9de7c83a 	sub	r19,r19,r23
 5080ac8:	983fe11e 	bne	r19,zero,5080a50 <__flash_rwdata_start+0xffffb1cc>
 5080acc:	800b883a 	mov	r5,r16
 5080ad0:	a809883a 	mov	r4,r21
 5080ad4:	50826ec0 	call	50826ec <_fflush_r>
 5080ad8:	103fbb1e 	bne	r2,zero,50809c8 <__flash_rwdata_start+0xffffb144>
 5080adc:	0011883a 	mov	r8,zero
 5080ae0:	003fdb06 	br	5080a50 <__flash_rwdata_start+0xffffb1cc>
 5080ae4:	94c0012e 	bgeu	r18,r19,5080aec <__sfvwrite_r+0x31c>
 5080ae8:	9027883a 	mov	r19,r18
 5080aec:	980d883a 	mov	r6,r19
 5080af0:	e00b883a 	mov	r5,fp
 5080af4:	508184c0 	call	508184c <memmove>
 5080af8:	80800217 	ldw	r2,8(r16)
 5080afc:	80c00017 	ldw	r3,0(r16)
 5080b00:	14c5c83a 	sub	r2,r2,r19
 5080b04:	1cc7883a 	add	r3,r3,r19
 5080b08:	80800215 	stw	r2,8(r16)
 5080b0c:	80c00015 	stw	r3,0(r16)
 5080b10:	10004326 	beq	r2,zero,5080c20 <__sfvwrite_r+0x450>
 5080b14:	9805883a 	mov	r2,r19
 5080b18:	003f8606 	br	5080934 <__flash_rwdata_start+0xffffb0b0>
 5080b1c:	b00d883a 	mov	r6,r22
 5080b20:	e00b883a 	mov	r5,fp
 5080b24:	da000115 	stw	r8,4(sp)
 5080b28:	508184c0 	call	508184c <memmove>
 5080b2c:	80800217 	ldw	r2,8(r16)
 5080b30:	80c00017 	ldw	r3,0(r16)
 5080b34:	da000117 	ldw	r8,4(sp)
 5080b38:	1585c83a 	sub	r2,r2,r22
 5080b3c:	1dad883a 	add	r22,r3,r22
 5080b40:	80800215 	stw	r2,8(r16)
 5080b44:	85800015 	stw	r22,0(r16)
 5080b48:	003fbf06 	br	5080a48 <__flash_rwdata_start+0xffffb1c4>
 5080b4c:	81000017 	ldw	r4,0(r16)
 5080b50:	9027883a 	mov	r19,r18
 5080b54:	902f883a 	mov	r23,r18
 5080b58:	003f6c06 	br	508090c <__flash_rwdata_start+0xffffb088>
 5080b5c:	900d883a 	mov	r6,r18
 5080b60:	01400284 	movi	r5,10
 5080b64:	e009883a 	mov	r4,fp
 5080b68:	50816200 	call	5081620 <memchr>
 5080b6c:	10003e26 	beq	r2,zero,5080c68 <__sfvwrite_r+0x498>
 5080b70:	10800044 	addi	r2,r2,1
 5080b74:	1727c83a 	sub	r19,r2,fp
 5080b78:	02000044 	movi	r8,1
 5080b7c:	003f9d06 	br	50809f4 <__flash_rwdata_start+0xffffb170>
 5080b80:	80800517 	ldw	r2,20(r16)
 5080b84:	81400417 	ldw	r5,16(r16)
 5080b88:	81c00017 	ldw	r7,0(r16)
 5080b8c:	10a7883a 	add	r19,r2,r2
 5080b90:	9885883a 	add	r2,r19,r2
 5080b94:	1026d7fa 	srli	r19,r2,31
 5080b98:	396dc83a 	sub	r22,r7,r5
 5080b9c:	b1000044 	addi	r4,r22,1
 5080ba0:	9885883a 	add	r2,r19,r2
 5080ba4:	1027d07a 	srai	r19,r2,1
 5080ba8:	2485883a 	add	r2,r4,r18
 5080bac:	980d883a 	mov	r6,r19
 5080bb0:	9880022e 	bgeu	r19,r2,5080bbc <__sfvwrite_r+0x3ec>
 5080bb4:	1027883a 	mov	r19,r2
 5080bb8:	100d883a 	mov	r6,r2
 5080bbc:	18c1000c 	andi	r3,r3,1024
 5080bc0:	18001c26 	beq	r3,zero,5080c34 <__sfvwrite_r+0x464>
 5080bc4:	300b883a 	mov	r5,r6
 5080bc8:	a809883a 	mov	r4,r21
 5080bcc:	5080e140 	call	5080e14 <_malloc_r>
 5080bd0:	102f883a 	mov	r23,r2
 5080bd4:	10002926 	beq	r2,zero,5080c7c <__sfvwrite_r+0x4ac>
 5080bd8:	81400417 	ldw	r5,16(r16)
 5080bdc:	b00d883a 	mov	r6,r22
 5080be0:	1009883a 	mov	r4,r2
 5080be4:	50817040 	call	5081704 <memcpy>
 5080be8:	8080030b 	ldhu	r2,12(r16)
 5080bec:	00fedfc4 	movi	r3,-1153
 5080bf0:	10c4703a 	and	r2,r2,r3
 5080bf4:	10802014 	ori	r2,r2,128
 5080bf8:	8080030d 	sth	r2,12(r16)
 5080bfc:	bd89883a 	add	r4,r23,r22
 5080c00:	9d8fc83a 	sub	r7,r19,r22
 5080c04:	85c00415 	stw	r23,16(r16)
 5080c08:	84c00515 	stw	r19,20(r16)
 5080c0c:	81000015 	stw	r4,0(r16)
 5080c10:	9027883a 	mov	r19,r18
 5080c14:	81c00215 	stw	r7,8(r16)
 5080c18:	902f883a 	mov	r23,r18
 5080c1c:	003f3b06 	br	508090c <__flash_rwdata_start+0xffffb088>
 5080c20:	800b883a 	mov	r5,r16
 5080c24:	a809883a 	mov	r4,r21
 5080c28:	50826ec0 	call	50826ec <_fflush_r>
 5080c2c:	103fb926 	beq	r2,zero,5080b14 <__flash_rwdata_start+0xffffb290>
 5080c30:	003f6506 	br	50809c8 <__flash_rwdata_start+0xffffb144>
 5080c34:	a809883a 	mov	r4,r21
 5080c38:	5081ad00 	call	5081ad0 <_realloc_r>
 5080c3c:	102f883a 	mov	r23,r2
 5080c40:	103fee1e 	bne	r2,zero,5080bfc <__flash_rwdata_start+0xffffb378>
 5080c44:	81400417 	ldw	r5,16(r16)
 5080c48:	a809883a 	mov	r4,r21
 5080c4c:	508289c0 	call	508289c <_free_r>
 5080c50:	8080030b 	ldhu	r2,12(r16)
 5080c54:	00ffdfc4 	movi	r3,-129
 5080c58:	1884703a 	and	r2,r3,r2
 5080c5c:	00c00304 	movi	r3,12
 5080c60:	a8c00015 	stw	r3,0(r21)
 5080c64:	003f5906 	br	50809cc <__flash_rwdata_start+0xffffb148>
 5080c68:	94c00044 	addi	r19,r18,1
 5080c6c:	02000044 	movi	r8,1
 5080c70:	003f6006 	br	50809f4 <__flash_rwdata_start+0xffffb170>
 5080c74:	00bfffc4 	movi	r2,-1
 5080c78:	003f0306 	br	5080888 <__flash_rwdata_start+0xffffb004>
 5080c7c:	00800304 	movi	r2,12
 5080c80:	a8800015 	stw	r2,0(r21)
 5080c84:	8080030b 	ldhu	r2,12(r16)
 5080c88:	003f5006 	br	50809cc <__flash_rwdata_start+0xffffb148>

05080c8c <_fwalk>:
 5080c8c:	defff704 	addi	sp,sp,-36
 5080c90:	dd000415 	stw	r20,16(sp)
 5080c94:	dfc00815 	stw	ra,32(sp)
 5080c98:	ddc00715 	stw	r23,28(sp)
 5080c9c:	dd800615 	stw	r22,24(sp)
 5080ca0:	dd400515 	stw	r21,20(sp)
 5080ca4:	dcc00315 	stw	r19,12(sp)
 5080ca8:	dc800215 	stw	r18,8(sp)
 5080cac:	dc400115 	stw	r17,4(sp)
 5080cb0:	dc000015 	stw	r16,0(sp)
 5080cb4:	2500b804 	addi	r20,r4,736
 5080cb8:	a0002326 	beq	r20,zero,5080d48 <_fwalk+0xbc>
 5080cbc:	282b883a 	mov	r21,r5
 5080cc0:	002f883a 	mov	r23,zero
 5080cc4:	05800044 	movi	r22,1
 5080cc8:	04ffffc4 	movi	r19,-1
 5080ccc:	a4400117 	ldw	r17,4(r20)
 5080cd0:	a4800217 	ldw	r18,8(r20)
 5080cd4:	8c7fffc4 	addi	r17,r17,-1
 5080cd8:	88000d16 	blt	r17,zero,5080d10 <_fwalk+0x84>
 5080cdc:	94000304 	addi	r16,r18,12
 5080ce0:	94800384 	addi	r18,r18,14
 5080ce4:	8080000b 	ldhu	r2,0(r16)
 5080ce8:	8c7fffc4 	addi	r17,r17,-1
 5080cec:	813ffd04 	addi	r4,r16,-12
 5080cf0:	b080042e 	bgeu	r22,r2,5080d04 <_fwalk+0x78>
 5080cf4:	9080000f 	ldh	r2,0(r18)
 5080cf8:	14c00226 	beq	r2,r19,5080d04 <_fwalk+0x78>
 5080cfc:	a83ee83a 	callr	r21
 5080d00:	b8aeb03a 	or	r23,r23,r2
 5080d04:	84001a04 	addi	r16,r16,104
 5080d08:	94801a04 	addi	r18,r18,104
 5080d0c:	8cfff51e 	bne	r17,r19,5080ce4 <__flash_rwdata_start+0xffffb460>
 5080d10:	a5000017 	ldw	r20,0(r20)
 5080d14:	a03fed1e 	bne	r20,zero,5080ccc <__flash_rwdata_start+0xffffb448>
 5080d18:	b805883a 	mov	r2,r23
 5080d1c:	dfc00817 	ldw	ra,32(sp)
 5080d20:	ddc00717 	ldw	r23,28(sp)
 5080d24:	dd800617 	ldw	r22,24(sp)
 5080d28:	dd400517 	ldw	r21,20(sp)
 5080d2c:	dd000417 	ldw	r20,16(sp)
 5080d30:	dcc00317 	ldw	r19,12(sp)
 5080d34:	dc800217 	ldw	r18,8(sp)
 5080d38:	dc400117 	ldw	r17,4(sp)
 5080d3c:	dc000017 	ldw	r16,0(sp)
 5080d40:	dec00904 	addi	sp,sp,36
 5080d44:	f800283a 	ret
 5080d48:	002f883a 	mov	r23,zero
 5080d4c:	003ff206 	br	5080d18 <__flash_rwdata_start+0xffffb494>

05080d50 <_fwalk_reent>:
 5080d50:	defff704 	addi	sp,sp,-36
 5080d54:	dd000415 	stw	r20,16(sp)
 5080d58:	dfc00815 	stw	ra,32(sp)
 5080d5c:	ddc00715 	stw	r23,28(sp)
 5080d60:	dd800615 	stw	r22,24(sp)
 5080d64:	dd400515 	stw	r21,20(sp)
 5080d68:	dcc00315 	stw	r19,12(sp)
 5080d6c:	dc800215 	stw	r18,8(sp)
 5080d70:	dc400115 	stw	r17,4(sp)
 5080d74:	dc000015 	stw	r16,0(sp)
 5080d78:	2500b804 	addi	r20,r4,736
 5080d7c:	a0002326 	beq	r20,zero,5080e0c <_fwalk_reent+0xbc>
 5080d80:	282b883a 	mov	r21,r5
 5080d84:	2027883a 	mov	r19,r4
 5080d88:	002f883a 	mov	r23,zero
 5080d8c:	05800044 	movi	r22,1
 5080d90:	04bfffc4 	movi	r18,-1
 5080d94:	a4400117 	ldw	r17,4(r20)
 5080d98:	a4000217 	ldw	r16,8(r20)
 5080d9c:	8c7fffc4 	addi	r17,r17,-1
 5080da0:	88000c16 	blt	r17,zero,5080dd4 <_fwalk_reent+0x84>
 5080da4:	84000304 	addi	r16,r16,12
 5080da8:	8080000b 	ldhu	r2,0(r16)
 5080dac:	8c7fffc4 	addi	r17,r17,-1
 5080db0:	817ffd04 	addi	r5,r16,-12
 5080db4:	b080052e 	bgeu	r22,r2,5080dcc <_fwalk_reent+0x7c>
 5080db8:	8080008f 	ldh	r2,2(r16)
 5080dbc:	9809883a 	mov	r4,r19
 5080dc0:	14800226 	beq	r2,r18,5080dcc <_fwalk_reent+0x7c>
 5080dc4:	a83ee83a 	callr	r21
 5080dc8:	b8aeb03a 	or	r23,r23,r2
 5080dcc:	84001a04 	addi	r16,r16,104
 5080dd0:	8cbff51e 	bne	r17,r18,5080da8 <__flash_rwdata_start+0xffffb524>
 5080dd4:	a5000017 	ldw	r20,0(r20)
 5080dd8:	a03fee1e 	bne	r20,zero,5080d94 <__flash_rwdata_start+0xffffb510>
 5080ddc:	b805883a 	mov	r2,r23
 5080de0:	dfc00817 	ldw	ra,32(sp)
 5080de4:	ddc00717 	ldw	r23,28(sp)
 5080de8:	dd800617 	ldw	r22,24(sp)
 5080dec:	dd400517 	ldw	r21,20(sp)
 5080df0:	dd000417 	ldw	r20,16(sp)
 5080df4:	dcc00317 	ldw	r19,12(sp)
 5080df8:	dc800217 	ldw	r18,8(sp)
 5080dfc:	dc400117 	ldw	r17,4(sp)
 5080e00:	dc000017 	ldw	r16,0(sp)
 5080e04:	dec00904 	addi	sp,sp,36
 5080e08:	f800283a 	ret
 5080e0c:	002f883a 	mov	r23,zero
 5080e10:	003ff206 	br	5080ddc <__flash_rwdata_start+0xffffb558>

05080e14 <_malloc_r>:
 5080e14:	defff504 	addi	sp,sp,-44
 5080e18:	dc800315 	stw	r18,12(sp)
 5080e1c:	dfc00a15 	stw	ra,40(sp)
 5080e20:	df000915 	stw	fp,36(sp)
 5080e24:	ddc00815 	stw	r23,32(sp)
 5080e28:	dd800715 	stw	r22,28(sp)
 5080e2c:	dd400615 	stw	r21,24(sp)
 5080e30:	dd000515 	stw	r20,20(sp)
 5080e34:	dcc00415 	stw	r19,16(sp)
 5080e38:	dc400215 	stw	r17,8(sp)
 5080e3c:	dc000115 	stw	r16,4(sp)
 5080e40:	288002c4 	addi	r2,r5,11
 5080e44:	00c00584 	movi	r3,22
 5080e48:	2025883a 	mov	r18,r4
 5080e4c:	18807f2e 	bgeu	r3,r2,508104c <_malloc_r+0x238>
 5080e50:	047ffe04 	movi	r17,-8
 5080e54:	1462703a 	and	r17,r2,r17
 5080e58:	8800a316 	blt	r17,zero,50810e8 <_malloc_r+0x2d4>
 5080e5c:	8940a236 	bltu	r17,r5,50810e8 <_malloc_r+0x2d4>
 5080e60:	50836080 	call	5083608 <__malloc_lock>
 5080e64:	00807dc4 	movi	r2,503
 5080e68:	1441e92e 	bgeu	r2,r17,5081610 <_malloc_r+0x7fc>
 5080e6c:	8804d27a 	srli	r2,r17,9
 5080e70:	1000a126 	beq	r2,zero,50810f8 <_malloc_r+0x2e4>
 5080e74:	00c00104 	movi	r3,4
 5080e78:	18811e36 	bltu	r3,r2,50812f4 <_malloc_r+0x4e0>
 5080e7c:	8804d1ba 	srli	r2,r17,6
 5080e80:	12000e44 	addi	r8,r2,57
 5080e84:	11c00e04 	addi	r7,r2,56
 5080e88:	4209883a 	add	r4,r8,r8
 5080e8c:	04c00034 	movhi	r19,0
 5080e90:	2109883a 	add	r4,r4,r4
 5080e94:	9cc11b04 	addi	r19,r19,1132
 5080e98:	2109883a 	add	r4,r4,r4
 5080e9c:	9909883a 	add	r4,r19,r4
 5080ea0:	24000117 	ldw	r16,4(r4)
 5080ea4:	213ffe04 	addi	r4,r4,-8
 5080ea8:	24009726 	beq	r4,r16,5081108 <_malloc_r+0x2f4>
 5080eac:	80800117 	ldw	r2,4(r16)
 5080eb0:	01bfff04 	movi	r6,-4
 5080eb4:	014003c4 	movi	r5,15
 5080eb8:	1184703a 	and	r2,r2,r6
 5080ebc:	1447c83a 	sub	r3,r2,r17
 5080ec0:	28c00716 	blt	r5,r3,5080ee0 <_malloc_r+0xcc>
 5080ec4:	1800920e 	bge	r3,zero,5081110 <_malloc_r+0x2fc>
 5080ec8:	84000317 	ldw	r16,12(r16)
 5080ecc:	24008e26 	beq	r4,r16,5081108 <_malloc_r+0x2f4>
 5080ed0:	80800117 	ldw	r2,4(r16)
 5080ed4:	1184703a 	and	r2,r2,r6
 5080ed8:	1447c83a 	sub	r3,r2,r17
 5080edc:	28fff90e 	bge	r5,r3,5080ec4 <__flash_rwdata_start+0xffffb640>
 5080ee0:	3809883a 	mov	r4,r7
 5080ee4:	01800034 	movhi	r6,0
 5080ee8:	9c000417 	ldw	r16,16(r19)
 5080eec:	31811b04 	addi	r6,r6,1132
 5080ef0:	32000204 	addi	r8,r6,8
 5080ef4:	82013426 	beq	r16,r8,50813c8 <_malloc_r+0x5b4>
 5080ef8:	80c00117 	ldw	r3,4(r16)
 5080efc:	00bfff04 	movi	r2,-4
 5080f00:	188e703a 	and	r7,r3,r2
 5080f04:	3c45c83a 	sub	r2,r7,r17
 5080f08:	00c003c4 	movi	r3,15
 5080f0c:	18811f16 	blt	r3,r2,508138c <_malloc_r+0x578>
 5080f10:	32000515 	stw	r8,20(r6)
 5080f14:	32000415 	stw	r8,16(r6)
 5080f18:	10007f0e 	bge	r2,zero,5081118 <_malloc_r+0x304>
 5080f1c:	00807fc4 	movi	r2,511
 5080f20:	11c0fd36 	bltu	r2,r7,5081318 <_malloc_r+0x504>
 5080f24:	3806d0fa 	srli	r3,r7,3
 5080f28:	01c00044 	movi	r7,1
 5080f2c:	30800117 	ldw	r2,4(r6)
 5080f30:	19400044 	addi	r5,r3,1
 5080f34:	294b883a 	add	r5,r5,r5
 5080f38:	1807d0ba 	srai	r3,r3,2
 5080f3c:	294b883a 	add	r5,r5,r5
 5080f40:	294b883a 	add	r5,r5,r5
 5080f44:	298b883a 	add	r5,r5,r6
 5080f48:	38c6983a 	sll	r3,r7,r3
 5080f4c:	29c00017 	ldw	r7,0(r5)
 5080f50:	2a7ffe04 	addi	r9,r5,-8
 5080f54:	1886b03a 	or	r3,r3,r2
 5080f58:	82400315 	stw	r9,12(r16)
 5080f5c:	81c00215 	stw	r7,8(r16)
 5080f60:	30c00115 	stw	r3,4(r6)
 5080f64:	2c000015 	stw	r16,0(r5)
 5080f68:	3c000315 	stw	r16,12(r7)
 5080f6c:	2005d0ba 	srai	r2,r4,2
 5080f70:	01400044 	movi	r5,1
 5080f74:	288a983a 	sll	r5,r5,r2
 5080f78:	19406f36 	bltu	r3,r5,5081138 <_malloc_r+0x324>
 5080f7c:	28c4703a 	and	r2,r5,r3
 5080f80:	10000a1e 	bne	r2,zero,5080fac <_malloc_r+0x198>
 5080f84:	00bfff04 	movi	r2,-4
 5080f88:	294b883a 	add	r5,r5,r5
 5080f8c:	2088703a 	and	r4,r4,r2
 5080f90:	28c4703a 	and	r2,r5,r3
 5080f94:	21000104 	addi	r4,r4,4
 5080f98:	1000041e 	bne	r2,zero,5080fac <_malloc_r+0x198>
 5080f9c:	294b883a 	add	r5,r5,r5
 5080fa0:	28c4703a 	and	r2,r5,r3
 5080fa4:	21000104 	addi	r4,r4,4
 5080fa8:	103ffc26 	beq	r2,zero,5080f9c <__flash_rwdata_start+0xffffb718>
 5080fac:	02bfff04 	movi	r10,-4
 5080fb0:	024003c4 	movi	r9,15
 5080fb4:	21800044 	addi	r6,r4,1
 5080fb8:	318d883a 	add	r6,r6,r6
 5080fbc:	318d883a 	add	r6,r6,r6
 5080fc0:	318d883a 	add	r6,r6,r6
 5080fc4:	998d883a 	add	r6,r19,r6
 5080fc8:	333ffe04 	addi	r12,r6,-8
 5080fcc:	2017883a 	mov	r11,r4
 5080fd0:	31800104 	addi	r6,r6,4
 5080fd4:	34000017 	ldw	r16,0(r6)
 5080fd8:	31fffd04 	addi	r7,r6,-12
 5080fdc:	81c0041e 	bne	r16,r7,5080ff0 <_malloc_r+0x1dc>
 5080fe0:	0000fb06 	br	50813d0 <_malloc_r+0x5bc>
 5080fe4:	1801030e 	bge	r3,zero,50813f4 <_malloc_r+0x5e0>
 5080fe8:	84000317 	ldw	r16,12(r16)
 5080fec:	81c0f826 	beq	r16,r7,50813d0 <_malloc_r+0x5bc>
 5080ff0:	80800117 	ldw	r2,4(r16)
 5080ff4:	1284703a 	and	r2,r2,r10
 5080ff8:	1447c83a 	sub	r3,r2,r17
 5080ffc:	48fff90e 	bge	r9,r3,5080fe4 <__flash_rwdata_start+0xffffb760>
 5081000:	80800317 	ldw	r2,12(r16)
 5081004:	81000217 	ldw	r4,8(r16)
 5081008:	89400054 	ori	r5,r17,1
 508100c:	81400115 	stw	r5,4(r16)
 5081010:	20800315 	stw	r2,12(r4)
 5081014:	11000215 	stw	r4,8(r2)
 5081018:	8463883a 	add	r17,r16,r17
 508101c:	9c400515 	stw	r17,20(r19)
 5081020:	9c400415 	stw	r17,16(r19)
 5081024:	18800054 	ori	r2,r3,1
 5081028:	88800115 	stw	r2,4(r17)
 508102c:	8a000315 	stw	r8,12(r17)
 5081030:	8a000215 	stw	r8,8(r17)
 5081034:	88e3883a 	add	r17,r17,r3
 5081038:	88c00015 	stw	r3,0(r17)
 508103c:	9009883a 	mov	r4,r18
 5081040:	508362c0 	call	508362c <__malloc_unlock>
 5081044:	80800204 	addi	r2,r16,8
 5081048:	00001b06 	br	50810b8 <_malloc_r+0x2a4>
 508104c:	04400404 	movi	r17,16
 5081050:	89402536 	bltu	r17,r5,50810e8 <_malloc_r+0x2d4>
 5081054:	50836080 	call	5083608 <__malloc_lock>
 5081058:	00800184 	movi	r2,6
 508105c:	01000084 	movi	r4,2
 5081060:	04c00034 	movhi	r19,0
 5081064:	1085883a 	add	r2,r2,r2
 5081068:	9cc11b04 	addi	r19,r19,1132
 508106c:	1085883a 	add	r2,r2,r2
 5081070:	9885883a 	add	r2,r19,r2
 5081074:	14000117 	ldw	r16,4(r2)
 5081078:	10fffe04 	addi	r3,r2,-8
 508107c:	80c0d926 	beq	r16,r3,50813e4 <_malloc_r+0x5d0>
 5081080:	80c00117 	ldw	r3,4(r16)
 5081084:	81000317 	ldw	r4,12(r16)
 5081088:	00bfff04 	movi	r2,-4
 508108c:	1884703a 	and	r2,r3,r2
 5081090:	81400217 	ldw	r5,8(r16)
 5081094:	8085883a 	add	r2,r16,r2
 5081098:	10c00117 	ldw	r3,4(r2)
 508109c:	29000315 	stw	r4,12(r5)
 50810a0:	21400215 	stw	r5,8(r4)
 50810a4:	18c00054 	ori	r3,r3,1
 50810a8:	10c00115 	stw	r3,4(r2)
 50810ac:	9009883a 	mov	r4,r18
 50810b0:	508362c0 	call	508362c <__malloc_unlock>
 50810b4:	80800204 	addi	r2,r16,8
 50810b8:	dfc00a17 	ldw	ra,40(sp)
 50810bc:	df000917 	ldw	fp,36(sp)
 50810c0:	ddc00817 	ldw	r23,32(sp)
 50810c4:	dd800717 	ldw	r22,28(sp)
 50810c8:	dd400617 	ldw	r21,24(sp)
 50810cc:	dd000517 	ldw	r20,20(sp)
 50810d0:	dcc00417 	ldw	r19,16(sp)
 50810d4:	dc800317 	ldw	r18,12(sp)
 50810d8:	dc400217 	ldw	r17,8(sp)
 50810dc:	dc000117 	ldw	r16,4(sp)
 50810e0:	dec00b04 	addi	sp,sp,44
 50810e4:	f800283a 	ret
 50810e8:	00800304 	movi	r2,12
 50810ec:	90800015 	stw	r2,0(r18)
 50810f0:	0005883a 	mov	r2,zero
 50810f4:	003ff006 	br	50810b8 <__flash_rwdata_start+0xffffb834>
 50810f8:	01002004 	movi	r4,128
 50810fc:	02001004 	movi	r8,64
 5081100:	01c00fc4 	movi	r7,63
 5081104:	003f6106 	br	5080e8c <__flash_rwdata_start+0xffffb608>
 5081108:	4009883a 	mov	r4,r8
 508110c:	003f7506 	br	5080ee4 <__flash_rwdata_start+0xffffb660>
 5081110:	81000317 	ldw	r4,12(r16)
 5081114:	003fde06 	br	5081090 <__flash_rwdata_start+0xffffb80c>
 5081118:	81c5883a 	add	r2,r16,r7
 508111c:	11400117 	ldw	r5,4(r2)
 5081120:	9009883a 	mov	r4,r18
 5081124:	29400054 	ori	r5,r5,1
 5081128:	11400115 	stw	r5,4(r2)
 508112c:	508362c0 	call	508362c <__malloc_unlock>
 5081130:	80800204 	addi	r2,r16,8
 5081134:	003fe006 	br	50810b8 <__flash_rwdata_start+0xffffb834>
 5081138:	9c000217 	ldw	r16,8(r19)
 508113c:	00bfff04 	movi	r2,-4
 5081140:	85800117 	ldw	r22,4(r16)
 5081144:	b0ac703a 	and	r22,r22,r2
 5081148:	b4400336 	bltu	r22,r17,5081158 <_malloc_r+0x344>
 508114c:	b445c83a 	sub	r2,r22,r17
 5081150:	00c003c4 	movi	r3,15
 5081154:	18805d16 	blt	r3,r2,50812cc <_malloc_r+0x4b8>
 5081158:	05c00034 	movhi	r23,0
 508115c:	00800034 	movhi	r2,0
 5081160:	1086af04 	addi	r2,r2,6844
 5081164:	bdc6a104 	addi	r23,r23,6788
 5081168:	15400017 	ldw	r21,0(r2)
 508116c:	b8c00017 	ldw	r3,0(r23)
 5081170:	00bfffc4 	movi	r2,-1
 5081174:	858d883a 	add	r6,r16,r22
 5081178:	8d6b883a 	add	r21,r17,r21
 508117c:	1880ea26 	beq	r3,r2,5081528 <_malloc_r+0x714>
 5081180:	ad4403c4 	addi	r21,r21,4111
 5081184:	00bc0004 	movi	r2,-4096
 5081188:	a8aa703a 	and	r21,r21,r2
 508118c:	a80b883a 	mov	r5,r21
 5081190:	9009883a 	mov	r4,r18
 5081194:	d9800015 	stw	r6,0(sp)
 5081198:	50820340 	call	5082034 <_sbrk_r>
 508119c:	1029883a 	mov	r20,r2
 50811a0:	00bfffc4 	movi	r2,-1
 50811a4:	d9800017 	ldw	r6,0(sp)
 50811a8:	a080e826 	beq	r20,r2,508154c <_malloc_r+0x738>
 50811ac:	a180a636 	bltu	r20,r6,5081448 <_malloc_r+0x634>
 50811b0:	07000034 	movhi	fp,0
 50811b4:	e706b804 	addi	fp,fp,6880
 50811b8:	e0800017 	ldw	r2,0(fp)
 50811bc:	a887883a 	add	r3,r21,r2
 50811c0:	e0c00015 	stw	r3,0(fp)
 50811c4:	3500e626 	beq	r6,r20,5081560 <_malloc_r+0x74c>
 50811c8:	b9000017 	ldw	r4,0(r23)
 50811cc:	00bfffc4 	movi	r2,-1
 50811d0:	2080ee26 	beq	r4,r2,508158c <_malloc_r+0x778>
 50811d4:	a185c83a 	sub	r2,r20,r6
 50811d8:	10c5883a 	add	r2,r2,r3
 50811dc:	e0800015 	stw	r2,0(fp)
 50811e0:	a0c001cc 	andi	r3,r20,7
 50811e4:	1800bc26 	beq	r3,zero,50814d8 <_malloc_r+0x6c4>
 50811e8:	a0e9c83a 	sub	r20,r20,r3
 50811ec:	00840204 	movi	r2,4104
 50811f0:	a5000204 	addi	r20,r20,8
 50811f4:	10c7c83a 	sub	r3,r2,r3
 50811f8:	a545883a 	add	r2,r20,r21
 50811fc:	1083ffcc 	andi	r2,r2,4095
 5081200:	18abc83a 	sub	r21,r3,r2
 5081204:	a80b883a 	mov	r5,r21
 5081208:	9009883a 	mov	r4,r18
 508120c:	50820340 	call	5082034 <_sbrk_r>
 5081210:	00ffffc4 	movi	r3,-1
 5081214:	10c0e126 	beq	r2,r3,508159c <_malloc_r+0x788>
 5081218:	1505c83a 	sub	r2,r2,r20
 508121c:	1545883a 	add	r2,r2,r21
 5081220:	10800054 	ori	r2,r2,1
 5081224:	e0c00017 	ldw	r3,0(fp)
 5081228:	9d000215 	stw	r20,8(r19)
 508122c:	a0800115 	stw	r2,4(r20)
 5081230:	a8c7883a 	add	r3,r21,r3
 5081234:	e0c00015 	stw	r3,0(fp)
 5081238:	84c00e26 	beq	r16,r19,5081274 <_malloc_r+0x460>
 508123c:	018003c4 	movi	r6,15
 5081240:	3580a72e 	bgeu	r6,r22,50814e0 <_malloc_r+0x6cc>
 5081244:	81400117 	ldw	r5,4(r16)
 5081248:	013ffe04 	movi	r4,-8
 508124c:	b0bffd04 	addi	r2,r22,-12
 5081250:	1104703a 	and	r2,r2,r4
 5081254:	2900004c 	andi	r4,r5,1
 5081258:	2088b03a 	or	r4,r4,r2
 508125c:	81000115 	stw	r4,4(r16)
 5081260:	01400144 	movi	r5,5
 5081264:	8089883a 	add	r4,r16,r2
 5081268:	21400115 	stw	r5,4(r4)
 508126c:	21400215 	stw	r5,8(r4)
 5081270:	3080cd36 	bltu	r6,r2,50815a8 <_malloc_r+0x794>
 5081274:	00800034 	movhi	r2,0
 5081278:	1086ae04 	addi	r2,r2,6840
 508127c:	11000017 	ldw	r4,0(r2)
 5081280:	20c0012e 	bgeu	r4,r3,5081288 <_malloc_r+0x474>
 5081284:	10c00015 	stw	r3,0(r2)
 5081288:	00800034 	movhi	r2,0
 508128c:	1086ad04 	addi	r2,r2,6836
 5081290:	11000017 	ldw	r4,0(r2)
 5081294:	9c000217 	ldw	r16,8(r19)
 5081298:	20c0012e 	bgeu	r4,r3,50812a0 <_malloc_r+0x48c>
 508129c:	10c00015 	stw	r3,0(r2)
 50812a0:	80c00117 	ldw	r3,4(r16)
 50812a4:	00bfff04 	movi	r2,-4
 50812a8:	1886703a 	and	r3,r3,r2
 50812ac:	1c45c83a 	sub	r2,r3,r17
 50812b0:	1c400236 	bltu	r3,r17,50812bc <_malloc_r+0x4a8>
 50812b4:	00c003c4 	movi	r3,15
 50812b8:	18800416 	blt	r3,r2,50812cc <_malloc_r+0x4b8>
 50812bc:	9009883a 	mov	r4,r18
 50812c0:	508362c0 	call	508362c <__malloc_unlock>
 50812c4:	0005883a 	mov	r2,zero
 50812c8:	003f7b06 	br	50810b8 <__flash_rwdata_start+0xffffb834>
 50812cc:	88c00054 	ori	r3,r17,1
 50812d0:	80c00115 	stw	r3,4(r16)
 50812d4:	8463883a 	add	r17,r16,r17
 50812d8:	10800054 	ori	r2,r2,1
 50812dc:	9c400215 	stw	r17,8(r19)
 50812e0:	88800115 	stw	r2,4(r17)
 50812e4:	9009883a 	mov	r4,r18
 50812e8:	508362c0 	call	508362c <__malloc_unlock>
 50812ec:	80800204 	addi	r2,r16,8
 50812f0:	003f7106 	br	50810b8 <__flash_rwdata_start+0xffffb834>
 50812f4:	00c00504 	movi	r3,20
 50812f8:	18804a2e 	bgeu	r3,r2,5081424 <_malloc_r+0x610>
 50812fc:	00c01504 	movi	r3,84
 5081300:	18806e36 	bltu	r3,r2,50814bc <_malloc_r+0x6a8>
 5081304:	8804d33a 	srli	r2,r17,12
 5081308:	12001bc4 	addi	r8,r2,111
 508130c:	11c01b84 	addi	r7,r2,110
 5081310:	4209883a 	add	r4,r8,r8
 5081314:	003edd06 	br	5080e8c <__flash_rwdata_start+0xffffb608>
 5081318:	3804d27a 	srli	r2,r7,9
 508131c:	00c00104 	movi	r3,4
 5081320:	1880442e 	bgeu	r3,r2,5081434 <_malloc_r+0x620>
 5081324:	00c00504 	movi	r3,20
 5081328:	18808136 	bltu	r3,r2,5081530 <_malloc_r+0x71c>
 508132c:	11401704 	addi	r5,r2,92
 5081330:	10c016c4 	addi	r3,r2,91
 5081334:	294b883a 	add	r5,r5,r5
 5081338:	294b883a 	add	r5,r5,r5
 508133c:	294b883a 	add	r5,r5,r5
 5081340:	994b883a 	add	r5,r19,r5
 5081344:	28800017 	ldw	r2,0(r5)
 5081348:	01800034 	movhi	r6,0
 508134c:	297ffe04 	addi	r5,r5,-8
 5081350:	31811b04 	addi	r6,r6,1132
 5081354:	28806526 	beq	r5,r2,50814ec <_malloc_r+0x6d8>
 5081358:	01bfff04 	movi	r6,-4
 508135c:	10c00117 	ldw	r3,4(r2)
 5081360:	1986703a 	and	r3,r3,r6
 5081364:	38c0022e 	bgeu	r7,r3,5081370 <_malloc_r+0x55c>
 5081368:	10800217 	ldw	r2,8(r2)
 508136c:	28bffb1e 	bne	r5,r2,508135c <__flash_rwdata_start+0xffffbad8>
 5081370:	11400317 	ldw	r5,12(r2)
 5081374:	98c00117 	ldw	r3,4(r19)
 5081378:	81400315 	stw	r5,12(r16)
 508137c:	80800215 	stw	r2,8(r16)
 5081380:	2c000215 	stw	r16,8(r5)
 5081384:	14000315 	stw	r16,12(r2)
 5081388:	003ef806 	br	5080f6c <__flash_rwdata_start+0xffffb6e8>
 508138c:	88c00054 	ori	r3,r17,1
 5081390:	80c00115 	stw	r3,4(r16)
 5081394:	8463883a 	add	r17,r16,r17
 5081398:	34400515 	stw	r17,20(r6)
 508139c:	34400415 	stw	r17,16(r6)
 50813a0:	10c00054 	ori	r3,r2,1
 50813a4:	8a000315 	stw	r8,12(r17)
 50813a8:	8a000215 	stw	r8,8(r17)
 50813ac:	88c00115 	stw	r3,4(r17)
 50813b0:	88a3883a 	add	r17,r17,r2
 50813b4:	88800015 	stw	r2,0(r17)
 50813b8:	9009883a 	mov	r4,r18
 50813bc:	508362c0 	call	508362c <__malloc_unlock>
 50813c0:	80800204 	addi	r2,r16,8
 50813c4:	003f3c06 	br	50810b8 <__flash_rwdata_start+0xffffb834>
 50813c8:	30c00117 	ldw	r3,4(r6)
 50813cc:	003ee706 	br	5080f6c <__flash_rwdata_start+0xffffb6e8>
 50813d0:	5ac00044 	addi	r11,r11,1
 50813d4:	588000cc 	andi	r2,r11,3
 50813d8:	31800204 	addi	r6,r6,8
 50813dc:	103efd1e 	bne	r2,zero,5080fd4 <__flash_rwdata_start+0xffffb750>
 50813e0:	00002406 	br	5081474 <_malloc_r+0x660>
 50813e4:	14000317 	ldw	r16,12(r2)
 50813e8:	143f251e 	bne	r2,r16,5081080 <__flash_rwdata_start+0xffffb7fc>
 50813ec:	21000084 	addi	r4,r4,2
 50813f0:	003ebc06 	br	5080ee4 <__flash_rwdata_start+0xffffb660>
 50813f4:	8085883a 	add	r2,r16,r2
 50813f8:	10c00117 	ldw	r3,4(r2)
 50813fc:	81000317 	ldw	r4,12(r16)
 5081400:	81400217 	ldw	r5,8(r16)
 5081404:	18c00054 	ori	r3,r3,1
 5081408:	10c00115 	stw	r3,4(r2)
 508140c:	29000315 	stw	r4,12(r5)
 5081410:	21400215 	stw	r5,8(r4)
 5081414:	9009883a 	mov	r4,r18
 5081418:	508362c0 	call	508362c <__malloc_unlock>
 508141c:	80800204 	addi	r2,r16,8
 5081420:	003f2506 	br	50810b8 <__flash_rwdata_start+0xffffb834>
 5081424:	12001704 	addi	r8,r2,92
 5081428:	11c016c4 	addi	r7,r2,91
 508142c:	4209883a 	add	r4,r8,r8
 5081430:	003e9606 	br	5080e8c <__flash_rwdata_start+0xffffb608>
 5081434:	3804d1ba 	srli	r2,r7,6
 5081438:	11400e44 	addi	r5,r2,57
 508143c:	10c00e04 	addi	r3,r2,56
 5081440:	294b883a 	add	r5,r5,r5
 5081444:	003fbc06 	br	5081338 <__flash_rwdata_start+0xffffbab4>
 5081448:	84ff5926 	beq	r16,r19,50811b0 <__flash_rwdata_start+0xffffb92c>
 508144c:	00800034 	movhi	r2,0
 5081450:	10811b04 	addi	r2,r2,1132
 5081454:	14000217 	ldw	r16,8(r2)
 5081458:	00bfff04 	movi	r2,-4
 508145c:	80c00117 	ldw	r3,4(r16)
 5081460:	1886703a 	and	r3,r3,r2
 5081464:	003f9106 	br	50812ac <__flash_rwdata_start+0xffffba28>
 5081468:	60800217 	ldw	r2,8(r12)
 508146c:	213fffc4 	addi	r4,r4,-1
 5081470:	1300651e 	bne	r2,r12,5081608 <_malloc_r+0x7f4>
 5081474:	208000cc 	andi	r2,r4,3
 5081478:	633ffe04 	addi	r12,r12,-8
 508147c:	103ffa1e 	bne	r2,zero,5081468 <__flash_rwdata_start+0xffffbbe4>
 5081480:	98800117 	ldw	r2,4(r19)
 5081484:	0146303a 	nor	r3,zero,r5
 5081488:	1884703a 	and	r2,r3,r2
 508148c:	98800115 	stw	r2,4(r19)
 5081490:	294b883a 	add	r5,r5,r5
 5081494:	117f2836 	bltu	r2,r5,5081138 <__flash_rwdata_start+0xffffb8b4>
 5081498:	283f2726 	beq	r5,zero,5081138 <__flash_rwdata_start+0xffffb8b4>
 508149c:	2886703a 	and	r3,r5,r2
 50814a0:	5809883a 	mov	r4,r11
 50814a4:	183ec31e 	bne	r3,zero,5080fb4 <__flash_rwdata_start+0xffffb730>
 50814a8:	294b883a 	add	r5,r5,r5
 50814ac:	2886703a 	and	r3,r5,r2
 50814b0:	21000104 	addi	r4,r4,4
 50814b4:	183ffc26 	beq	r3,zero,50814a8 <__flash_rwdata_start+0xffffbc24>
 50814b8:	003ebe06 	br	5080fb4 <__flash_rwdata_start+0xffffb730>
 50814bc:	00c05504 	movi	r3,340
 50814c0:	18801236 	bltu	r3,r2,508150c <_malloc_r+0x6f8>
 50814c4:	8804d3fa 	srli	r2,r17,15
 50814c8:	12001e04 	addi	r8,r2,120
 50814cc:	11c01dc4 	addi	r7,r2,119
 50814d0:	4209883a 	add	r4,r8,r8
 50814d4:	003e6d06 	br	5080e8c <__flash_rwdata_start+0xffffb608>
 50814d8:	00c40004 	movi	r3,4096
 50814dc:	003f4606 	br	50811f8 <__flash_rwdata_start+0xffffb974>
 50814e0:	00800044 	movi	r2,1
 50814e4:	a0800115 	stw	r2,4(r20)
 50814e8:	003f7406 	br	50812bc <__flash_rwdata_start+0xffffba38>
 50814ec:	1805d0ba 	srai	r2,r3,2
 50814f0:	01c00044 	movi	r7,1
 50814f4:	30c00117 	ldw	r3,4(r6)
 50814f8:	388e983a 	sll	r7,r7,r2
 50814fc:	2805883a 	mov	r2,r5
 5081500:	38c6b03a 	or	r3,r7,r3
 5081504:	30c00115 	stw	r3,4(r6)
 5081508:	003f9b06 	br	5081378 <__flash_rwdata_start+0xffffbaf4>
 508150c:	00c15504 	movi	r3,1364
 5081510:	18801a36 	bltu	r3,r2,508157c <_malloc_r+0x768>
 5081514:	8804d4ba 	srli	r2,r17,18
 5081518:	12001f44 	addi	r8,r2,125
 508151c:	11c01f04 	addi	r7,r2,124
 5081520:	4209883a 	add	r4,r8,r8
 5081524:	003e5906 	br	5080e8c <__flash_rwdata_start+0xffffb608>
 5081528:	ad400404 	addi	r21,r21,16
 508152c:	003f1706 	br	508118c <__flash_rwdata_start+0xffffb908>
 5081530:	00c01504 	movi	r3,84
 5081534:	18802336 	bltu	r3,r2,50815c4 <_malloc_r+0x7b0>
 5081538:	3804d33a 	srli	r2,r7,12
 508153c:	11401bc4 	addi	r5,r2,111
 5081540:	10c01b84 	addi	r3,r2,110
 5081544:	294b883a 	add	r5,r5,r5
 5081548:	003f7b06 	br	5081338 <__flash_rwdata_start+0xffffbab4>
 508154c:	9c000217 	ldw	r16,8(r19)
 5081550:	00bfff04 	movi	r2,-4
 5081554:	80c00117 	ldw	r3,4(r16)
 5081558:	1886703a 	and	r3,r3,r2
 508155c:	003f5306 	br	50812ac <__flash_rwdata_start+0xffffba28>
 5081560:	3083ffcc 	andi	r2,r6,4095
 5081564:	103f181e 	bne	r2,zero,50811c8 <__flash_rwdata_start+0xffffb944>
 5081568:	99000217 	ldw	r4,8(r19)
 508156c:	b545883a 	add	r2,r22,r21
 5081570:	10800054 	ori	r2,r2,1
 5081574:	20800115 	stw	r2,4(r4)
 5081578:	003f3e06 	br	5081274 <__flash_rwdata_start+0xffffb9f0>
 508157c:	01003f84 	movi	r4,254
 5081580:	02001fc4 	movi	r8,127
 5081584:	01c01f84 	movi	r7,126
 5081588:	003e4006 	br	5080e8c <__flash_rwdata_start+0xffffb608>
 508158c:	00800034 	movhi	r2,0
 5081590:	1086a104 	addi	r2,r2,6788
 5081594:	15000015 	stw	r20,0(r2)
 5081598:	003f1106 	br	50811e0 <__flash_rwdata_start+0xffffb95c>
 508159c:	00800044 	movi	r2,1
 50815a0:	002b883a 	mov	r21,zero
 50815a4:	003f1f06 	br	5081224 <__flash_rwdata_start+0xffffb9a0>
 50815a8:	81400204 	addi	r5,r16,8
 50815ac:	9009883a 	mov	r4,r18
 50815b0:	508289c0 	call	508289c <_free_r>
 50815b4:	00800034 	movhi	r2,0
 50815b8:	1086b804 	addi	r2,r2,6880
 50815bc:	10c00017 	ldw	r3,0(r2)
 50815c0:	003f2c06 	br	5081274 <__flash_rwdata_start+0xffffb9f0>
 50815c4:	00c05504 	movi	r3,340
 50815c8:	18800536 	bltu	r3,r2,50815e0 <_malloc_r+0x7cc>
 50815cc:	3804d3fa 	srli	r2,r7,15
 50815d0:	11401e04 	addi	r5,r2,120
 50815d4:	10c01dc4 	addi	r3,r2,119
 50815d8:	294b883a 	add	r5,r5,r5
 50815dc:	003f5606 	br	5081338 <__flash_rwdata_start+0xffffbab4>
 50815e0:	00c15504 	movi	r3,1364
 50815e4:	18800536 	bltu	r3,r2,50815fc <_malloc_r+0x7e8>
 50815e8:	3804d4ba 	srli	r2,r7,18
 50815ec:	11401f44 	addi	r5,r2,125
 50815f0:	10c01f04 	addi	r3,r2,124
 50815f4:	294b883a 	add	r5,r5,r5
 50815f8:	003f4f06 	br	5081338 <__flash_rwdata_start+0xffffbab4>
 50815fc:	01403f84 	movi	r5,254
 5081600:	00c01f84 	movi	r3,126
 5081604:	003f4c06 	br	5081338 <__flash_rwdata_start+0xffffbab4>
 5081608:	98800117 	ldw	r2,4(r19)
 508160c:	003fa006 	br	5081490 <__flash_rwdata_start+0xffffbc0c>
 5081610:	8808d0fa 	srli	r4,r17,3
 5081614:	20800044 	addi	r2,r4,1
 5081618:	1085883a 	add	r2,r2,r2
 508161c:	003e9006 	br	5081060 <__flash_rwdata_start+0xffffb7dc>

05081620 <memchr>:
 5081620:	208000cc 	andi	r2,r4,3
 5081624:	280f883a 	mov	r7,r5
 5081628:	10003426 	beq	r2,zero,50816fc <memchr+0xdc>
 508162c:	30bfffc4 	addi	r2,r6,-1
 5081630:	30001a26 	beq	r6,zero,508169c <memchr+0x7c>
 5081634:	20c00003 	ldbu	r3,0(r4)
 5081638:	29803fcc 	andi	r6,r5,255
 508163c:	30c0051e 	bne	r6,r3,5081654 <memchr+0x34>
 5081640:	00001806 	br	50816a4 <memchr+0x84>
 5081644:	10001526 	beq	r2,zero,508169c <memchr+0x7c>
 5081648:	20c00003 	ldbu	r3,0(r4)
 508164c:	10bfffc4 	addi	r2,r2,-1
 5081650:	30c01426 	beq	r6,r3,50816a4 <memchr+0x84>
 5081654:	21000044 	addi	r4,r4,1
 5081658:	20c000cc 	andi	r3,r4,3
 508165c:	183ff91e 	bne	r3,zero,5081644 <__flash_rwdata_start+0xffffbdc0>
 5081660:	020000c4 	movi	r8,3
 5081664:	40801136 	bltu	r8,r2,50816ac <memchr+0x8c>
 5081668:	10000c26 	beq	r2,zero,508169c <memchr+0x7c>
 508166c:	20c00003 	ldbu	r3,0(r4)
 5081670:	29403fcc 	andi	r5,r5,255
 5081674:	28c00b26 	beq	r5,r3,50816a4 <memchr+0x84>
 5081678:	20c00044 	addi	r3,r4,1
 508167c:	39803fcc 	andi	r6,r7,255
 5081680:	2089883a 	add	r4,r4,r2
 5081684:	00000306 	br	5081694 <memchr+0x74>
 5081688:	18c00044 	addi	r3,r3,1
 508168c:	197fffc3 	ldbu	r5,-1(r3)
 5081690:	31400526 	beq	r6,r5,50816a8 <memchr+0x88>
 5081694:	1805883a 	mov	r2,r3
 5081698:	20fffb1e 	bne	r4,r3,5081688 <__flash_rwdata_start+0xffffbe04>
 508169c:	0005883a 	mov	r2,zero
 50816a0:	f800283a 	ret
 50816a4:	2005883a 	mov	r2,r4
 50816a8:	f800283a 	ret
 50816ac:	28c03fcc 	andi	r3,r5,255
 50816b0:	1812923a 	slli	r9,r3,8
 50816b4:	02ffbff4 	movhi	r11,65279
 50816b8:	02a02074 	movhi	r10,32897
 50816bc:	48d2b03a 	or	r9,r9,r3
 50816c0:	4806943a 	slli	r3,r9,16
 50816c4:	5affbfc4 	addi	r11,r11,-257
 50816c8:	52a02004 	addi	r10,r10,-32640
 50816cc:	48d2b03a 	or	r9,r9,r3
 50816d0:	20c00017 	ldw	r3,0(r4)
 50816d4:	48c6f03a 	xor	r3,r9,r3
 50816d8:	1acd883a 	add	r6,r3,r11
 50816dc:	00c6303a 	nor	r3,zero,r3
 50816e0:	30c6703a 	and	r3,r6,r3
 50816e4:	1a86703a 	and	r3,r3,r10
 50816e8:	183fe01e 	bne	r3,zero,508166c <__flash_rwdata_start+0xffffbde8>
 50816ec:	10bfff04 	addi	r2,r2,-4
 50816f0:	21000104 	addi	r4,r4,4
 50816f4:	40bff636 	bltu	r8,r2,50816d0 <__flash_rwdata_start+0xffffbe4c>
 50816f8:	003fdb06 	br	5081668 <__flash_rwdata_start+0xffffbde4>
 50816fc:	3005883a 	mov	r2,r6
 5081700:	003fd706 	br	5081660 <__flash_rwdata_start+0xffffbddc>

05081704 <memcpy>:
 5081704:	defffd04 	addi	sp,sp,-12
 5081708:	dfc00215 	stw	ra,8(sp)
 508170c:	dc400115 	stw	r17,4(sp)
 5081710:	dc000015 	stw	r16,0(sp)
 5081714:	00c003c4 	movi	r3,15
 5081718:	2005883a 	mov	r2,r4
 508171c:	1980452e 	bgeu	r3,r6,5081834 <memcpy+0x130>
 5081720:	2906b03a 	or	r3,r5,r4
 5081724:	18c000cc 	andi	r3,r3,3
 5081728:	1800441e 	bne	r3,zero,508183c <memcpy+0x138>
 508172c:	347ffc04 	addi	r17,r6,-16
 5081730:	8822d13a 	srli	r17,r17,4
 5081734:	28c00104 	addi	r3,r5,4
 5081738:	23400104 	addi	r13,r4,4
 508173c:	8820913a 	slli	r16,r17,4
 5081740:	2b000204 	addi	r12,r5,8
 5081744:	22c00204 	addi	r11,r4,8
 5081748:	84000504 	addi	r16,r16,20
 508174c:	2a800304 	addi	r10,r5,12
 5081750:	22400304 	addi	r9,r4,12
 5081754:	2c21883a 	add	r16,r5,r16
 5081758:	2811883a 	mov	r8,r5
 508175c:	200f883a 	mov	r7,r4
 5081760:	41000017 	ldw	r4,0(r8)
 5081764:	1fc00017 	ldw	ra,0(r3)
 5081768:	63c00017 	ldw	r15,0(r12)
 508176c:	39000015 	stw	r4,0(r7)
 5081770:	53800017 	ldw	r14,0(r10)
 5081774:	6fc00015 	stw	ra,0(r13)
 5081778:	5bc00015 	stw	r15,0(r11)
 508177c:	4b800015 	stw	r14,0(r9)
 5081780:	18c00404 	addi	r3,r3,16
 5081784:	39c00404 	addi	r7,r7,16
 5081788:	42000404 	addi	r8,r8,16
 508178c:	6b400404 	addi	r13,r13,16
 5081790:	63000404 	addi	r12,r12,16
 5081794:	5ac00404 	addi	r11,r11,16
 5081798:	52800404 	addi	r10,r10,16
 508179c:	4a400404 	addi	r9,r9,16
 50817a0:	1c3fef1e 	bne	r3,r16,5081760 <__flash_rwdata_start+0xffffbedc>
 50817a4:	89c00044 	addi	r7,r17,1
 50817a8:	380e913a 	slli	r7,r7,4
 50817ac:	310003cc 	andi	r4,r6,15
 50817b0:	02c000c4 	movi	r11,3
 50817b4:	11c7883a 	add	r3,r2,r7
 50817b8:	29cb883a 	add	r5,r5,r7
 50817bc:	5900212e 	bgeu	r11,r4,5081844 <memcpy+0x140>
 50817c0:	1813883a 	mov	r9,r3
 50817c4:	2811883a 	mov	r8,r5
 50817c8:	200f883a 	mov	r7,r4
 50817cc:	42800017 	ldw	r10,0(r8)
 50817d0:	4a400104 	addi	r9,r9,4
 50817d4:	39ffff04 	addi	r7,r7,-4
 50817d8:	4abfff15 	stw	r10,-4(r9)
 50817dc:	42000104 	addi	r8,r8,4
 50817e0:	59fffa36 	bltu	r11,r7,50817cc <__flash_rwdata_start+0xffffbf48>
 50817e4:	213fff04 	addi	r4,r4,-4
 50817e8:	2008d0ba 	srli	r4,r4,2
 50817ec:	318000cc 	andi	r6,r6,3
 50817f0:	21000044 	addi	r4,r4,1
 50817f4:	2109883a 	add	r4,r4,r4
 50817f8:	2109883a 	add	r4,r4,r4
 50817fc:	1907883a 	add	r3,r3,r4
 5081800:	290b883a 	add	r5,r5,r4
 5081804:	30000626 	beq	r6,zero,5081820 <memcpy+0x11c>
 5081808:	198d883a 	add	r6,r3,r6
 508180c:	29c00003 	ldbu	r7,0(r5)
 5081810:	18c00044 	addi	r3,r3,1
 5081814:	29400044 	addi	r5,r5,1
 5081818:	19ffffc5 	stb	r7,-1(r3)
 508181c:	19bffb1e 	bne	r3,r6,508180c <__flash_rwdata_start+0xffffbf88>
 5081820:	dfc00217 	ldw	ra,8(sp)
 5081824:	dc400117 	ldw	r17,4(sp)
 5081828:	dc000017 	ldw	r16,0(sp)
 508182c:	dec00304 	addi	sp,sp,12
 5081830:	f800283a 	ret
 5081834:	2007883a 	mov	r3,r4
 5081838:	003ff206 	br	5081804 <__flash_rwdata_start+0xffffbf80>
 508183c:	2007883a 	mov	r3,r4
 5081840:	003ff106 	br	5081808 <__flash_rwdata_start+0xffffbf84>
 5081844:	200d883a 	mov	r6,r4
 5081848:	003fee06 	br	5081804 <__flash_rwdata_start+0xffffbf80>

0508184c <memmove>:
 508184c:	2005883a 	mov	r2,r4
 5081850:	29000b2e 	bgeu	r5,r4,5081880 <memmove+0x34>
 5081854:	298f883a 	add	r7,r5,r6
 5081858:	21c0092e 	bgeu	r4,r7,5081880 <memmove+0x34>
 508185c:	2187883a 	add	r3,r4,r6
 5081860:	198bc83a 	sub	r5,r3,r6
 5081864:	30004826 	beq	r6,zero,5081988 <memmove+0x13c>
 5081868:	39ffffc4 	addi	r7,r7,-1
 508186c:	39000003 	ldbu	r4,0(r7)
 5081870:	18ffffc4 	addi	r3,r3,-1
 5081874:	19000005 	stb	r4,0(r3)
 5081878:	28fffb1e 	bne	r5,r3,5081868 <__flash_rwdata_start+0xffffbfe4>
 508187c:	f800283a 	ret
 5081880:	00c003c4 	movi	r3,15
 5081884:	1980412e 	bgeu	r3,r6,508198c <memmove+0x140>
 5081888:	2886b03a 	or	r3,r5,r2
 508188c:	18c000cc 	andi	r3,r3,3
 5081890:	1800401e 	bne	r3,zero,5081994 <memmove+0x148>
 5081894:	33fffc04 	addi	r15,r6,-16
 5081898:	781ed13a 	srli	r15,r15,4
 508189c:	28c00104 	addi	r3,r5,4
 50818a0:	13400104 	addi	r13,r2,4
 50818a4:	781c913a 	slli	r14,r15,4
 50818a8:	2b000204 	addi	r12,r5,8
 50818ac:	12c00204 	addi	r11,r2,8
 50818b0:	73800504 	addi	r14,r14,20
 50818b4:	2a800304 	addi	r10,r5,12
 50818b8:	12400304 	addi	r9,r2,12
 50818bc:	2b9d883a 	add	r14,r5,r14
 50818c0:	2811883a 	mov	r8,r5
 50818c4:	100f883a 	mov	r7,r2
 50818c8:	41000017 	ldw	r4,0(r8)
 50818cc:	39c00404 	addi	r7,r7,16
 50818d0:	18c00404 	addi	r3,r3,16
 50818d4:	393ffc15 	stw	r4,-16(r7)
 50818d8:	193ffc17 	ldw	r4,-16(r3)
 50818dc:	6b400404 	addi	r13,r13,16
 50818e0:	5ac00404 	addi	r11,r11,16
 50818e4:	693ffc15 	stw	r4,-16(r13)
 50818e8:	61000017 	ldw	r4,0(r12)
 50818ec:	4a400404 	addi	r9,r9,16
 50818f0:	42000404 	addi	r8,r8,16
 50818f4:	593ffc15 	stw	r4,-16(r11)
 50818f8:	51000017 	ldw	r4,0(r10)
 50818fc:	63000404 	addi	r12,r12,16
 5081900:	52800404 	addi	r10,r10,16
 5081904:	493ffc15 	stw	r4,-16(r9)
 5081908:	1bbfef1e 	bne	r3,r14,50818c8 <__flash_rwdata_start+0xffffc044>
 508190c:	79000044 	addi	r4,r15,1
 5081910:	2008913a 	slli	r4,r4,4
 5081914:	328003cc 	andi	r10,r6,15
 5081918:	02c000c4 	movi	r11,3
 508191c:	1107883a 	add	r3,r2,r4
 5081920:	290b883a 	add	r5,r5,r4
 5081924:	5a801e2e 	bgeu	r11,r10,50819a0 <memmove+0x154>
 5081928:	1813883a 	mov	r9,r3
 508192c:	2811883a 	mov	r8,r5
 5081930:	500f883a 	mov	r7,r10
 5081934:	41000017 	ldw	r4,0(r8)
 5081938:	4a400104 	addi	r9,r9,4
 508193c:	39ffff04 	addi	r7,r7,-4
 5081940:	493fff15 	stw	r4,-4(r9)
 5081944:	42000104 	addi	r8,r8,4
 5081948:	59fffa36 	bltu	r11,r7,5081934 <__flash_rwdata_start+0xffffc0b0>
 508194c:	513fff04 	addi	r4,r10,-4
 5081950:	2008d0ba 	srli	r4,r4,2
 5081954:	318000cc 	andi	r6,r6,3
 5081958:	21000044 	addi	r4,r4,1
 508195c:	2109883a 	add	r4,r4,r4
 5081960:	2109883a 	add	r4,r4,r4
 5081964:	1907883a 	add	r3,r3,r4
 5081968:	290b883a 	add	r5,r5,r4
 508196c:	30000b26 	beq	r6,zero,508199c <memmove+0x150>
 5081970:	198d883a 	add	r6,r3,r6
 5081974:	29c00003 	ldbu	r7,0(r5)
 5081978:	18c00044 	addi	r3,r3,1
 508197c:	29400044 	addi	r5,r5,1
 5081980:	19ffffc5 	stb	r7,-1(r3)
 5081984:	19bffb1e 	bne	r3,r6,5081974 <__flash_rwdata_start+0xffffc0f0>
 5081988:	f800283a 	ret
 508198c:	1007883a 	mov	r3,r2
 5081990:	003ff606 	br	508196c <__flash_rwdata_start+0xffffc0e8>
 5081994:	1007883a 	mov	r3,r2
 5081998:	003ff506 	br	5081970 <__flash_rwdata_start+0xffffc0ec>
 508199c:	f800283a 	ret
 50819a0:	500d883a 	mov	r6,r10
 50819a4:	003ff106 	br	508196c <__flash_rwdata_start+0xffffc0e8>

050819a8 <memset>:
 50819a8:	20c000cc 	andi	r3,r4,3
 50819ac:	2005883a 	mov	r2,r4
 50819b0:	18004426 	beq	r3,zero,5081ac4 <memset+0x11c>
 50819b4:	31ffffc4 	addi	r7,r6,-1
 50819b8:	30004026 	beq	r6,zero,5081abc <memset+0x114>
 50819bc:	2813883a 	mov	r9,r5
 50819c0:	200d883a 	mov	r6,r4
 50819c4:	2007883a 	mov	r3,r4
 50819c8:	00000406 	br	50819dc <memset+0x34>
 50819cc:	3a3fffc4 	addi	r8,r7,-1
 50819d0:	31800044 	addi	r6,r6,1
 50819d4:	38003926 	beq	r7,zero,5081abc <memset+0x114>
 50819d8:	400f883a 	mov	r7,r8
 50819dc:	18c00044 	addi	r3,r3,1
 50819e0:	32400005 	stb	r9,0(r6)
 50819e4:	1a0000cc 	andi	r8,r3,3
 50819e8:	403ff81e 	bne	r8,zero,50819cc <__flash_rwdata_start+0xffffc148>
 50819ec:	010000c4 	movi	r4,3
 50819f0:	21c02d2e 	bgeu	r4,r7,5081aa8 <memset+0x100>
 50819f4:	29003fcc 	andi	r4,r5,255
 50819f8:	200c923a 	slli	r6,r4,8
 50819fc:	3108b03a 	or	r4,r6,r4
 5081a00:	200c943a 	slli	r6,r4,16
 5081a04:	218cb03a 	or	r6,r4,r6
 5081a08:	010003c4 	movi	r4,15
 5081a0c:	21c0182e 	bgeu	r4,r7,5081a70 <memset+0xc8>
 5081a10:	3b3ffc04 	addi	r12,r7,-16
 5081a14:	6018d13a 	srli	r12,r12,4
 5081a18:	1a000104 	addi	r8,r3,4
 5081a1c:	1ac00204 	addi	r11,r3,8
 5081a20:	6008913a 	slli	r4,r12,4
 5081a24:	1a800304 	addi	r10,r3,12
 5081a28:	1813883a 	mov	r9,r3
 5081a2c:	21000504 	addi	r4,r4,20
 5081a30:	1909883a 	add	r4,r3,r4
 5081a34:	49800015 	stw	r6,0(r9)
 5081a38:	41800015 	stw	r6,0(r8)
 5081a3c:	59800015 	stw	r6,0(r11)
 5081a40:	51800015 	stw	r6,0(r10)
 5081a44:	42000404 	addi	r8,r8,16
 5081a48:	4a400404 	addi	r9,r9,16
 5081a4c:	5ac00404 	addi	r11,r11,16
 5081a50:	52800404 	addi	r10,r10,16
 5081a54:	413ff71e 	bne	r8,r4,5081a34 <__flash_rwdata_start+0xffffc1b0>
 5081a58:	63000044 	addi	r12,r12,1
 5081a5c:	6018913a 	slli	r12,r12,4
 5081a60:	39c003cc 	andi	r7,r7,15
 5081a64:	010000c4 	movi	r4,3
 5081a68:	1b07883a 	add	r3,r3,r12
 5081a6c:	21c00e2e 	bgeu	r4,r7,5081aa8 <memset+0x100>
 5081a70:	1813883a 	mov	r9,r3
 5081a74:	3811883a 	mov	r8,r7
 5081a78:	010000c4 	movi	r4,3
 5081a7c:	49800015 	stw	r6,0(r9)
 5081a80:	423fff04 	addi	r8,r8,-4
 5081a84:	4a400104 	addi	r9,r9,4
 5081a88:	223ffc36 	bltu	r4,r8,5081a7c <__flash_rwdata_start+0xffffc1f8>
 5081a8c:	393fff04 	addi	r4,r7,-4
 5081a90:	2008d0ba 	srli	r4,r4,2
 5081a94:	39c000cc 	andi	r7,r7,3
 5081a98:	21000044 	addi	r4,r4,1
 5081a9c:	2109883a 	add	r4,r4,r4
 5081aa0:	2109883a 	add	r4,r4,r4
 5081aa4:	1907883a 	add	r3,r3,r4
 5081aa8:	38000526 	beq	r7,zero,5081ac0 <memset+0x118>
 5081aac:	19cf883a 	add	r7,r3,r7
 5081ab0:	19400005 	stb	r5,0(r3)
 5081ab4:	18c00044 	addi	r3,r3,1
 5081ab8:	38fffd1e 	bne	r7,r3,5081ab0 <__flash_rwdata_start+0xffffc22c>
 5081abc:	f800283a 	ret
 5081ac0:	f800283a 	ret
 5081ac4:	2007883a 	mov	r3,r4
 5081ac8:	300f883a 	mov	r7,r6
 5081acc:	003fc706 	br	50819ec <__flash_rwdata_start+0xffffc168>

05081ad0 <_realloc_r>:
 5081ad0:	defff604 	addi	sp,sp,-40
 5081ad4:	dc800215 	stw	r18,8(sp)
 5081ad8:	dfc00915 	stw	ra,36(sp)
 5081adc:	df000815 	stw	fp,32(sp)
 5081ae0:	ddc00715 	stw	r23,28(sp)
 5081ae4:	dd800615 	stw	r22,24(sp)
 5081ae8:	dd400515 	stw	r21,20(sp)
 5081aec:	dd000415 	stw	r20,16(sp)
 5081af0:	dcc00315 	stw	r19,12(sp)
 5081af4:	dc400115 	stw	r17,4(sp)
 5081af8:	dc000015 	stw	r16,0(sp)
 5081afc:	3025883a 	mov	r18,r6
 5081b00:	2800b726 	beq	r5,zero,5081de0 <_realloc_r+0x310>
 5081b04:	282b883a 	mov	r21,r5
 5081b08:	2029883a 	mov	r20,r4
 5081b0c:	50836080 	call	5083608 <__malloc_lock>
 5081b10:	a8bfff17 	ldw	r2,-4(r21)
 5081b14:	043fff04 	movi	r16,-4
 5081b18:	90c002c4 	addi	r3,r18,11
 5081b1c:	01000584 	movi	r4,22
 5081b20:	acfffe04 	addi	r19,r21,-8
 5081b24:	1420703a 	and	r16,r2,r16
 5081b28:	20c0332e 	bgeu	r4,r3,5081bf8 <_realloc_r+0x128>
 5081b2c:	047ffe04 	movi	r17,-8
 5081b30:	1c62703a 	and	r17,r3,r17
 5081b34:	8807883a 	mov	r3,r17
 5081b38:	88005816 	blt	r17,zero,5081c9c <_realloc_r+0x1cc>
 5081b3c:	8c805736 	bltu	r17,r18,5081c9c <_realloc_r+0x1cc>
 5081b40:	80c0300e 	bge	r16,r3,5081c04 <_realloc_r+0x134>
 5081b44:	07000034 	movhi	fp,0
 5081b48:	e7011b04 	addi	fp,fp,1132
 5081b4c:	e1c00217 	ldw	r7,8(fp)
 5081b50:	9c09883a 	add	r4,r19,r16
 5081b54:	22000117 	ldw	r8,4(r4)
 5081b58:	21c06326 	beq	r4,r7,5081ce8 <_realloc_r+0x218>
 5081b5c:	017fff84 	movi	r5,-2
 5081b60:	414a703a 	and	r5,r8,r5
 5081b64:	214b883a 	add	r5,r4,r5
 5081b68:	29800117 	ldw	r6,4(r5)
 5081b6c:	3180004c 	andi	r6,r6,1
 5081b70:	30003f26 	beq	r6,zero,5081c70 <_realloc_r+0x1a0>
 5081b74:	1080004c 	andi	r2,r2,1
 5081b78:	10008326 	beq	r2,zero,5081d88 <_realloc_r+0x2b8>
 5081b7c:	900b883a 	mov	r5,r18
 5081b80:	a009883a 	mov	r4,r20
 5081b84:	5080e140 	call	5080e14 <_malloc_r>
 5081b88:	1025883a 	mov	r18,r2
 5081b8c:	10011e26 	beq	r2,zero,5082008 <_realloc_r+0x538>
 5081b90:	a93fff17 	ldw	r4,-4(r21)
 5081b94:	10fffe04 	addi	r3,r2,-8
 5081b98:	00bfff84 	movi	r2,-2
 5081b9c:	2084703a 	and	r2,r4,r2
 5081ba0:	9885883a 	add	r2,r19,r2
 5081ba4:	1880ee26 	beq	r3,r2,5081f60 <_realloc_r+0x490>
 5081ba8:	81bfff04 	addi	r6,r16,-4
 5081bac:	00800904 	movi	r2,36
 5081bb0:	1180b836 	bltu	r2,r6,5081e94 <_realloc_r+0x3c4>
 5081bb4:	00c004c4 	movi	r3,19
 5081bb8:	19809636 	bltu	r3,r6,5081e14 <_realloc_r+0x344>
 5081bbc:	9005883a 	mov	r2,r18
 5081bc0:	a807883a 	mov	r3,r21
 5081bc4:	19000017 	ldw	r4,0(r3)
 5081bc8:	11000015 	stw	r4,0(r2)
 5081bcc:	19000117 	ldw	r4,4(r3)
 5081bd0:	11000115 	stw	r4,4(r2)
 5081bd4:	18c00217 	ldw	r3,8(r3)
 5081bd8:	10c00215 	stw	r3,8(r2)
 5081bdc:	a80b883a 	mov	r5,r21
 5081be0:	a009883a 	mov	r4,r20
 5081be4:	508289c0 	call	508289c <_free_r>
 5081be8:	a009883a 	mov	r4,r20
 5081bec:	508362c0 	call	508362c <__malloc_unlock>
 5081bf0:	9005883a 	mov	r2,r18
 5081bf4:	00001206 	br	5081c40 <_realloc_r+0x170>
 5081bf8:	00c00404 	movi	r3,16
 5081bfc:	1823883a 	mov	r17,r3
 5081c00:	003fce06 	br	5081b3c <__flash_rwdata_start+0xffffc2b8>
 5081c04:	a825883a 	mov	r18,r21
 5081c08:	8445c83a 	sub	r2,r16,r17
 5081c0c:	00c003c4 	movi	r3,15
 5081c10:	18802636 	bltu	r3,r2,5081cac <_realloc_r+0x1dc>
 5081c14:	99800117 	ldw	r6,4(r19)
 5081c18:	9c07883a 	add	r3,r19,r16
 5081c1c:	3180004c 	andi	r6,r6,1
 5081c20:	3420b03a 	or	r16,r6,r16
 5081c24:	9c000115 	stw	r16,4(r19)
 5081c28:	18800117 	ldw	r2,4(r3)
 5081c2c:	10800054 	ori	r2,r2,1
 5081c30:	18800115 	stw	r2,4(r3)
 5081c34:	a009883a 	mov	r4,r20
 5081c38:	508362c0 	call	508362c <__malloc_unlock>
 5081c3c:	9005883a 	mov	r2,r18
 5081c40:	dfc00917 	ldw	ra,36(sp)
 5081c44:	df000817 	ldw	fp,32(sp)
 5081c48:	ddc00717 	ldw	r23,28(sp)
 5081c4c:	dd800617 	ldw	r22,24(sp)
 5081c50:	dd400517 	ldw	r21,20(sp)
 5081c54:	dd000417 	ldw	r20,16(sp)
 5081c58:	dcc00317 	ldw	r19,12(sp)
 5081c5c:	dc800217 	ldw	r18,8(sp)
 5081c60:	dc400117 	ldw	r17,4(sp)
 5081c64:	dc000017 	ldw	r16,0(sp)
 5081c68:	dec00a04 	addi	sp,sp,40
 5081c6c:	f800283a 	ret
 5081c70:	017fff04 	movi	r5,-4
 5081c74:	414a703a 	and	r5,r8,r5
 5081c78:	814d883a 	add	r6,r16,r5
 5081c7c:	30c01f16 	blt	r6,r3,5081cfc <_realloc_r+0x22c>
 5081c80:	20800317 	ldw	r2,12(r4)
 5081c84:	20c00217 	ldw	r3,8(r4)
 5081c88:	a825883a 	mov	r18,r21
 5081c8c:	3021883a 	mov	r16,r6
 5081c90:	18800315 	stw	r2,12(r3)
 5081c94:	10c00215 	stw	r3,8(r2)
 5081c98:	003fdb06 	br	5081c08 <__flash_rwdata_start+0xffffc384>
 5081c9c:	00800304 	movi	r2,12
 5081ca0:	a0800015 	stw	r2,0(r20)
 5081ca4:	0005883a 	mov	r2,zero
 5081ca8:	003fe506 	br	5081c40 <__flash_rwdata_start+0xffffc3bc>
 5081cac:	98c00117 	ldw	r3,4(r19)
 5081cb0:	9c4b883a 	add	r5,r19,r17
 5081cb4:	11000054 	ori	r4,r2,1
 5081cb8:	18c0004c 	andi	r3,r3,1
 5081cbc:	1c62b03a 	or	r17,r3,r17
 5081cc0:	9c400115 	stw	r17,4(r19)
 5081cc4:	29000115 	stw	r4,4(r5)
 5081cc8:	2885883a 	add	r2,r5,r2
 5081ccc:	10c00117 	ldw	r3,4(r2)
 5081cd0:	29400204 	addi	r5,r5,8
 5081cd4:	a009883a 	mov	r4,r20
 5081cd8:	18c00054 	ori	r3,r3,1
 5081cdc:	10c00115 	stw	r3,4(r2)
 5081ce0:	508289c0 	call	508289c <_free_r>
 5081ce4:	003fd306 	br	5081c34 <__flash_rwdata_start+0xffffc3b0>
 5081ce8:	017fff04 	movi	r5,-4
 5081cec:	414a703a 	and	r5,r8,r5
 5081cf0:	89800404 	addi	r6,r17,16
 5081cf4:	8151883a 	add	r8,r16,r5
 5081cf8:	4180590e 	bge	r8,r6,5081e60 <_realloc_r+0x390>
 5081cfc:	1080004c 	andi	r2,r2,1
 5081d00:	103f9e1e 	bne	r2,zero,5081b7c <__flash_rwdata_start+0xffffc2f8>
 5081d04:	adbffe17 	ldw	r22,-8(r21)
 5081d08:	00bfff04 	movi	r2,-4
 5081d0c:	9dadc83a 	sub	r22,r19,r22
 5081d10:	b1800117 	ldw	r6,4(r22)
 5081d14:	3084703a 	and	r2,r6,r2
 5081d18:	20002026 	beq	r4,zero,5081d9c <_realloc_r+0x2cc>
 5081d1c:	80af883a 	add	r23,r16,r2
 5081d20:	b96f883a 	add	r23,r23,r5
 5081d24:	21c05f26 	beq	r4,r7,5081ea4 <_realloc_r+0x3d4>
 5081d28:	b8c01c16 	blt	r23,r3,5081d9c <_realloc_r+0x2cc>
 5081d2c:	20800317 	ldw	r2,12(r4)
 5081d30:	20c00217 	ldw	r3,8(r4)
 5081d34:	81bfff04 	addi	r6,r16,-4
 5081d38:	01000904 	movi	r4,36
 5081d3c:	18800315 	stw	r2,12(r3)
 5081d40:	10c00215 	stw	r3,8(r2)
 5081d44:	b0c00217 	ldw	r3,8(r22)
 5081d48:	b0800317 	ldw	r2,12(r22)
 5081d4c:	b4800204 	addi	r18,r22,8
 5081d50:	18800315 	stw	r2,12(r3)
 5081d54:	10c00215 	stw	r3,8(r2)
 5081d58:	21801b36 	bltu	r4,r6,5081dc8 <_realloc_r+0x2f8>
 5081d5c:	008004c4 	movi	r2,19
 5081d60:	1180352e 	bgeu	r2,r6,5081e38 <_realloc_r+0x368>
 5081d64:	a8800017 	ldw	r2,0(r21)
 5081d68:	b0800215 	stw	r2,8(r22)
 5081d6c:	a8800117 	ldw	r2,4(r21)
 5081d70:	b0800315 	stw	r2,12(r22)
 5081d74:	008006c4 	movi	r2,27
 5081d78:	11807f36 	bltu	r2,r6,5081f78 <_realloc_r+0x4a8>
 5081d7c:	b0800404 	addi	r2,r22,16
 5081d80:	ad400204 	addi	r21,r21,8
 5081d84:	00002d06 	br	5081e3c <_realloc_r+0x36c>
 5081d88:	adbffe17 	ldw	r22,-8(r21)
 5081d8c:	00bfff04 	movi	r2,-4
 5081d90:	9dadc83a 	sub	r22,r19,r22
 5081d94:	b1000117 	ldw	r4,4(r22)
 5081d98:	2084703a 	and	r2,r4,r2
 5081d9c:	b03f7726 	beq	r22,zero,5081b7c <__flash_rwdata_start+0xffffc2f8>
 5081da0:	80af883a 	add	r23,r16,r2
 5081da4:	b8ff7516 	blt	r23,r3,5081b7c <__flash_rwdata_start+0xffffc2f8>
 5081da8:	b0800317 	ldw	r2,12(r22)
 5081dac:	b0c00217 	ldw	r3,8(r22)
 5081db0:	81bfff04 	addi	r6,r16,-4
 5081db4:	01000904 	movi	r4,36
 5081db8:	18800315 	stw	r2,12(r3)
 5081dbc:	10c00215 	stw	r3,8(r2)
 5081dc0:	b4800204 	addi	r18,r22,8
 5081dc4:	21bfe52e 	bgeu	r4,r6,5081d5c <__flash_rwdata_start+0xffffc4d8>
 5081dc8:	a80b883a 	mov	r5,r21
 5081dcc:	9009883a 	mov	r4,r18
 5081dd0:	508184c0 	call	508184c <memmove>
 5081dd4:	b821883a 	mov	r16,r23
 5081dd8:	b027883a 	mov	r19,r22
 5081ddc:	003f8a06 	br	5081c08 <__flash_rwdata_start+0xffffc384>
 5081de0:	300b883a 	mov	r5,r6
 5081de4:	dfc00917 	ldw	ra,36(sp)
 5081de8:	df000817 	ldw	fp,32(sp)
 5081dec:	ddc00717 	ldw	r23,28(sp)
 5081df0:	dd800617 	ldw	r22,24(sp)
 5081df4:	dd400517 	ldw	r21,20(sp)
 5081df8:	dd000417 	ldw	r20,16(sp)
 5081dfc:	dcc00317 	ldw	r19,12(sp)
 5081e00:	dc800217 	ldw	r18,8(sp)
 5081e04:	dc400117 	ldw	r17,4(sp)
 5081e08:	dc000017 	ldw	r16,0(sp)
 5081e0c:	dec00a04 	addi	sp,sp,40
 5081e10:	5080e141 	jmpi	5080e14 <_malloc_r>
 5081e14:	a8c00017 	ldw	r3,0(r21)
 5081e18:	90c00015 	stw	r3,0(r18)
 5081e1c:	a8c00117 	ldw	r3,4(r21)
 5081e20:	90c00115 	stw	r3,4(r18)
 5081e24:	00c006c4 	movi	r3,27
 5081e28:	19804536 	bltu	r3,r6,5081f40 <_realloc_r+0x470>
 5081e2c:	90800204 	addi	r2,r18,8
 5081e30:	a8c00204 	addi	r3,r21,8
 5081e34:	003f6306 	br	5081bc4 <__flash_rwdata_start+0xffffc340>
 5081e38:	9005883a 	mov	r2,r18
 5081e3c:	a8c00017 	ldw	r3,0(r21)
 5081e40:	b821883a 	mov	r16,r23
 5081e44:	b027883a 	mov	r19,r22
 5081e48:	10c00015 	stw	r3,0(r2)
 5081e4c:	a8c00117 	ldw	r3,4(r21)
 5081e50:	10c00115 	stw	r3,4(r2)
 5081e54:	a8c00217 	ldw	r3,8(r21)
 5081e58:	10c00215 	stw	r3,8(r2)
 5081e5c:	003f6a06 	br	5081c08 <__flash_rwdata_start+0xffffc384>
 5081e60:	9c67883a 	add	r19,r19,r17
 5081e64:	4445c83a 	sub	r2,r8,r17
 5081e68:	e4c00215 	stw	r19,8(fp)
 5081e6c:	10800054 	ori	r2,r2,1
 5081e70:	98800115 	stw	r2,4(r19)
 5081e74:	a8bfff17 	ldw	r2,-4(r21)
 5081e78:	a009883a 	mov	r4,r20
 5081e7c:	1080004c 	andi	r2,r2,1
 5081e80:	1462b03a 	or	r17,r2,r17
 5081e84:	ac7fff15 	stw	r17,-4(r21)
 5081e88:	508362c0 	call	508362c <__malloc_unlock>
 5081e8c:	a805883a 	mov	r2,r21
 5081e90:	003f6b06 	br	5081c40 <__flash_rwdata_start+0xffffc3bc>
 5081e94:	a80b883a 	mov	r5,r21
 5081e98:	9009883a 	mov	r4,r18
 5081e9c:	508184c0 	call	508184c <memmove>
 5081ea0:	003f4e06 	br	5081bdc <__flash_rwdata_start+0xffffc358>
 5081ea4:	89000404 	addi	r4,r17,16
 5081ea8:	b93fbc16 	blt	r23,r4,5081d9c <__flash_rwdata_start+0xffffc518>
 5081eac:	b0800317 	ldw	r2,12(r22)
 5081eb0:	b0c00217 	ldw	r3,8(r22)
 5081eb4:	81bfff04 	addi	r6,r16,-4
 5081eb8:	01000904 	movi	r4,36
 5081ebc:	18800315 	stw	r2,12(r3)
 5081ec0:	10c00215 	stw	r3,8(r2)
 5081ec4:	b4800204 	addi	r18,r22,8
 5081ec8:	21804336 	bltu	r4,r6,5081fd8 <_realloc_r+0x508>
 5081ecc:	008004c4 	movi	r2,19
 5081ed0:	11803f2e 	bgeu	r2,r6,5081fd0 <_realloc_r+0x500>
 5081ed4:	a8800017 	ldw	r2,0(r21)
 5081ed8:	b0800215 	stw	r2,8(r22)
 5081edc:	a8800117 	ldw	r2,4(r21)
 5081ee0:	b0800315 	stw	r2,12(r22)
 5081ee4:	008006c4 	movi	r2,27
 5081ee8:	11803f36 	bltu	r2,r6,5081fe8 <_realloc_r+0x518>
 5081eec:	b0800404 	addi	r2,r22,16
 5081ef0:	ad400204 	addi	r21,r21,8
 5081ef4:	a8c00017 	ldw	r3,0(r21)
 5081ef8:	10c00015 	stw	r3,0(r2)
 5081efc:	a8c00117 	ldw	r3,4(r21)
 5081f00:	10c00115 	stw	r3,4(r2)
 5081f04:	a8c00217 	ldw	r3,8(r21)
 5081f08:	10c00215 	stw	r3,8(r2)
 5081f0c:	b447883a 	add	r3,r22,r17
 5081f10:	bc45c83a 	sub	r2,r23,r17
 5081f14:	e0c00215 	stw	r3,8(fp)
 5081f18:	10800054 	ori	r2,r2,1
 5081f1c:	18800115 	stw	r2,4(r3)
 5081f20:	b0800117 	ldw	r2,4(r22)
 5081f24:	a009883a 	mov	r4,r20
 5081f28:	1080004c 	andi	r2,r2,1
 5081f2c:	1462b03a 	or	r17,r2,r17
 5081f30:	b4400115 	stw	r17,4(r22)
 5081f34:	508362c0 	call	508362c <__malloc_unlock>
 5081f38:	9005883a 	mov	r2,r18
 5081f3c:	003f4006 	br	5081c40 <__flash_rwdata_start+0xffffc3bc>
 5081f40:	a8c00217 	ldw	r3,8(r21)
 5081f44:	90c00215 	stw	r3,8(r18)
 5081f48:	a8c00317 	ldw	r3,12(r21)
 5081f4c:	90c00315 	stw	r3,12(r18)
 5081f50:	30801126 	beq	r6,r2,5081f98 <_realloc_r+0x4c8>
 5081f54:	90800404 	addi	r2,r18,16
 5081f58:	a8c00404 	addi	r3,r21,16
 5081f5c:	003f1906 	br	5081bc4 <__flash_rwdata_start+0xffffc340>
 5081f60:	90ffff17 	ldw	r3,-4(r18)
 5081f64:	00bfff04 	movi	r2,-4
 5081f68:	a825883a 	mov	r18,r21
 5081f6c:	1884703a 	and	r2,r3,r2
 5081f70:	80a1883a 	add	r16,r16,r2
 5081f74:	003f2406 	br	5081c08 <__flash_rwdata_start+0xffffc384>
 5081f78:	a8800217 	ldw	r2,8(r21)
 5081f7c:	b0800415 	stw	r2,16(r22)
 5081f80:	a8800317 	ldw	r2,12(r21)
 5081f84:	b0800515 	stw	r2,20(r22)
 5081f88:	31000a26 	beq	r6,r4,5081fb4 <_realloc_r+0x4e4>
 5081f8c:	b0800604 	addi	r2,r22,24
 5081f90:	ad400404 	addi	r21,r21,16
 5081f94:	003fa906 	br	5081e3c <__flash_rwdata_start+0xffffc5b8>
 5081f98:	a9000417 	ldw	r4,16(r21)
 5081f9c:	90800604 	addi	r2,r18,24
 5081fa0:	a8c00604 	addi	r3,r21,24
 5081fa4:	91000415 	stw	r4,16(r18)
 5081fa8:	a9000517 	ldw	r4,20(r21)
 5081fac:	91000515 	stw	r4,20(r18)
 5081fb0:	003f0406 	br	5081bc4 <__flash_rwdata_start+0xffffc340>
 5081fb4:	a8c00417 	ldw	r3,16(r21)
 5081fb8:	ad400604 	addi	r21,r21,24
 5081fbc:	b0800804 	addi	r2,r22,32
 5081fc0:	b0c00615 	stw	r3,24(r22)
 5081fc4:	a8ffff17 	ldw	r3,-4(r21)
 5081fc8:	b0c00715 	stw	r3,28(r22)
 5081fcc:	003f9b06 	br	5081e3c <__flash_rwdata_start+0xffffc5b8>
 5081fd0:	9005883a 	mov	r2,r18
 5081fd4:	003fc706 	br	5081ef4 <__flash_rwdata_start+0xffffc670>
 5081fd8:	a80b883a 	mov	r5,r21
 5081fdc:	9009883a 	mov	r4,r18
 5081fe0:	508184c0 	call	508184c <memmove>
 5081fe4:	003fc906 	br	5081f0c <__flash_rwdata_start+0xffffc688>
 5081fe8:	a8800217 	ldw	r2,8(r21)
 5081fec:	b0800415 	stw	r2,16(r22)
 5081ff0:	a8800317 	ldw	r2,12(r21)
 5081ff4:	b0800515 	stw	r2,20(r22)
 5081ff8:	31000726 	beq	r6,r4,5082018 <_realloc_r+0x548>
 5081ffc:	b0800604 	addi	r2,r22,24
 5082000:	ad400404 	addi	r21,r21,16
 5082004:	003fbb06 	br	5081ef4 <__flash_rwdata_start+0xffffc670>
 5082008:	a009883a 	mov	r4,r20
 508200c:	508362c0 	call	508362c <__malloc_unlock>
 5082010:	0005883a 	mov	r2,zero
 5082014:	003f0a06 	br	5081c40 <__flash_rwdata_start+0xffffc3bc>
 5082018:	a8c00417 	ldw	r3,16(r21)
 508201c:	ad400604 	addi	r21,r21,24
 5082020:	b0800804 	addi	r2,r22,32
 5082024:	b0c00615 	stw	r3,24(r22)
 5082028:	a8ffff17 	ldw	r3,-4(r21)
 508202c:	b0c00715 	stw	r3,28(r22)
 5082030:	003fb006 	br	5081ef4 <__flash_rwdata_start+0xffffc670>

05082034 <_sbrk_r>:
 5082034:	defffd04 	addi	sp,sp,-12
 5082038:	dc000015 	stw	r16,0(sp)
 508203c:	04000034 	movhi	r16,0
 5082040:	dc400115 	stw	r17,4(sp)
 5082044:	8406b004 	addi	r16,r16,6848
 5082048:	2023883a 	mov	r17,r4
 508204c:	2809883a 	mov	r4,r5
 5082050:	dfc00215 	stw	ra,8(sp)
 5082054:	80000015 	stw	zero,0(r16)
 5082058:	50837ec0 	call	50837ec <sbrk>
 508205c:	00ffffc4 	movi	r3,-1
 5082060:	10c00526 	beq	r2,r3,5082078 <_sbrk_r+0x44>
 5082064:	dfc00217 	ldw	ra,8(sp)
 5082068:	dc400117 	ldw	r17,4(sp)
 508206c:	dc000017 	ldw	r16,0(sp)
 5082070:	dec00304 	addi	sp,sp,12
 5082074:	f800283a 	ret
 5082078:	80c00017 	ldw	r3,0(r16)
 508207c:	183ff926 	beq	r3,zero,5082064 <__flash_rwdata_start+0xffffc7e0>
 5082080:	88c00015 	stw	r3,0(r17)
 5082084:	003ff706 	br	5082064 <__flash_rwdata_start+0xffffc7e0>

05082088 <__sread>:
 5082088:	defffe04 	addi	sp,sp,-8
 508208c:	dc000015 	stw	r16,0(sp)
 5082090:	2821883a 	mov	r16,r5
 5082094:	2940038f 	ldh	r5,14(r5)
 5082098:	dfc00115 	stw	ra,4(sp)
 508209c:	5082dc80 	call	5082dc8 <_read_r>
 50820a0:	10000716 	blt	r2,zero,50820c0 <__sread+0x38>
 50820a4:	80c01417 	ldw	r3,80(r16)
 50820a8:	1887883a 	add	r3,r3,r2
 50820ac:	80c01415 	stw	r3,80(r16)
 50820b0:	dfc00117 	ldw	ra,4(sp)
 50820b4:	dc000017 	ldw	r16,0(sp)
 50820b8:	dec00204 	addi	sp,sp,8
 50820bc:	f800283a 	ret
 50820c0:	80c0030b 	ldhu	r3,12(r16)
 50820c4:	18fbffcc 	andi	r3,r3,61439
 50820c8:	80c0030d 	sth	r3,12(r16)
 50820cc:	dfc00117 	ldw	ra,4(sp)
 50820d0:	dc000017 	ldw	r16,0(sp)
 50820d4:	dec00204 	addi	sp,sp,8
 50820d8:	f800283a 	ret

050820dc <__seofread>:
 50820dc:	0005883a 	mov	r2,zero
 50820e0:	f800283a 	ret

050820e4 <__swrite>:
 50820e4:	2880030b 	ldhu	r2,12(r5)
 50820e8:	defffb04 	addi	sp,sp,-20
 50820ec:	dcc00315 	stw	r19,12(sp)
 50820f0:	dc800215 	stw	r18,8(sp)
 50820f4:	dc400115 	stw	r17,4(sp)
 50820f8:	dc000015 	stw	r16,0(sp)
 50820fc:	dfc00415 	stw	ra,16(sp)
 5082100:	10c0400c 	andi	r3,r2,256
 5082104:	2821883a 	mov	r16,r5
 5082108:	2023883a 	mov	r17,r4
 508210c:	3025883a 	mov	r18,r6
 5082110:	3827883a 	mov	r19,r7
 5082114:	18000526 	beq	r3,zero,508212c <__swrite+0x48>
 5082118:	2940038f 	ldh	r5,14(r5)
 508211c:	01c00084 	movi	r7,2
 5082120:	000d883a 	mov	r6,zero
 5082124:	5082bac0 	call	5082bac <_lseek_r>
 5082128:	8080030b 	ldhu	r2,12(r16)
 508212c:	8140038f 	ldh	r5,14(r16)
 5082130:	10bbffcc 	andi	r2,r2,61439
 5082134:	980f883a 	mov	r7,r19
 5082138:	900d883a 	mov	r6,r18
 508213c:	8809883a 	mov	r4,r17
 5082140:	8080030d 	sth	r2,12(r16)
 5082144:	dfc00417 	ldw	ra,16(sp)
 5082148:	dcc00317 	ldw	r19,12(sp)
 508214c:	dc800217 	ldw	r18,8(sp)
 5082150:	dc400117 	ldw	r17,4(sp)
 5082154:	dc000017 	ldw	r16,0(sp)
 5082158:	dec00504 	addi	sp,sp,20
 508215c:	50821c41 	jmpi	50821c4 <_write_r>

05082160 <__sseek>:
 5082160:	defffe04 	addi	sp,sp,-8
 5082164:	dc000015 	stw	r16,0(sp)
 5082168:	2821883a 	mov	r16,r5
 508216c:	2940038f 	ldh	r5,14(r5)
 5082170:	dfc00115 	stw	ra,4(sp)
 5082174:	5082bac0 	call	5082bac <_lseek_r>
 5082178:	00ffffc4 	movi	r3,-1
 508217c:	10c00826 	beq	r2,r3,50821a0 <__sseek+0x40>
 5082180:	80c0030b 	ldhu	r3,12(r16)
 5082184:	80801415 	stw	r2,80(r16)
 5082188:	18c40014 	ori	r3,r3,4096
 508218c:	80c0030d 	sth	r3,12(r16)
 5082190:	dfc00117 	ldw	ra,4(sp)
 5082194:	dc000017 	ldw	r16,0(sp)
 5082198:	dec00204 	addi	sp,sp,8
 508219c:	f800283a 	ret
 50821a0:	80c0030b 	ldhu	r3,12(r16)
 50821a4:	18fbffcc 	andi	r3,r3,61439
 50821a8:	80c0030d 	sth	r3,12(r16)
 50821ac:	dfc00117 	ldw	ra,4(sp)
 50821b0:	dc000017 	ldw	r16,0(sp)
 50821b4:	dec00204 	addi	sp,sp,8
 50821b8:	f800283a 	ret

050821bc <__sclose>:
 50821bc:	2940038f 	ldh	r5,14(r5)
 50821c0:	50823781 	jmpi	5082378 <_close_r>

050821c4 <_write_r>:
 50821c4:	defffd04 	addi	sp,sp,-12
 50821c8:	2805883a 	mov	r2,r5
 50821cc:	dc000015 	stw	r16,0(sp)
 50821d0:	04000034 	movhi	r16,0
 50821d4:	dc400115 	stw	r17,4(sp)
 50821d8:	300b883a 	mov	r5,r6
 50821dc:	8406b004 	addi	r16,r16,6848
 50821e0:	2023883a 	mov	r17,r4
 50821e4:	380d883a 	mov	r6,r7
 50821e8:	1009883a 	mov	r4,r2
 50821ec:	dfc00215 	stw	ra,8(sp)
 50821f0:	80000015 	stw	zero,0(r16)
 50821f4:	50838d80 	call	50838d8 <write>
 50821f8:	00ffffc4 	movi	r3,-1
 50821fc:	10c00526 	beq	r2,r3,5082214 <_write_r+0x50>
 5082200:	dfc00217 	ldw	ra,8(sp)
 5082204:	dc400117 	ldw	r17,4(sp)
 5082208:	dc000017 	ldw	r16,0(sp)
 508220c:	dec00304 	addi	sp,sp,12
 5082210:	f800283a 	ret
 5082214:	80c00017 	ldw	r3,0(r16)
 5082218:	183ff926 	beq	r3,zero,5082200 <__flash_rwdata_start+0xffffc97c>
 508221c:	88c00015 	stw	r3,0(r17)
 5082220:	003ff706 	br	5082200 <__flash_rwdata_start+0xffffc97c>

05082224 <__swsetup_r>:
 5082224:	00800034 	movhi	r2,0
 5082228:	defffd04 	addi	sp,sp,-12
 508222c:	1086a004 	addi	r2,r2,6784
 5082230:	dc400115 	stw	r17,4(sp)
 5082234:	2023883a 	mov	r17,r4
 5082238:	11000017 	ldw	r4,0(r2)
 508223c:	dc000015 	stw	r16,0(sp)
 5082240:	dfc00215 	stw	ra,8(sp)
 5082244:	2821883a 	mov	r16,r5
 5082248:	20000226 	beq	r4,zero,5082254 <__swsetup_r+0x30>
 508224c:	20800e17 	ldw	r2,56(r4)
 5082250:	10003126 	beq	r2,zero,5082318 <__swsetup_r+0xf4>
 5082254:	8080030b 	ldhu	r2,12(r16)
 5082258:	10c0020c 	andi	r3,r2,8
 508225c:	1009883a 	mov	r4,r2
 5082260:	18000f26 	beq	r3,zero,50822a0 <__swsetup_r+0x7c>
 5082264:	80c00417 	ldw	r3,16(r16)
 5082268:	18001526 	beq	r3,zero,50822c0 <__swsetup_r+0x9c>
 508226c:	1100004c 	andi	r4,r2,1
 5082270:	20001c1e 	bne	r4,zero,50822e4 <__swsetup_r+0xc0>
 5082274:	1080008c 	andi	r2,r2,2
 5082278:	1000291e 	bne	r2,zero,5082320 <__swsetup_r+0xfc>
 508227c:	80800517 	ldw	r2,20(r16)
 5082280:	80800215 	stw	r2,8(r16)
 5082284:	18001c26 	beq	r3,zero,50822f8 <__swsetup_r+0xd4>
 5082288:	0005883a 	mov	r2,zero
 508228c:	dfc00217 	ldw	ra,8(sp)
 5082290:	dc400117 	ldw	r17,4(sp)
 5082294:	dc000017 	ldw	r16,0(sp)
 5082298:	dec00304 	addi	sp,sp,12
 508229c:	f800283a 	ret
 50822a0:	2080040c 	andi	r2,r4,16
 50822a4:	10002e26 	beq	r2,zero,5082360 <__swsetup_r+0x13c>
 50822a8:	2080010c 	andi	r2,r4,4
 50822ac:	10001e1e 	bne	r2,zero,5082328 <__swsetup_r+0x104>
 50822b0:	80c00417 	ldw	r3,16(r16)
 50822b4:	20800214 	ori	r2,r4,8
 50822b8:	8080030d 	sth	r2,12(r16)
 50822bc:	183feb1e 	bne	r3,zero,508226c <__flash_rwdata_start+0xffffc9e8>
 50822c0:	1100a00c 	andi	r4,r2,640
 50822c4:	01408004 	movi	r5,512
 50822c8:	217fe826 	beq	r4,r5,508226c <__flash_rwdata_start+0xffffc9e8>
 50822cc:	800b883a 	mov	r5,r16
 50822d0:	8809883a 	mov	r4,r17
 50822d4:	5082c0c0 	call	5082c0c <__smakebuf_r>
 50822d8:	8080030b 	ldhu	r2,12(r16)
 50822dc:	80c00417 	ldw	r3,16(r16)
 50822e0:	003fe206 	br	508226c <__flash_rwdata_start+0xffffc9e8>
 50822e4:	80800517 	ldw	r2,20(r16)
 50822e8:	80000215 	stw	zero,8(r16)
 50822ec:	0085c83a 	sub	r2,zero,r2
 50822f0:	80800615 	stw	r2,24(r16)
 50822f4:	183fe41e 	bne	r3,zero,5082288 <__flash_rwdata_start+0xffffca04>
 50822f8:	80c0030b 	ldhu	r3,12(r16)
 50822fc:	0005883a 	mov	r2,zero
 5082300:	1900200c 	andi	r4,r3,128
 5082304:	203fe126 	beq	r4,zero,508228c <__flash_rwdata_start+0xffffca08>
 5082308:	18c01014 	ori	r3,r3,64
 508230c:	80c0030d 	sth	r3,12(r16)
 5082310:	00bfffc4 	movi	r2,-1
 5082314:	003fdd06 	br	508228c <__flash_rwdata_start+0xffffca08>
 5082318:	50807800 	call	5080780 <__sinit>
 508231c:	003fcd06 	br	5082254 <__flash_rwdata_start+0xffffc9d0>
 5082320:	0005883a 	mov	r2,zero
 5082324:	003fd606 	br	5082280 <__flash_rwdata_start+0xffffc9fc>
 5082328:	81400c17 	ldw	r5,48(r16)
 508232c:	28000626 	beq	r5,zero,5082348 <__swsetup_r+0x124>
 5082330:	80801004 	addi	r2,r16,64
 5082334:	28800326 	beq	r5,r2,5082344 <__swsetup_r+0x120>
 5082338:	8809883a 	mov	r4,r17
 508233c:	508289c0 	call	508289c <_free_r>
 5082340:	8100030b 	ldhu	r4,12(r16)
 5082344:	80000c15 	stw	zero,48(r16)
 5082348:	80c00417 	ldw	r3,16(r16)
 508234c:	00bff6c4 	movi	r2,-37
 5082350:	1108703a 	and	r4,r2,r4
 5082354:	80000115 	stw	zero,4(r16)
 5082358:	80c00015 	stw	r3,0(r16)
 508235c:	003fd506 	br	50822b4 <__flash_rwdata_start+0xffffca30>
 5082360:	00800244 	movi	r2,9
 5082364:	88800015 	stw	r2,0(r17)
 5082368:	20801014 	ori	r2,r4,64
 508236c:	8080030d 	sth	r2,12(r16)
 5082370:	00bfffc4 	movi	r2,-1
 5082374:	003fc506 	br	508228c <__flash_rwdata_start+0xffffca08>

05082378 <_close_r>:
 5082378:	defffd04 	addi	sp,sp,-12
 508237c:	dc000015 	stw	r16,0(sp)
 5082380:	04000034 	movhi	r16,0
 5082384:	dc400115 	stw	r17,4(sp)
 5082388:	8406b004 	addi	r16,r16,6848
 508238c:	2023883a 	mov	r17,r4
 5082390:	2809883a 	mov	r4,r5
 5082394:	dfc00215 	stw	ra,8(sp)
 5082398:	80000015 	stw	zero,0(r16)
 508239c:	50830c80 	call	50830c8 <close>
 50823a0:	00ffffc4 	movi	r3,-1
 50823a4:	10c00526 	beq	r2,r3,50823bc <_close_r+0x44>
 50823a8:	dfc00217 	ldw	ra,8(sp)
 50823ac:	dc400117 	ldw	r17,4(sp)
 50823b0:	dc000017 	ldw	r16,0(sp)
 50823b4:	dec00304 	addi	sp,sp,12
 50823b8:	f800283a 	ret
 50823bc:	80c00017 	ldw	r3,0(r16)
 50823c0:	183ff926 	beq	r3,zero,50823a8 <__flash_rwdata_start+0xffffcb24>
 50823c4:	88c00015 	stw	r3,0(r17)
 50823c8:	003ff706 	br	50823a8 <__flash_rwdata_start+0xffffcb24>

050823cc <_fclose_r>:
 50823cc:	28003926 	beq	r5,zero,50824b4 <_fclose_r+0xe8>
 50823d0:	defffc04 	addi	sp,sp,-16
 50823d4:	dc400115 	stw	r17,4(sp)
 50823d8:	dc000015 	stw	r16,0(sp)
 50823dc:	dfc00315 	stw	ra,12(sp)
 50823e0:	dc800215 	stw	r18,8(sp)
 50823e4:	2023883a 	mov	r17,r4
 50823e8:	2821883a 	mov	r16,r5
 50823ec:	20000226 	beq	r4,zero,50823f8 <_fclose_r+0x2c>
 50823f0:	20800e17 	ldw	r2,56(r4)
 50823f4:	10002726 	beq	r2,zero,5082494 <_fclose_r+0xc8>
 50823f8:	8080030f 	ldh	r2,12(r16)
 50823fc:	1000071e 	bne	r2,zero,508241c <_fclose_r+0x50>
 5082400:	0005883a 	mov	r2,zero
 5082404:	dfc00317 	ldw	ra,12(sp)
 5082408:	dc800217 	ldw	r18,8(sp)
 508240c:	dc400117 	ldw	r17,4(sp)
 5082410:	dc000017 	ldw	r16,0(sp)
 5082414:	dec00404 	addi	sp,sp,16
 5082418:	f800283a 	ret
 508241c:	800b883a 	mov	r5,r16
 5082420:	8809883a 	mov	r4,r17
 5082424:	50824d00 	call	50824d0 <__sflush_r>
 5082428:	1025883a 	mov	r18,r2
 508242c:	80800b17 	ldw	r2,44(r16)
 5082430:	10000426 	beq	r2,zero,5082444 <_fclose_r+0x78>
 5082434:	81400717 	ldw	r5,28(r16)
 5082438:	8809883a 	mov	r4,r17
 508243c:	103ee83a 	callr	r2
 5082440:	10001616 	blt	r2,zero,508249c <_fclose_r+0xd0>
 5082444:	8080030b 	ldhu	r2,12(r16)
 5082448:	1080200c 	andi	r2,r2,128
 508244c:	1000151e 	bne	r2,zero,50824a4 <_fclose_r+0xd8>
 5082450:	81400c17 	ldw	r5,48(r16)
 5082454:	28000526 	beq	r5,zero,508246c <_fclose_r+0xa0>
 5082458:	80801004 	addi	r2,r16,64
 508245c:	28800226 	beq	r5,r2,5082468 <_fclose_r+0x9c>
 5082460:	8809883a 	mov	r4,r17
 5082464:	508289c0 	call	508289c <_free_r>
 5082468:	80000c15 	stw	zero,48(r16)
 508246c:	81401117 	ldw	r5,68(r16)
 5082470:	28000326 	beq	r5,zero,5082480 <_fclose_r+0xb4>
 5082474:	8809883a 	mov	r4,r17
 5082478:	508289c0 	call	508289c <_free_r>
 508247c:	80001115 	stw	zero,68(r16)
 5082480:	50807900 	call	5080790 <__sfp_lock_acquire>
 5082484:	8000030d 	sth	zero,12(r16)
 5082488:	50807940 	call	5080794 <__sfp_lock_release>
 508248c:	9005883a 	mov	r2,r18
 5082490:	003fdc06 	br	5082404 <__flash_rwdata_start+0xffffcb80>
 5082494:	50807800 	call	5080780 <__sinit>
 5082498:	003fd706 	br	50823f8 <__flash_rwdata_start+0xffffcb74>
 508249c:	04bfffc4 	movi	r18,-1
 50824a0:	003fe806 	br	5082444 <__flash_rwdata_start+0xffffcbc0>
 50824a4:	81400417 	ldw	r5,16(r16)
 50824a8:	8809883a 	mov	r4,r17
 50824ac:	508289c0 	call	508289c <_free_r>
 50824b0:	003fe706 	br	5082450 <__flash_rwdata_start+0xffffcbcc>
 50824b4:	0005883a 	mov	r2,zero
 50824b8:	f800283a 	ret

050824bc <fclose>:
 50824bc:	00800034 	movhi	r2,0
 50824c0:	1086a004 	addi	r2,r2,6784
 50824c4:	200b883a 	mov	r5,r4
 50824c8:	11000017 	ldw	r4,0(r2)
 50824cc:	50823cc1 	jmpi	50823cc <_fclose_r>

050824d0 <__sflush_r>:
 50824d0:	2880030b 	ldhu	r2,12(r5)
 50824d4:	defffb04 	addi	sp,sp,-20
 50824d8:	dcc00315 	stw	r19,12(sp)
 50824dc:	dc400115 	stw	r17,4(sp)
 50824e0:	dfc00415 	stw	ra,16(sp)
 50824e4:	dc800215 	stw	r18,8(sp)
 50824e8:	dc000015 	stw	r16,0(sp)
 50824ec:	10c0020c 	andi	r3,r2,8
 50824f0:	2823883a 	mov	r17,r5
 50824f4:	2027883a 	mov	r19,r4
 50824f8:	1800311e 	bne	r3,zero,50825c0 <__sflush_r+0xf0>
 50824fc:	28c00117 	ldw	r3,4(r5)
 5082500:	10820014 	ori	r2,r2,2048
 5082504:	2880030d 	sth	r2,12(r5)
 5082508:	00c04b0e 	bge	zero,r3,5082638 <__sflush_r+0x168>
 508250c:	8a000a17 	ldw	r8,40(r17)
 5082510:	40002326 	beq	r8,zero,50825a0 <__sflush_r+0xd0>
 5082514:	9c000017 	ldw	r16,0(r19)
 5082518:	10c4000c 	andi	r3,r2,4096
 508251c:	98000015 	stw	zero,0(r19)
 5082520:	18004826 	beq	r3,zero,5082644 <__sflush_r+0x174>
 5082524:	89801417 	ldw	r6,80(r17)
 5082528:	10c0010c 	andi	r3,r2,4
 508252c:	18000626 	beq	r3,zero,5082548 <__sflush_r+0x78>
 5082530:	88c00117 	ldw	r3,4(r17)
 5082534:	88800c17 	ldw	r2,48(r17)
 5082538:	30cdc83a 	sub	r6,r6,r3
 508253c:	10000226 	beq	r2,zero,5082548 <__sflush_r+0x78>
 5082540:	88800f17 	ldw	r2,60(r17)
 5082544:	308dc83a 	sub	r6,r6,r2
 5082548:	89400717 	ldw	r5,28(r17)
 508254c:	000f883a 	mov	r7,zero
 5082550:	9809883a 	mov	r4,r19
 5082554:	403ee83a 	callr	r8
 5082558:	00ffffc4 	movi	r3,-1
 508255c:	10c04426 	beq	r2,r3,5082670 <__sflush_r+0x1a0>
 5082560:	88c0030b 	ldhu	r3,12(r17)
 5082564:	89000417 	ldw	r4,16(r17)
 5082568:	88000115 	stw	zero,4(r17)
 508256c:	197dffcc 	andi	r5,r3,63487
 5082570:	8940030d 	sth	r5,12(r17)
 5082574:	89000015 	stw	r4,0(r17)
 5082578:	18c4000c 	andi	r3,r3,4096
 508257c:	18002c1e 	bne	r3,zero,5082630 <__sflush_r+0x160>
 5082580:	89400c17 	ldw	r5,48(r17)
 5082584:	9c000015 	stw	r16,0(r19)
 5082588:	28000526 	beq	r5,zero,50825a0 <__sflush_r+0xd0>
 508258c:	88801004 	addi	r2,r17,64
 5082590:	28800226 	beq	r5,r2,508259c <__sflush_r+0xcc>
 5082594:	9809883a 	mov	r4,r19
 5082598:	508289c0 	call	508289c <_free_r>
 508259c:	88000c15 	stw	zero,48(r17)
 50825a0:	0005883a 	mov	r2,zero
 50825a4:	dfc00417 	ldw	ra,16(sp)
 50825a8:	dcc00317 	ldw	r19,12(sp)
 50825ac:	dc800217 	ldw	r18,8(sp)
 50825b0:	dc400117 	ldw	r17,4(sp)
 50825b4:	dc000017 	ldw	r16,0(sp)
 50825b8:	dec00504 	addi	sp,sp,20
 50825bc:	f800283a 	ret
 50825c0:	2c800417 	ldw	r18,16(r5)
 50825c4:	903ff626 	beq	r18,zero,50825a0 <__flash_rwdata_start+0xffffcd1c>
 50825c8:	2c000017 	ldw	r16,0(r5)
 50825cc:	108000cc 	andi	r2,r2,3
 50825d0:	2c800015 	stw	r18,0(r5)
 50825d4:	84a1c83a 	sub	r16,r16,r18
 50825d8:	1000131e 	bne	r2,zero,5082628 <__sflush_r+0x158>
 50825dc:	28800517 	ldw	r2,20(r5)
 50825e0:	88800215 	stw	r2,8(r17)
 50825e4:	04000316 	blt	zero,r16,50825f4 <__sflush_r+0x124>
 50825e8:	003fed06 	br	50825a0 <__flash_rwdata_start+0xffffcd1c>
 50825ec:	90a5883a 	add	r18,r18,r2
 50825f0:	043feb0e 	bge	zero,r16,50825a0 <__flash_rwdata_start+0xffffcd1c>
 50825f4:	88800917 	ldw	r2,36(r17)
 50825f8:	89400717 	ldw	r5,28(r17)
 50825fc:	800f883a 	mov	r7,r16
 5082600:	900d883a 	mov	r6,r18
 5082604:	9809883a 	mov	r4,r19
 5082608:	103ee83a 	callr	r2
 508260c:	80a1c83a 	sub	r16,r16,r2
 5082610:	00bff616 	blt	zero,r2,50825ec <__flash_rwdata_start+0xffffcd68>
 5082614:	88c0030b 	ldhu	r3,12(r17)
 5082618:	00bfffc4 	movi	r2,-1
 508261c:	18c01014 	ori	r3,r3,64
 5082620:	88c0030d 	sth	r3,12(r17)
 5082624:	003fdf06 	br	50825a4 <__flash_rwdata_start+0xffffcd20>
 5082628:	0005883a 	mov	r2,zero
 508262c:	003fec06 	br	50825e0 <__flash_rwdata_start+0xffffcd5c>
 5082630:	88801415 	stw	r2,80(r17)
 5082634:	003fd206 	br	5082580 <__flash_rwdata_start+0xffffccfc>
 5082638:	28c00f17 	ldw	r3,60(r5)
 508263c:	00ffb316 	blt	zero,r3,508250c <__flash_rwdata_start+0xffffcc88>
 5082640:	003fd706 	br	50825a0 <__flash_rwdata_start+0xffffcd1c>
 5082644:	89400717 	ldw	r5,28(r17)
 5082648:	000d883a 	mov	r6,zero
 508264c:	01c00044 	movi	r7,1
 5082650:	9809883a 	mov	r4,r19
 5082654:	403ee83a 	callr	r8
 5082658:	100d883a 	mov	r6,r2
 508265c:	00bfffc4 	movi	r2,-1
 5082660:	30801426 	beq	r6,r2,50826b4 <__sflush_r+0x1e4>
 5082664:	8880030b 	ldhu	r2,12(r17)
 5082668:	8a000a17 	ldw	r8,40(r17)
 508266c:	003fae06 	br	5082528 <__flash_rwdata_start+0xffffcca4>
 5082670:	98c00017 	ldw	r3,0(r19)
 5082674:	183fba26 	beq	r3,zero,5082560 <__flash_rwdata_start+0xffffccdc>
 5082678:	01000744 	movi	r4,29
 508267c:	19000626 	beq	r3,r4,5082698 <__sflush_r+0x1c8>
 5082680:	01000584 	movi	r4,22
 5082684:	19000426 	beq	r3,r4,5082698 <__sflush_r+0x1c8>
 5082688:	88c0030b 	ldhu	r3,12(r17)
 508268c:	18c01014 	ori	r3,r3,64
 5082690:	88c0030d 	sth	r3,12(r17)
 5082694:	003fc306 	br	50825a4 <__flash_rwdata_start+0xffffcd20>
 5082698:	8880030b 	ldhu	r2,12(r17)
 508269c:	88c00417 	ldw	r3,16(r17)
 50826a0:	88000115 	stw	zero,4(r17)
 50826a4:	10bdffcc 	andi	r2,r2,63487
 50826a8:	8880030d 	sth	r2,12(r17)
 50826ac:	88c00015 	stw	r3,0(r17)
 50826b0:	003fb306 	br	5082580 <__flash_rwdata_start+0xffffccfc>
 50826b4:	98800017 	ldw	r2,0(r19)
 50826b8:	103fea26 	beq	r2,zero,5082664 <__flash_rwdata_start+0xffffcde0>
 50826bc:	00c00744 	movi	r3,29
 50826c0:	10c00226 	beq	r2,r3,50826cc <__sflush_r+0x1fc>
 50826c4:	00c00584 	movi	r3,22
 50826c8:	10c0031e 	bne	r2,r3,50826d8 <__sflush_r+0x208>
 50826cc:	9c000015 	stw	r16,0(r19)
 50826d0:	0005883a 	mov	r2,zero
 50826d4:	003fb306 	br	50825a4 <__flash_rwdata_start+0xffffcd20>
 50826d8:	88c0030b 	ldhu	r3,12(r17)
 50826dc:	3005883a 	mov	r2,r6
 50826e0:	18c01014 	ori	r3,r3,64
 50826e4:	88c0030d 	sth	r3,12(r17)
 50826e8:	003fae06 	br	50825a4 <__flash_rwdata_start+0xffffcd20>

050826ec <_fflush_r>:
 50826ec:	defffd04 	addi	sp,sp,-12
 50826f0:	dc000115 	stw	r16,4(sp)
 50826f4:	dfc00215 	stw	ra,8(sp)
 50826f8:	2021883a 	mov	r16,r4
 50826fc:	20000226 	beq	r4,zero,5082708 <_fflush_r+0x1c>
 5082700:	20800e17 	ldw	r2,56(r4)
 5082704:	10000c26 	beq	r2,zero,5082738 <_fflush_r+0x4c>
 5082708:	2880030f 	ldh	r2,12(r5)
 508270c:	1000051e 	bne	r2,zero,5082724 <_fflush_r+0x38>
 5082710:	0005883a 	mov	r2,zero
 5082714:	dfc00217 	ldw	ra,8(sp)
 5082718:	dc000117 	ldw	r16,4(sp)
 508271c:	dec00304 	addi	sp,sp,12
 5082720:	f800283a 	ret
 5082724:	8009883a 	mov	r4,r16
 5082728:	dfc00217 	ldw	ra,8(sp)
 508272c:	dc000117 	ldw	r16,4(sp)
 5082730:	dec00304 	addi	sp,sp,12
 5082734:	50824d01 	jmpi	50824d0 <__sflush_r>
 5082738:	d9400015 	stw	r5,0(sp)
 508273c:	50807800 	call	5080780 <__sinit>
 5082740:	d9400017 	ldw	r5,0(sp)
 5082744:	003ff006 	br	5082708 <__flash_rwdata_start+0xffffce84>

05082748 <fflush>:
 5082748:	20000526 	beq	r4,zero,5082760 <fflush+0x18>
 508274c:	00800034 	movhi	r2,0
 5082750:	1086a004 	addi	r2,r2,6784
 5082754:	200b883a 	mov	r5,r4
 5082758:	11000017 	ldw	r4,0(r2)
 508275c:	50826ec1 	jmpi	50826ec <_fflush_r>
 5082760:	00800034 	movhi	r2,0
 5082764:	10869f04 	addi	r2,r2,6780
 5082768:	11000017 	ldw	r4,0(r2)
 508276c:	01414234 	movhi	r5,1288
 5082770:	2949bb04 	addi	r5,r5,9964
 5082774:	5080d501 	jmpi	5080d50 <_fwalk_reent>

05082778 <_malloc_trim_r>:
 5082778:	defffb04 	addi	sp,sp,-20
 508277c:	dcc00315 	stw	r19,12(sp)
 5082780:	04c00034 	movhi	r19,0
 5082784:	dc800215 	stw	r18,8(sp)
 5082788:	dc400115 	stw	r17,4(sp)
 508278c:	dc000015 	stw	r16,0(sp)
 5082790:	dfc00415 	stw	ra,16(sp)
 5082794:	2821883a 	mov	r16,r5
 5082798:	9cc11b04 	addi	r19,r19,1132
 508279c:	2025883a 	mov	r18,r4
 50827a0:	50836080 	call	5083608 <__malloc_lock>
 50827a4:	98800217 	ldw	r2,8(r19)
 50827a8:	14400117 	ldw	r17,4(r2)
 50827ac:	00bfff04 	movi	r2,-4
 50827b0:	88a2703a 	and	r17,r17,r2
 50827b4:	8c21c83a 	sub	r16,r17,r16
 50827b8:	8403fbc4 	addi	r16,r16,4079
 50827bc:	8020d33a 	srli	r16,r16,12
 50827c0:	0083ffc4 	movi	r2,4095
 50827c4:	843fffc4 	addi	r16,r16,-1
 50827c8:	8020933a 	slli	r16,r16,12
 50827cc:	1400060e 	bge	r2,r16,50827e8 <_malloc_trim_r+0x70>
 50827d0:	000b883a 	mov	r5,zero
 50827d4:	9009883a 	mov	r4,r18
 50827d8:	50820340 	call	5082034 <_sbrk_r>
 50827dc:	98c00217 	ldw	r3,8(r19)
 50827e0:	1c47883a 	add	r3,r3,r17
 50827e4:	10c00a26 	beq	r2,r3,5082810 <_malloc_trim_r+0x98>
 50827e8:	9009883a 	mov	r4,r18
 50827ec:	508362c0 	call	508362c <__malloc_unlock>
 50827f0:	0005883a 	mov	r2,zero
 50827f4:	dfc00417 	ldw	ra,16(sp)
 50827f8:	dcc00317 	ldw	r19,12(sp)
 50827fc:	dc800217 	ldw	r18,8(sp)
 5082800:	dc400117 	ldw	r17,4(sp)
 5082804:	dc000017 	ldw	r16,0(sp)
 5082808:	dec00504 	addi	sp,sp,20
 508280c:	f800283a 	ret
 5082810:	040bc83a 	sub	r5,zero,r16
 5082814:	9009883a 	mov	r4,r18
 5082818:	50820340 	call	5082034 <_sbrk_r>
 508281c:	00ffffc4 	movi	r3,-1
 5082820:	10c00d26 	beq	r2,r3,5082858 <_malloc_trim_r+0xe0>
 5082824:	00c00034 	movhi	r3,0
 5082828:	18c6b804 	addi	r3,r3,6880
 508282c:	18800017 	ldw	r2,0(r3)
 5082830:	99000217 	ldw	r4,8(r19)
 5082834:	8c23c83a 	sub	r17,r17,r16
 5082838:	8c400054 	ori	r17,r17,1
 508283c:	1421c83a 	sub	r16,r2,r16
 5082840:	24400115 	stw	r17,4(r4)
 5082844:	9009883a 	mov	r4,r18
 5082848:	1c000015 	stw	r16,0(r3)
 508284c:	508362c0 	call	508362c <__malloc_unlock>
 5082850:	00800044 	movi	r2,1
 5082854:	003fe706 	br	50827f4 <__flash_rwdata_start+0xffffcf70>
 5082858:	000b883a 	mov	r5,zero
 508285c:	9009883a 	mov	r4,r18
 5082860:	50820340 	call	5082034 <_sbrk_r>
 5082864:	99000217 	ldw	r4,8(r19)
 5082868:	014003c4 	movi	r5,15
 508286c:	1107c83a 	sub	r3,r2,r4
 5082870:	28ffdd0e 	bge	r5,r3,50827e8 <__flash_rwdata_start+0xffffcf64>
 5082874:	01400034 	movhi	r5,0
 5082878:	2946a104 	addi	r5,r5,6788
 508287c:	29400017 	ldw	r5,0(r5)
 5082880:	18c00054 	ori	r3,r3,1
 5082884:	20c00115 	stw	r3,4(r4)
 5082888:	00c00034 	movhi	r3,0
 508288c:	1145c83a 	sub	r2,r2,r5
 5082890:	18c6b804 	addi	r3,r3,6880
 5082894:	18800015 	stw	r2,0(r3)
 5082898:	003fd306 	br	50827e8 <__flash_rwdata_start+0xffffcf64>

0508289c <_free_r>:
 508289c:	28004126 	beq	r5,zero,50829a4 <_free_r+0x108>
 50828a0:	defffd04 	addi	sp,sp,-12
 50828a4:	dc400115 	stw	r17,4(sp)
 50828a8:	dc000015 	stw	r16,0(sp)
 50828ac:	2023883a 	mov	r17,r4
 50828b0:	2821883a 	mov	r16,r5
 50828b4:	dfc00215 	stw	ra,8(sp)
 50828b8:	50836080 	call	5083608 <__malloc_lock>
 50828bc:	81ffff17 	ldw	r7,-4(r16)
 50828c0:	00bfff84 	movi	r2,-2
 50828c4:	01000034 	movhi	r4,0
 50828c8:	81bffe04 	addi	r6,r16,-8
 50828cc:	3884703a 	and	r2,r7,r2
 50828d0:	21011b04 	addi	r4,r4,1132
 50828d4:	308b883a 	add	r5,r6,r2
 50828d8:	2a400117 	ldw	r9,4(r5)
 50828dc:	22000217 	ldw	r8,8(r4)
 50828e0:	00ffff04 	movi	r3,-4
 50828e4:	48c6703a 	and	r3,r9,r3
 50828e8:	2a005726 	beq	r5,r8,5082a48 <_free_r+0x1ac>
 50828ec:	28c00115 	stw	r3,4(r5)
 50828f0:	39c0004c 	andi	r7,r7,1
 50828f4:	3800091e 	bne	r7,zero,508291c <_free_r+0x80>
 50828f8:	823ffe17 	ldw	r8,-8(r16)
 50828fc:	22400204 	addi	r9,r4,8
 5082900:	320dc83a 	sub	r6,r6,r8
 5082904:	31c00217 	ldw	r7,8(r6)
 5082908:	1205883a 	add	r2,r2,r8
 508290c:	3a406526 	beq	r7,r9,5082aa4 <_free_r+0x208>
 5082910:	32000317 	ldw	r8,12(r6)
 5082914:	3a000315 	stw	r8,12(r7)
 5082918:	41c00215 	stw	r7,8(r8)
 508291c:	28cf883a 	add	r7,r5,r3
 5082920:	39c00117 	ldw	r7,4(r7)
 5082924:	39c0004c 	andi	r7,r7,1
 5082928:	38003a26 	beq	r7,zero,5082a14 <_free_r+0x178>
 508292c:	10c00054 	ori	r3,r2,1
 5082930:	30c00115 	stw	r3,4(r6)
 5082934:	3087883a 	add	r3,r6,r2
 5082938:	18800015 	stw	r2,0(r3)
 508293c:	00c07fc4 	movi	r3,511
 5082940:	18801936 	bltu	r3,r2,50829a8 <_free_r+0x10c>
 5082944:	1004d0fa 	srli	r2,r2,3
 5082948:	01c00044 	movi	r7,1
 508294c:	21400117 	ldw	r5,4(r4)
 5082950:	10c00044 	addi	r3,r2,1
 5082954:	18c7883a 	add	r3,r3,r3
 5082958:	1005d0ba 	srai	r2,r2,2
 508295c:	18c7883a 	add	r3,r3,r3
 5082960:	18c7883a 	add	r3,r3,r3
 5082964:	1907883a 	add	r3,r3,r4
 5082968:	3884983a 	sll	r2,r7,r2
 508296c:	19c00017 	ldw	r7,0(r3)
 5082970:	1a3ffe04 	addi	r8,r3,-8
 5082974:	1144b03a 	or	r2,r2,r5
 5082978:	32000315 	stw	r8,12(r6)
 508297c:	31c00215 	stw	r7,8(r6)
 5082980:	20800115 	stw	r2,4(r4)
 5082984:	19800015 	stw	r6,0(r3)
 5082988:	39800315 	stw	r6,12(r7)
 508298c:	8809883a 	mov	r4,r17
 5082990:	dfc00217 	ldw	ra,8(sp)
 5082994:	dc400117 	ldw	r17,4(sp)
 5082998:	dc000017 	ldw	r16,0(sp)
 508299c:	dec00304 	addi	sp,sp,12
 50829a0:	508362c1 	jmpi	508362c <__malloc_unlock>
 50829a4:	f800283a 	ret
 50829a8:	100ad27a 	srli	r5,r2,9
 50829ac:	00c00104 	movi	r3,4
 50829b0:	19404a36 	bltu	r3,r5,5082adc <_free_r+0x240>
 50829b4:	100ad1ba 	srli	r5,r2,6
 50829b8:	28c00e44 	addi	r3,r5,57
 50829bc:	18c7883a 	add	r3,r3,r3
 50829c0:	29400e04 	addi	r5,r5,56
 50829c4:	18c7883a 	add	r3,r3,r3
 50829c8:	18c7883a 	add	r3,r3,r3
 50829cc:	1909883a 	add	r4,r3,r4
 50829d0:	20c00017 	ldw	r3,0(r4)
 50829d4:	01c00034 	movhi	r7,0
 50829d8:	213ffe04 	addi	r4,r4,-8
 50829dc:	39c11b04 	addi	r7,r7,1132
 50829e0:	20c04426 	beq	r4,r3,5082af4 <_free_r+0x258>
 50829e4:	01ffff04 	movi	r7,-4
 50829e8:	19400117 	ldw	r5,4(r3)
 50829ec:	29ca703a 	and	r5,r5,r7
 50829f0:	1140022e 	bgeu	r2,r5,50829fc <_free_r+0x160>
 50829f4:	18c00217 	ldw	r3,8(r3)
 50829f8:	20fffb1e 	bne	r4,r3,50829e8 <__flash_rwdata_start+0xffffd164>
 50829fc:	19000317 	ldw	r4,12(r3)
 5082a00:	31000315 	stw	r4,12(r6)
 5082a04:	30c00215 	stw	r3,8(r6)
 5082a08:	21800215 	stw	r6,8(r4)
 5082a0c:	19800315 	stw	r6,12(r3)
 5082a10:	003fde06 	br	508298c <__flash_rwdata_start+0xffffd108>
 5082a14:	29c00217 	ldw	r7,8(r5)
 5082a18:	10c5883a 	add	r2,r2,r3
 5082a1c:	00c00034 	movhi	r3,0
 5082a20:	18c11d04 	addi	r3,r3,1140
 5082a24:	38c03b26 	beq	r7,r3,5082b14 <_free_r+0x278>
 5082a28:	2a000317 	ldw	r8,12(r5)
 5082a2c:	11400054 	ori	r5,r2,1
 5082a30:	3087883a 	add	r3,r6,r2
 5082a34:	3a000315 	stw	r8,12(r7)
 5082a38:	41c00215 	stw	r7,8(r8)
 5082a3c:	31400115 	stw	r5,4(r6)
 5082a40:	18800015 	stw	r2,0(r3)
 5082a44:	003fbd06 	br	508293c <__flash_rwdata_start+0xffffd0b8>
 5082a48:	39c0004c 	andi	r7,r7,1
 5082a4c:	10c5883a 	add	r2,r2,r3
 5082a50:	3800071e 	bne	r7,zero,5082a70 <_free_r+0x1d4>
 5082a54:	81fffe17 	ldw	r7,-8(r16)
 5082a58:	31cdc83a 	sub	r6,r6,r7
 5082a5c:	30c00317 	ldw	r3,12(r6)
 5082a60:	31400217 	ldw	r5,8(r6)
 5082a64:	11c5883a 	add	r2,r2,r7
 5082a68:	28c00315 	stw	r3,12(r5)
 5082a6c:	19400215 	stw	r5,8(r3)
 5082a70:	10c00054 	ori	r3,r2,1
 5082a74:	30c00115 	stw	r3,4(r6)
 5082a78:	00c00034 	movhi	r3,0
 5082a7c:	18c6a204 	addi	r3,r3,6792
 5082a80:	18c00017 	ldw	r3,0(r3)
 5082a84:	21800215 	stw	r6,8(r4)
 5082a88:	10ffc036 	bltu	r2,r3,508298c <__flash_rwdata_start+0xffffd108>
 5082a8c:	00800034 	movhi	r2,0
 5082a90:	1086af04 	addi	r2,r2,6844
 5082a94:	11400017 	ldw	r5,0(r2)
 5082a98:	8809883a 	mov	r4,r17
 5082a9c:	50827780 	call	5082778 <_malloc_trim_r>
 5082aa0:	003fba06 	br	508298c <__flash_rwdata_start+0xffffd108>
 5082aa4:	28c9883a 	add	r4,r5,r3
 5082aa8:	21000117 	ldw	r4,4(r4)
 5082aac:	2100004c 	andi	r4,r4,1
 5082ab0:	2000391e 	bne	r4,zero,5082b98 <_free_r+0x2fc>
 5082ab4:	29c00217 	ldw	r7,8(r5)
 5082ab8:	29000317 	ldw	r4,12(r5)
 5082abc:	1885883a 	add	r2,r3,r2
 5082ac0:	10c00054 	ori	r3,r2,1
 5082ac4:	39000315 	stw	r4,12(r7)
 5082ac8:	21c00215 	stw	r7,8(r4)
 5082acc:	30c00115 	stw	r3,4(r6)
 5082ad0:	308d883a 	add	r6,r6,r2
 5082ad4:	30800015 	stw	r2,0(r6)
 5082ad8:	003fac06 	br	508298c <__flash_rwdata_start+0xffffd108>
 5082adc:	00c00504 	movi	r3,20
 5082ae0:	19401536 	bltu	r3,r5,5082b38 <_free_r+0x29c>
 5082ae4:	28c01704 	addi	r3,r5,92
 5082ae8:	18c7883a 	add	r3,r3,r3
 5082aec:	294016c4 	addi	r5,r5,91
 5082af0:	003fb406 	br	50829c4 <__flash_rwdata_start+0xffffd140>
 5082af4:	280bd0ba 	srai	r5,r5,2
 5082af8:	00c00044 	movi	r3,1
 5082afc:	38800117 	ldw	r2,4(r7)
 5082b00:	194a983a 	sll	r5,r3,r5
 5082b04:	2007883a 	mov	r3,r4
 5082b08:	2884b03a 	or	r2,r5,r2
 5082b0c:	38800115 	stw	r2,4(r7)
 5082b10:	003fbb06 	br	5082a00 <__flash_rwdata_start+0xffffd17c>
 5082b14:	21800515 	stw	r6,20(r4)
 5082b18:	21800415 	stw	r6,16(r4)
 5082b1c:	10c00054 	ori	r3,r2,1
 5082b20:	31c00315 	stw	r7,12(r6)
 5082b24:	31c00215 	stw	r7,8(r6)
 5082b28:	30c00115 	stw	r3,4(r6)
 5082b2c:	308d883a 	add	r6,r6,r2
 5082b30:	30800015 	stw	r2,0(r6)
 5082b34:	003f9506 	br	508298c <__flash_rwdata_start+0xffffd108>
 5082b38:	00c01504 	movi	r3,84
 5082b3c:	19400536 	bltu	r3,r5,5082b54 <_free_r+0x2b8>
 5082b40:	100ad33a 	srli	r5,r2,12
 5082b44:	28c01bc4 	addi	r3,r5,111
 5082b48:	18c7883a 	add	r3,r3,r3
 5082b4c:	29401b84 	addi	r5,r5,110
 5082b50:	003f9c06 	br	50829c4 <__flash_rwdata_start+0xffffd140>
 5082b54:	00c05504 	movi	r3,340
 5082b58:	19400536 	bltu	r3,r5,5082b70 <_free_r+0x2d4>
 5082b5c:	100ad3fa 	srli	r5,r2,15
 5082b60:	28c01e04 	addi	r3,r5,120
 5082b64:	18c7883a 	add	r3,r3,r3
 5082b68:	29401dc4 	addi	r5,r5,119
 5082b6c:	003f9506 	br	50829c4 <__flash_rwdata_start+0xffffd140>
 5082b70:	00c15504 	movi	r3,1364
 5082b74:	19400536 	bltu	r3,r5,5082b8c <_free_r+0x2f0>
 5082b78:	100ad4ba 	srli	r5,r2,18
 5082b7c:	28c01f44 	addi	r3,r5,125
 5082b80:	18c7883a 	add	r3,r3,r3
 5082b84:	29401f04 	addi	r5,r5,124
 5082b88:	003f8e06 	br	50829c4 <__flash_rwdata_start+0xffffd140>
 5082b8c:	00c03f84 	movi	r3,254
 5082b90:	01401f84 	movi	r5,126
 5082b94:	003f8b06 	br	50829c4 <__flash_rwdata_start+0xffffd140>
 5082b98:	10c00054 	ori	r3,r2,1
 5082b9c:	30c00115 	stw	r3,4(r6)
 5082ba0:	308d883a 	add	r6,r6,r2
 5082ba4:	30800015 	stw	r2,0(r6)
 5082ba8:	003f7806 	br	508298c <__flash_rwdata_start+0xffffd108>

05082bac <_lseek_r>:
 5082bac:	defffd04 	addi	sp,sp,-12
 5082bb0:	2805883a 	mov	r2,r5
 5082bb4:	dc000015 	stw	r16,0(sp)
 5082bb8:	04000034 	movhi	r16,0
 5082bbc:	dc400115 	stw	r17,4(sp)
 5082bc0:	300b883a 	mov	r5,r6
 5082bc4:	8406b004 	addi	r16,r16,6848
 5082bc8:	2023883a 	mov	r17,r4
 5082bcc:	380d883a 	mov	r6,r7
 5082bd0:	1009883a 	mov	r4,r2
 5082bd4:	dfc00215 	stw	ra,8(sp)
 5082bd8:	80000015 	stw	zero,0(r16)
 5082bdc:	50834b80 	call	50834b8 <lseek>
 5082be0:	00ffffc4 	movi	r3,-1
 5082be4:	10c00526 	beq	r2,r3,5082bfc <_lseek_r+0x50>
 5082be8:	dfc00217 	ldw	ra,8(sp)
 5082bec:	dc400117 	ldw	r17,4(sp)
 5082bf0:	dc000017 	ldw	r16,0(sp)
 5082bf4:	dec00304 	addi	sp,sp,12
 5082bf8:	f800283a 	ret
 5082bfc:	80c00017 	ldw	r3,0(r16)
 5082c00:	183ff926 	beq	r3,zero,5082be8 <__flash_rwdata_start+0xffffd364>
 5082c04:	88c00015 	stw	r3,0(r17)
 5082c08:	003ff706 	br	5082be8 <__flash_rwdata_start+0xffffd364>

05082c0c <__smakebuf_r>:
 5082c0c:	2880030b 	ldhu	r2,12(r5)
 5082c10:	10c0008c 	andi	r3,r2,2
 5082c14:	1800411e 	bne	r3,zero,5082d1c <__smakebuf_r+0x110>
 5082c18:	deffec04 	addi	sp,sp,-80
 5082c1c:	dc000f15 	stw	r16,60(sp)
 5082c20:	2821883a 	mov	r16,r5
 5082c24:	2940038f 	ldh	r5,14(r5)
 5082c28:	dc401015 	stw	r17,64(sp)
 5082c2c:	dfc01315 	stw	ra,76(sp)
 5082c30:	dcc01215 	stw	r19,72(sp)
 5082c34:	dc801115 	stw	r18,68(sp)
 5082c38:	2023883a 	mov	r17,r4
 5082c3c:	28001c16 	blt	r5,zero,5082cb0 <__smakebuf_r+0xa4>
 5082c40:	d80d883a 	mov	r6,sp
 5082c44:	5082e280 	call	5082e28 <_fstat_r>
 5082c48:	10001816 	blt	r2,zero,5082cac <__smakebuf_r+0xa0>
 5082c4c:	d8800117 	ldw	r2,4(sp)
 5082c50:	00e00014 	movui	r3,32768
 5082c54:	10bc000c 	andi	r2,r2,61440
 5082c58:	14c80020 	cmpeqi	r19,r2,8192
 5082c5c:	10c03726 	beq	r2,r3,5082d3c <__smakebuf_r+0x130>
 5082c60:	80c0030b 	ldhu	r3,12(r16)
 5082c64:	18c20014 	ori	r3,r3,2048
 5082c68:	80c0030d 	sth	r3,12(r16)
 5082c6c:	00c80004 	movi	r3,8192
 5082c70:	10c0521e 	bne	r2,r3,5082dbc <__smakebuf_r+0x1b0>
 5082c74:	8140038f 	ldh	r5,14(r16)
 5082c78:	8809883a 	mov	r4,r17
 5082c7c:	5082e840 	call	5082e84 <_isatty_r>
 5082c80:	10004c26 	beq	r2,zero,5082db4 <__smakebuf_r+0x1a8>
 5082c84:	8080030b 	ldhu	r2,12(r16)
 5082c88:	80c010c4 	addi	r3,r16,67
 5082c8c:	80c00015 	stw	r3,0(r16)
 5082c90:	10800054 	ori	r2,r2,1
 5082c94:	8080030d 	sth	r2,12(r16)
 5082c98:	00800044 	movi	r2,1
 5082c9c:	80c00415 	stw	r3,16(r16)
 5082ca0:	80800515 	stw	r2,20(r16)
 5082ca4:	04810004 	movi	r18,1024
 5082ca8:	00000706 	br	5082cc8 <__smakebuf_r+0xbc>
 5082cac:	8080030b 	ldhu	r2,12(r16)
 5082cb0:	10c0200c 	andi	r3,r2,128
 5082cb4:	18001f1e 	bne	r3,zero,5082d34 <__smakebuf_r+0x128>
 5082cb8:	04810004 	movi	r18,1024
 5082cbc:	10820014 	ori	r2,r2,2048
 5082cc0:	8080030d 	sth	r2,12(r16)
 5082cc4:	0027883a 	mov	r19,zero
 5082cc8:	900b883a 	mov	r5,r18
 5082ccc:	8809883a 	mov	r4,r17
 5082cd0:	5080e140 	call	5080e14 <_malloc_r>
 5082cd4:	10002c26 	beq	r2,zero,5082d88 <__smakebuf_r+0x17c>
 5082cd8:	80c0030b 	ldhu	r3,12(r16)
 5082cdc:	01014234 	movhi	r4,1288
 5082ce0:	21010e04 	addi	r4,r4,1080
 5082ce4:	89000f15 	stw	r4,60(r17)
 5082ce8:	18c02014 	ori	r3,r3,128
 5082cec:	80c0030d 	sth	r3,12(r16)
 5082cf0:	80800015 	stw	r2,0(r16)
 5082cf4:	80800415 	stw	r2,16(r16)
 5082cf8:	84800515 	stw	r18,20(r16)
 5082cfc:	98001a1e 	bne	r19,zero,5082d68 <__smakebuf_r+0x15c>
 5082d00:	dfc01317 	ldw	ra,76(sp)
 5082d04:	dcc01217 	ldw	r19,72(sp)
 5082d08:	dc801117 	ldw	r18,68(sp)
 5082d0c:	dc401017 	ldw	r17,64(sp)
 5082d10:	dc000f17 	ldw	r16,60(sp)
 5082d14:	dec01404 	addi	sp,sp,80
 5082d18:	f800283a 	ret
 5082d1c:	288010c4 	addi	r2,r5,67
 5082d20:	28800015 	stw	r2,0(r5)
 5082d24:	28800415 	stw	r2,16(r5)
 5082d28:	00800044 	movi	r2,1
 5082d2c:	28800515 	stw	r2,20(r5)
 5082d30:	f800283a 	ret
 5082d34:	04801004 	movi	r18,64
 5082d38:	003fe006 	br	5082cbc <__flash_rwdata_start+0xffffd438>
 5082d3c:	81000a17 	ldw	r4,40(r16)
 5082d40:	00c14234 	movhi	r3,1288
 5082d44:	18c85804 	addi	r3,r3,8544
 5082d48:	20ffc51e 	bne	r4,r3,5082c60 <__flash_rwdata_start+0xffffd3dc>
 5082d4c:	8080030b 	ldhu	r2,12(r16)
 5082d50:	04810004 	movi	r18,1024
 5082d54:	84801315 	stw	r18,76(r16)
 5082d58:	1484b03a 	or	r2,r2,r18
 5082d5c:	8080030d 	sth	r2,12(r16)
 5082d60:	0027883a 	mov	r19,zero
 5082d64:	003fd806 	br	5082cc8 <__flash_rwdata_start+0xffffd444>
 5082d68:	8140038f 	ldh	r5,14(r16)
 5082d6c:	8809883a 	mov	r4,r17
 5082d70:	5082e840 	call	5082e84 <_isatty_r>
 5082d74:	103fe226 	beq	r2,zero,5082d00 <__flash_rwdata_start+0xffffd47c>
 5082d78:	8080030b 	ldhu	r2,12(r16)
 5082d7c:	10800054 	ori	r2,r2,1
 5082d80:	8080030d 	sth	r2,12(r16)
 5082d84:	003fde06 	br	5082d00 <__flash_rwdata_start+0xffffd47c>
 5082d88:	8080030b 	ldhu	r2,12(r16)
 5082d8c:	10c0800c 	andi	r3,r2,512
 5082d90:	183fdb1e 	bne	r3,zero,5082d00 <__flash_rwdata_start+0xffffd47c>
 5082d94:	10800094 	ori	r2,r2,2
 5082d98:	80c010c4 	addi	r3,r16,67
 5082d9c:	8080030d 	sth	r2,12(r16)
 5082da0:	00800044 	movi	r2,1
 5082da4:	80c00015 	stw	r3,0(r16)
 5082da8:	80c00415 	stw	r3,16(r16)
 5082dac:	80800515 	stw	r2,20(r16)
 5082db0:	003fd306 	br	5082d00 <__flash_rwdata_start+0xffffd47c>
 5082db4:	04810004 	movi	r18,1024
 5082db8:	003fc306 	br	5082cc8 <__flash_rwdata_start+0xffffd444>
 5082dbc:	0027883a 	mov	r19,zero
 5082dc0:	04810004 	movi	r18,1024
 5082dc4:	003fc006 	br	5082cc8 <__flash_rwdata_start+0xffffd444>

05082dc8 <_read_r>:
 5082dc8:	defffd04 	addi	sp,sp,-12
 5082dcc:	2805883a 	mov	r2,r5
 5082dd0:	dc000015 	stw	r16,0(sp)
 5082dd4:	04000034 	movhi	r16,0
 5082dd8:	dc400115 	stw	r17,4(sp)
 5082ddc:	300b883a 	mov	r5,r6
 5082de0:	8406b004 	addi	r16,r16,6848
 5082de4:	2023883a 	mov	r17,r4
 5082de8:	380d883a 	mov	r6,r7
 5082dec:	1009883a 	mov	r4,r2
 5082df0:	dfc00215 	stw	ra,8(sp)
 5082df4:	80000015 	stw	zero,0(r16)
 5082df8:	508368c0 	call	508368c <read>
 5082dfc:	00ffffc4 	movi	r3,-1
 5082e00:	10c00526 	beq	r2,r3,5082e18 <_read_r+0x50>
 5082e04:	dfc00217 	ldw	ra,8(sp)
 5082e08:	dc400117 	ldw	r17,4(sp)
 5082e0c:	dc000017 	ldw	r16,0(sp)
 5082e10:	dec00304 	addi	sp,sp,12
 5082e14:	f800283a 	ret
 5082e18:	80c00017 	ldw	r3,0(r16)
 5082e1c:	183ff926 	beq	r3,zero,5082e04 <__flash_rwdata_start+0xffffd580>
 5082e20:	88c00015 	stw	r3,0(r17)
 5082e24:	003ff706 	br	5082e04 <__flash_rwdata_start+0xffffd580>

05082e28 <_fstat_r>:
 5082e28:	defffd04 	addi	sp,sp,-12
 5082e2c:	2805883a 	mov	r2,r5
 5082e30:	dc000015 	stw	r16,0(sp)
 5082e34:	04000034 	movhi	r16,0
 5082e38:	dc400115 	stw	r17,4(sp)
 5082e3c:	8406b004 	addi	r16,r16,6848
 5082e40:	2023883a 	mov	r17,r4
 5082e44:	300b883a 	mov	r5,r6
 5082e48:	1009883a 	mov	r4,r2
 5082e4c:	dfc00215 	stw	ra,8(sp)
 5082e50:	80000015 	stw	zero,0(r16)
 5082e54:	50832000 	call	5083200 <fstat>
 5082e58:	00ffffc4 	movi	r3,-1
 5082e5c:	10c00526 	beq	r2,r3,5082e74 <_fstat_r+0x4c>
 5082e60:	dfc00217 	ldw	ra,8(sp)
 5082e64:	dc400117 	ldw	r17,4(sp)
 5082e68:	dc000017 	ldw	r16,0(sp)
 5082e6c:	dec00304 	addi	sp,sp,12
 5082e70:	f800283a 	ret
 5082e74:	80c00017 	ldw	r3,0(r16)
 5082e78:	183ff926 	beq	r3,zero,5082e60 <__flash_rwdata_start+0xffffd5dc>
 5082e7c:	88c00015 	stw	r3,0(r17)
 5082e80:	003ff706 	br	5082e60 <__flash_rwdata_start+0xffffd5dc>

05082e84 <_isatty_r>:
 5082e84:	defffd04 	addi	sp,sp,-12
 5082e88:	dc000015 	stw	r16,0(sp)
 5082e8c:	04000034 	movhi	r16,0
 5082e90:	dc400115 	stw	r17,4(sp)
 5082e94:	8406b004 	addi	r16,r16,6848
 5082e98:	2023883a 	mov	r17,r4
 5082e9c:	2809883a 	mov	r4,r5
 5082ea0:	dfc00215 	stw	ra,8(sp)
 5082ea4:	80000015 	stw	zero,0(r16)
 5082ea8:	50832ec0 	call	50832ec <isatty>
 5082eac:	00ffffc4 	movi	r3,-1
 5082eb0:	10c00526 	beq	r2,r3,5082ec8 <_isatty_r+0x44>
 5082eb4:	dfc00217 	ldw	ra,8(sp)
 5082eb8:	dc400117 	ldw	r17,4(sp)
 5082ebc:	dc000017 	ldw	r16,0(sp)
 5082ec0:	dec00304 	addi	sp,sp,12
 5082ec4:	f800283a 	ret
 5082ec8:	80c00017 	ldw	r3,0(r16)
 5082ecc:	183ff926 	beq	r3,zero,5082eb4 <__flash_rwdata_start+0xffffd630>
 5082ed0:	88c00015 	stw	r3,0(r17)
 5082ed4:	003ff706 	br	5082eb4 <__flash_rwdata_start+0xffffd630>

05082ed8 <__divsi3>:
 5082ed8:	20001b16 	blt	r4,zero,5082f48 <__divsi3+0x70>
 5082edc:	000f883a 	mov	r7,zero
 5082ee0:	28001616 	blt	r5,zero,5082f3c <__divsi3+0x64>
 5082ee4:	200d883a 	mov	r6,r4
 5082ee8:	29001a2e 	bgeu	r5,r4,5082f54 <__divsi3+0x7c>
 5082eec:	00800804 	movi	r2,32
 5082ef0:	00c00044 	movi	r3,1
 5082ef4:	00000106 	br	5082efc <__divsi3+0x24>
 5082ef8:	10000d26 	beq	r2,zero,5082f30 <__divsi3+0x58>
 5082efc:	294b883a 	add	r5,r5,r5
 5082f00:	10bfffc4 	addi	r2,r2,-1
 5082f04:	18c7883a 	add	r3,r3,r3
 5082f08:	293ffb36 	bltu	r5,r4,5082ef8 <__flash_rwdata_start+0xffffd674>
 5082f0c:	0005883a 	mov	r2,zero
 5082f10:	18000726 	beq	r3,zero,5082f30 <__divsi3+0x58>
 5082f14:	0005883a 	mov	r2,zero
 5082f18:	31400236 	bltu	r6,r5,5082f24 <__divsi3+0x4c>
 5082f1c:	314dc83a 	sub	r6,r6,r5
 5082f20:	10c4b03a 	or	r2,r2,r3
 5082f24:	1806d07a 	srli	r3,r3,1
 5082f28:	280ad07a 	srli	r5,r5,1
 5082f2c:	183ffa1e 	bne	r3,zero,5082f18 <__flash_rwdata_start+0xffffd694>
 5082f30:	38000126 	beq	r7,zero,5082f38 <__divsi3+0x60>
 5082f34:	0085c83a 	sub	r2,zero,r2
 5082f38:	f800283a 	ret
 5082f3c:	014bc83a 	sub	r5,zero,r5
 5082f40:	39c0005c 	xori	r7,r7,1
 5082f44:	003fe706 	br	5082ee4 <__flash_rwdata_start+0xffffd660>
 5082f48:	0109c83a 	sub	r4,zero,r4
 5082f4c:	01c00044 	movi	r7,1
 5082f50:	003fe306 	br	5082ee0 <__flash_rwdata_start+0xffffd65c>
 5082f54:	00c00044 	movi	r3,1
 5082f58:	003fee06 	br	5082f14 <__flash_rwdata_start+0xffffd690>

05082f5c <__modsi3>:
 5082f5c:	20001716 	blt	r4,zero,5082fbc <__modsi3+0x60>
 5082f60:	000f883a 	mov	r7,zero
 5082f64:	2005883a 	mov	r2,r4
 5082f68:	28001216 	blt	r5,zero,5082fb4 <__modsi3+0x58>
 5082f6c:	2900162e 	bgeu	r5,r4,5082fc8 <__modsi3+0x6c>
 5082f70:	01800804 	movi	r6,32
 5082f74:	00c00044 	movi	r3,1
 5082f78:	00000106 	br	5082f80 <__modsi3+0x24>
 5082f7c:	30000a26 	beq	r6,zero,5082fa8 <__modsi3+0x4c>
 5082f80:	294b883a 	add	r5,r5,r5
 5082f84:	31bfffc4 	addi	r6,r6,-1
 5082f88:	18c7883a 	add	r3,r3,r3
 5082f8c:	293ffb36 	bltu	r5,r4,5082f7c <__flash_rwdata_start+0xffffd6f8>
 5082f90:	18000526 	beq	r3,zero,5082fa8 <__modsi3+0x4c>
 5082f94:	1806d07a 	srli	r3,r3,1
 5082f98:	11400136 	bltu	r2,r5,5082fa0 <__modsi3+0x44>
 5082f9c:	1145c83a 	sub	r2,r2,r5
 5082fa0:	280ad07a 	srli	r5,r5,1
 5082fa4:	183ffb1e 	bne	r3,zero,5082f94 <__flash_rwdata_start+0xffffd710>
 5082fa8:	38000126 	beq	r7,zero,5082fb0 <__modsi3+0x54>
 5082fac:	0085c83a 	sub	r2,zero,r2
 5082fb0:	f800283a 	ret
 5082fb4:	014bc83a 	sub	r5,zero,r5
 5082fb8:	003fec06 	br	5082f6c <__flash_rwdata_start+0xffffd6e8>
 5082fbc:	0109c83a 	sub	r4,zero,r4
 5082fc0:	01c00044 	movi	r7,1
 5082fc4:	003fe706 	br	5082f64 <__flash_rwdata_start+0xffffd6e0>
 5082fc8:	00c00044 	movi	r3,1
 5082fcc:	003ff106 	br	5082f94 <__flash_rwdata_start+0xffffd710>

05082fd0 <__udivsi3>:
 5082fd0:	200d883a 	mov	r6,r4
 5082fd4:	2900152e 	bgeu	r5,r4,508302c <__udivsi3+0x5c>
 5082fd8:	28001416 	blt	r5,zero,508302c <__udivsi3+0x5c>
 5082fdc:	00800804 	movi	r2,32
 5082fe0:	00c00044 	movi	r3,1
 5082fe4:	00000206 	br	5082ff0 <__udivsi3+0x20>
 5082fe8:	10000e26 	beq	r2,zero,5083024 <__udivsi3+0x54>
 5082fec:	28000516 	blt	r5,zero,5083004 <__udivsi3+0x34>
 5082ff0:	294b883a 	add	r5,r5,r5
 5082ff4:	10bfffc4 	addi	r2,r2,-1
 5082ff8:	18c7883a 	add	r3,r3,r3
 5082ffc:	293ffa36 	bltu	r5,r4,5082fe8 <__flash_rwdata_start+0xffffd764>
 5083000:	18000826 	beq	r3,zero,5083024 <__udivsi3+0x54>
 5083004:	0005883a 	mov	r2,zero
 5083008:	31400236 	bltu	r6,r5,5083014 <__udivsi3+0x44>
 508300c:	314dc83a 	sub	r6,r6,r5
 5083010:	10c4b03a 	or	r2,r2,r3
 5083014:	1806d07a 	srli	r3,r3,1
 5083018:	280ad07a 	srli	r5,r5,1
 508301c:	183ffa1e 	bne	r3,zero,5083008 <__flash_rwdata_start+0xffffd784>
 5083020:	f800283a 	ret
 5083024:	0005883a 	mov	r2,zero
 5083028:	f800283a 	ret
 508302c:	00c00044 	movi	r3,1
 5083030:	003ff406 	br	5083004 <__flash_rwdata_start+0xffffd780>

05083034 <__umodsi3>:
 5083034:	2005883a 	mov	r2,r4
 5083038:	2900122e 	bgeu	r5,r4,5083084 <__umodsi3+0x50>
 508303c:	28001116 	blt	r5,zero,5083084 <__umodsi3+0x50>
 5083040:	01800804 	movi	r6,32
 5083044:	00c00044 	movi	r3,1
 5083048:	00000206 	br	5083054 <__umodsi3+0x20>
 508304c:	30000c26 	beq	r6,zero,5083080 <__umodsi3+0x4c>
 5083050:	28000516 	blt	r5,zero,5083068 <__umodsi3+0x34>
 5083054:	294b883a 	add	r5,r5,r5
 5083058:	31bfffc4 	addi	r6,r6,-1
 508305c:	18c7883a 	add	r3,r3,r3
 5083060:	293ffa36 	bltu	r5,r4,508304c <__flash_rwdata_start+0xffffd7c8>
 5083064:	18000626 	beq	r3,zero,5083080 <__umodsi3+0x4c>
 5083068:	1806d07a 	srli	r3,r3,1
 508306c:	11400136 	bltu	r2,r5,5083074 <__umodsi3+0x40>
 5083070:	1145c83a 	sub	r2,r2,r5
 5083074:	280ad07a 	srli	r5,r5,1
 5083078:	183ffb1e 	bne	r3,zero,5083068 <__flash_rwdata_start+0xffffd7e4>
 508307c:	f800283a 	ret
 5083080:	f800283a 	ret
 5083084:	00c00044 	movi	r3,1
 5083088:	003ff706 	br	5083068 <__flash_rwdata_start+0xffffd7e4>

0508308c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508308c:	defffe04 	addi	sp,sp,-8
 5083090:	dfc00115 	stw	ra,4(sp)
 5083094:	df000015 	stw	fp,0(sp)
 5083098:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508309c:	d0a00917 	ldw	r2,-32732(gp)
 50830a0:	10000326 	beq	r2,zero,50830b0 <alt_get_errno+0x24>
 50830a4:	d0a00917 	ldw	r2,-32732(gp)
 50830a8:	103ee83a 	callr	r2
 50830ac:	00000106 	br	50830b4 <alt_get_errno+0x28>
 50830b0:	d0a01104 	addi	r2,gp,-32700
}
 50830b4:	e037883a 	mov	sp,fp
 50830b8:	dfc00117 	ldw	ra,4(sp)
 50830bc:	df000017 	ldw	fp,0(sp)
 50830c0:	dec00204 	addi	sp,sp,8
 50830c4:	f800283a 	ret

050830c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 50830c8:	defffb04 	addi	sp,sp,-20
 50830cc:	dfc00415 	stw	ra,16(sp)
 50830d0:	df000315 	stw	fp,12(sp)
 50830d4:	df000304 	addi	fp,sp,12
 50830d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 50830dc:	e0bfff17 	ldw	r2,-4(fp)
 50830e0:	10000616 	blt	r2,zero,50830fc <close+0x34>
 50830e4:	e0bfff17 	ldw	r2,-4(fp)
 50830e8:	10c00324 	muli	r3,r2,12
 50830ec:	00800034 	movhi	r2,0
 50830f0:	10822704 	addi	r2,r2,2204
 50830f4:	1885883a 	add	r2,r3,r2
 50830f8:	00000106 	br	5083100 <close+0x38>
 50830fc:	0005883a 	mov	r2,zero
 5083100:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 5083104:	e0bffd17 	ldw	r2,-12(fp)
 5083108:	10001926 	beq	r2,zero,5083170 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 508310c:	e0bffd17 	ldw	r2,-12(fp)
 5083110:	10800017 	ldw	r2,0(r2)
 5083114:	10800417 	ldw	r2,16(r2)
 5083118:	10000626 	beq	r2,zero,5083134 <close+0x6c>
 508311c:	e0bffd17 	ldw	r2,-12(fp)
 5083120:	10800017 	ldw	r2,0(r2)
 5083124:	10800417 	ldw	r2,16(r2)
 5083128:	e13ffd17 	ldw	r4,-12(fp)
 508312c:	103ee83a 	callr	r2
 5083130:	00000106 	br	5083138 <close+0x70>
 5083134:	0005883a 	mov	r2,zero
 5083138:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 508313c:	e13fff17 	ldw	r4,-4(fp)
 5083140:	50837880 	call	5083788 <alt_release_fd>
    if (rval < 0)
 5083144:	e0bffe17 	ldw	r2,-8(fp)
 5083148:	1000070e 	bge	r2,zero,5083168 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 508314c:	508308c0 	call	508308c <alt_get_errno>
 5083150:	1007883a 	mov	r3,r2
 5083154:	e0bffe17 	ldw	r2,-8(fp)
 5083158:	0085c83a 	sub	r2,zero,r2
 508315c:	18800015 	stw	r2,0(r3)
      return -1;
 5083160:	00bfffc4 	movi	r2,-1
 5083164:	00000706 	br	5083184 <close+0xbc>
    }
    return 0;
 5083168:	0005883a 	mov	r2,zero
 508316c:	00000506 	br	5083184 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5083170:	508308c0 	call	508308c <alt_get_errno>
 5083174:	1007883a 	mov	r3,r2
 5083178:	00801444 	movi	r2,81
 508317c:	18800015 	stw	r2,0(r3)
    return -1;
 5083180:	00bfffc4 	movi	r2,-1
  }
}
 5083184:	e037883a 	mov	sp,fp
 5083188:	dfc00117 	ldw	ra,4(sp)
 508318c:	df000017 	ldw	fp,0(sp)
 5083190:	dec00204 	addi	sp,sp,8
 5083194:	f800283a 	ret

05083198 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 5083198:	defffc04 	addi	sp,sp,-16
 508319c:	df000315 	stw	fp,12(sp)
 50831a0:	df000304 	addi	fp,sp,12
 50831a4:	e13ffd15 	stw	r4,-12(fp)
 50831a8:	e17ffe15 	stw	r5,-8(fp)
 50831ac:	e1bfff15 	stw	r6,-4(fp)
  return len;
 50831b0:	e0bfff17 	ldw	r2,-4(fp)
}
 50831b4:	e037883a 	mov	sp,fp
 50831b8:	df000017 	ldw	fp,0(sp)
 50831bc:	dec00104 	addi	sp,sp,4
 50831c0:	f800283a 	ret

050831c4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50831c4:	defffe04 	addi	sp,sp,-8
 50831c8:	dfc00115 	stw	ra,4(sp)
 50831cc:	df000015 	stw	fp,0(sp)
 50831d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50831d4:	d0a00917 	ldw	r2,-32732(gp)
 50831d8:	10000326 	beq	r2,zero,50831e8 <alt_get_errno+0x24>
 50831dc:	d0a00917 	ldw	r2,-32732(gp)
 50831e0:	103ee83a 	callr	r2
 50831e4:	00000106 	br	50831ec <alt_get_errno+0x28>
 50831e8:	d0a01104 	addi	r2,gp,-32700
}
 50831ec:	e037883a 	mov	sp,fp
 50831f0:	dfc00117 	ldw	ra,4(sp)
 50831f4:	df000017 	ldw	fp,0(sp)
 50831f8:	dec00204 	addi	sp,sp,8
 50831fc:	f800283a 	ret

05083200 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 5083200:	defffb04 	addi	sp,sp,-20
 5083204:	dfc00415 	stw	ra,16(sp)
 5083208:	df000315 	stw	fp,12(sp)
 508320c:	df000304 	addi	fp,sp,12
 5083210:	e13ffe15 	stw	r4,-8(fp)
 5083214:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5083218:	e0bffe17 	ldw	r2,-8(fp)
 508321c:	10000616 	blt	r2,zero,5083238 <fstat+0x38>
 5083220:	e0bffe17 	ldw	r2,-8(fp)
 5083224:	10c00324 	muli	r3,r2,12
 5083228:	00800034 	movhi	r2,0
 508322c:	10822704 	addi	r2,r2,2204
 5083230:	1885883a 	add	r2,r3,r2
 5083234:	00000106 	br	508323c <fstat+0x3c>
 5083238:	0005883a 	mov	r2,zero
 508323c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 5083240:	e0bffd17 	ldw	r2,-12(fp)
 5083244:	10001026 	beq	r2,zero,5083288 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 5083248:	e0bffd17 	ldw	r2,-12(fp)
 508324c:	10800017 	ldw	r2,0(r2)
 5083250:	10800817 	ldw	r2,32(r2)
 5083254:	10000726 	beq	r2,zero,5083274 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 5083258:	e0bffd17 	ldw	r2,-12(fp)
 508325c:	10800017 	ldw	r2,0(r2)
 5083260:	10800817 	ldw	r2,32(r2)
 5083264:	e17fff17 	ldw	r5,-4(fp)
 5083268:	e13ffd17 	ldw	r4,-12(fp)
 508326c:	103ee83a 	callr	r2
 5083270:	00000a06 	br	508329c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 5083274:	e0bfff17 	ldw	r2,-4(fp)
 5083278:	00c80004 	movi	r3,8192
 508327c:	10c00115 	stw	r3,4(r2)
      return 0;
 5083280:	0005883a 	mov	r2,zero
 5083284:	00000506 	br	508329c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5083288:	50831c40 	call	50831c4 <alt_get_errno>
 508328c:	1007883a 	mov	r3,r2
 5083290:	00801444 	movi	r2,81
 5083294:	18800015 	stw	r2,0(r3)
    return -1;
 5083298:	00bfffc4 	movi	r2,-1
  }
}
 508329c:	e037883a 	mov	sp,fp
 50832a0:	dfc00117 	ldw	ra,4(sp)
 50832a4:	df000017 	ldw	fp,0(sp)
 50832a8:	dec00204 	addi	sp,sp,8
 50832ac:	f800283a 	ret

050832b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 50832b0:	defffe04 	addi	sp,sp,-8
 50832b4:	dfc00115 	stw	ra,4(sp)
 50832b8:	df000015 	stw	fp,0(sp)
 50832bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50832c0:	d0a00917 	ldw	r2,-32732(gp)
 50832c4:	10000326 	beq	r2,zero,50832d4 <alt_get_errno+0x24>
 50832c8:	d0a00917 	ldw	r2,-32732(gp)
 50832cc:	103ee83a 	callr	r2
 50832d0:	00000106 	br	50832d8 <alt_get_errno+0x28>
 50832d4:	d0a01104 	addi	r2,gp,-32700
}
 50832d8:	e037883a 	mov	sp,fp
 50832dc:	dfc00117 	ldw	ra,4(sp)
 50832e0:	df000017 	ldw	fp,0(sp)
 50832e4:	dec00204 	addi	sp,sp,8
 50832e8:	f800283a 	ret

050832ec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 50832ec:	deffed04 	addi	sp,sp,-76
 50832f0:	dfc01215 	stw	ra,72(sp)
 50832f4:	df001115 	stw	fp,68(sp)
 50832f8:	df001104 	addi	fp,sp,68
 50832fc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 5083300:	e0bfff17 	ldw	r2,-4(fp)
 5083304:	10000616 	blt	r2,zero,5083320 <isatty+0x34>
 5083308:	e0bfff17 	ldw	r2,-4(fp)
 508330c:	10c00324 	muli	r3,r2,12
 5083310:	00800034 	movhi	r2,0
 5083314:	10822704 	addi	r2,r2,2204
 5083318:	1885883a 	add	r2,r3,r2
 508331c:	00000106 	br	5083324 <isatty+0x38>
 5083320:	0005883a 	mov	r2,zero
 5083324:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 5083328:	e0bfef17 	ldw	r2,-68(fp)
 508332c:	10000e26 	beq	r2,zero,5083368 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 5083330:	e0bfef17 	ldw	r2,-68(fp)
 5083334:	10800017 	ldw	r2,0(r2)
 5083338:	10800817 	ldw	r2,32(r2)
 508333c:	1000021e 	bne	r2,zero,5083348 <isatty+0x5c>
    {
      return 1;
 5083340:	00800044 	movi	r2,1
 5083344:	00000d06 	br	508337c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 5083348:	e0bff004 	addi	r2,fp,-64
 508334c:	100b883a 	mov	r5,r2
 5083350:	e13fff17 	ldw	r4,-4(fp)
 5083354:	50832000 	call	5083200 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 5083358:	e0bff117 	ldw	r2,-60(fp)
 508335c:	10880020 	cmpeqi	r2,r2,8192
 5083360:	10803fcc 	andi	r2,r2,255
 5083364:	00000506 	br	508337c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 5083368:	50832b00 	call	50832b0 <alt_get_errno>
 508336c:	1007883a 	mov	r3,r2
 5083370:	00801444 	movi	r2,81
 5083374:	18800015 	stw	r2,0(r3)
    return 0;
 5083378:	0005883a 	mov	r2,zero
  }
}
 508337c:	e037883a 	mov	sp,fp
 5083380:	dfc00117 	ldw	ra,4(sp)
 5083384:	df000017 	ldw	fp,0(sp)
 5083388:	dec00204 	addi	sp,sp,8
 508338c:	f800283a 	ret

05083390 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 5083390:	defffc04 	addi	sp,sp,-16
 5083394:	df000315 	stw	fp,12(sp)
 5083398:	df000304 	addi	fp,sp,12
 508339c:	e13ffd15 	stw	r4,-12(fp)
 50833a0:	e17ffe15 	stw	r5,-8(fp)
 50833a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 50833a8:	e0fffe17 	ldw	r3,-8(fp)
 50833ac:	e0bffd17 	ldw	r2,-12(fp)
 50833b0:	18800c26 	beq	r3,r2,50833e4 <alt_load_section+0x54>
  {
    while( to != end )
 50833b4:	00000806 	br	50833d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 50833b8:	e0bffe17 	ldw	r2,-8(fp)
 50833bc:	10c00104 	addi	r3,r2,4
 50833c0:	e0fffe15 	stw	r3,-8(fp)
 50833c4:	e0fffd17 	ldw	r3,-12(fp)
 50833c8:	19000104 	addi	r4,r3,4
 50833cc:	e13ffd15 	stw	r4,-12(fp)
 50833d0:	18c00017 	ldw	r3,0(r3)
 50833d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 50833d8:	e0fffe17 	ldw	r3,-8(fp)
 50833dc:	e0bfff17 	ldw	r2,-4(fp)
 50833e0:	18bff51e 	bne	r3,r2,50833b8 <__flash_rwdata_start+0xffffdb34>
    {
      *to++ = *from++;
    }
  }
}
 50833e4:	0001883a 	nop
 50833e8:	e037883a 	mov	sp,fp
 50833ec:	df000017 	ldw	fp,0(sp)
 50833f0:	dec00104 	addi	sp,sp,4
 50833f4:	f800283a 	ret

050833f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 50833f8:	defffe04 	addi	sp,sp,-8
 50833fc:	dfc00115 	stw	ra,4(sp)
 5083400:	df000015 	stw	fp,0(sp)
 5083404:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 5083408:	01800034 	movhi	r6,0
 508340c:	3186ad04 	addi	r6,r6,6836
 5083410:	01400034 	movhi	r5,0
 5083414:	29401204 	addi	r5,r5,72
 5083418:	01014234 	movhi	r4,1288
 508341c:	21162104 	addi	r4,r4,22660
 5083420:	50833900 	call	5083390 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 5083424:	01814234 	movhi	r6,1288
 5083428:	31809104 	addi	r6,r6,580
 508342c:	01414234 	movhi	r5,1288
 5083430:	29400804 	addi	r5,r5,32
 5083434:	01014234 	movhi	r4,1288
 5083438:	21000804 	addi	r4,r4,32
 508343c:	50833900 	call	5083390 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 5083440:	01800034 	movhi	r6,0
 5083444:	31801204 	addi	r6,r6,72
 5083448:	01400034 	movhi	r5,0
 508344c:	29400004 	addi	r5,r5,0
 5083450:	01014234 	movhi	r4,1288
 5083454:	21160f04 	addi	r4,r4,22588
 5083458:	50833900 	call	5083390 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 508345c:	50847280 	call	5084728 <alt_dcache_flush_all>
  alt_icache_flush_all();
 5083460:	50849100 	call	5084910 <alt_icache_flush_all>
}
 5083464:	0001883a 	nop
 5083468:	e037883a 	mov	sp,fp
 508346c:	dfc00117 	ldw	ra,4(sp)
 5083470:	df000017 	ldw	fp,0(sp)
 5083474:	dec00204 	addi	sp,sp,8
 5083478:	f800283a 	ret

0508347c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508347c:	defffe04 	addi	sp,sp,-8
 5083480:	dfc00115 	stw	ra,4(sp)
 5083484:	df000015 	stw	fp,0(sp)
 5083488:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 508348c:	d0a00917 	ldw	r2,-32732(gp)
 5083490:	10000326 	beq	r2,zero,50834a0 <alt_get_errno+0x24>
 5083494:	d0a00917 	ldw	r2,-32732(gp)
 5083498:	103ee83a 	callr	r2
 508349c:	00000106 	br	50834a4 <alt_get_errno+0x28>
 50834a0:	d0a01104 	addi	r2,gp,-32700
}
 50834a4:	e037883a 	mov	sp,fp
 50834a8:	dfc00117 	ldw	ra,4(sp)
 50834ac:	df000017 	ldw	fp,0(sp)
 50834b0:	dec00204 	addi	sp,sp,8
 50834b4:	f800283a 	ret

050834b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 50834b8:	defff904 	addi	sp,sp,-28
 50834bc:	dfc00615 	stw	ra,24(sp)
 50834c0:	df000515 	stw	fp,20(sp)
 50834c4:	df000504 	addi	fp,sp,20
 50834c8:	e13ffd15 	stw	r4,-12(fp)
 50834cc:	e17ffe15 	stw	r5,-8(fp)
 50834d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 50834d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50834d8:	e0bffd17 	ldw	r2,-12(fp)
 50834dc:	10000616 	blt	r2,zero,50834f8 <lseek+0x40>
 50834e0:	e0bffd17 	ldw	r2,-12(fp)
 50834e4:	10c00324 	muli	r3,r2,12
 50834e8:	00800034 	movhi	r2,0
 50834ec:	10822704 	addi	r2,r2,2204
 50834f0:	1885883a 	add	r2,r3,r2
 50834f4:	00000106 	br	50834fc <lseek+0x44>
 50834f8:	0005883a 	mov	r2,zero
 50834fc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 5083500:	e0bffc17 	ldw	r2,-16(fp)
 5083504:	10001026 	beq	r2,zero,5083548 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 5083508:	e0bffc17 	ldw	r2,-16(fp)
 508350c:	10800017 	ldw	r2,0(r2)
 5083510:	10800717 	ldw	r2,28(r2)
 5083514:	10000926 	beq	r2,zero,508353c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 5083518:	e0bffc17 	ldw	r2,-16(fp)
 508351c:	10800017 	ldw	r2,0(r2)
 5083520:	10800717 	ldw	r2,28(r2)
 5083524:	e1bfff17 	ldw	r6,-4(fp)
 5083528:	e17ffe17 	ldw	r5,-8(fp)
 508352c:	e13ffc17 	ldw	r4,-16(fp)
 5083530:	103ee83a 	callr	r2
 5083534:	e0bffb15 	stw	r2,-20(fp)
 5083538:	00000506 	br	5083550 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 508353c:	00bfde84 	movi	r2,-134
 5083540:	e0bffb15 	stw	r2,-20(fp)
 5083544:	00000206 	br	5083550 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 5083548:	00bfebc4 	movi	r2,-81
 508354c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 5083550:	e0bffb17 	ldw	r2,-20(fp)
 5083554:	1000070e 	bge	r2,zero,5083574 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 5083558:	508347c0 	call	508347c <alt_get_errno>
 508355c:	1007883a 	mov	r3,r2
 5083560:	e0bffb17 	ldw	r2,-20(fp)
 5083564:	0085c83a 	sub	r2,zero,r2
 5083568:	18800015 	stw	r2,0(r3)
    rc = -1;
 508356c:	00bfffc4 	movi	r2,-1
 5083570:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 5083574:	e0bffb17 	ldw	r2,-20(fp)
}
 5083578:	e037883a 	mov	sp,fp
 508357c:	dfc00117 	ldw	ra,4(sp)
 5083580:	df000017 	ldw	fp,0(sp)
 5083584:	dec00204 	addi	sp,sp,8
 5083588:	f800283a 	ret

0508358c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 508358c:	defffd04 	addi	sp,sp,-12
 5083590:	dfc00215 	stw	ra,8(sp)
 5083594:	df000115 	stw	fp,4(sp)
 5083598:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 508359c:	0009883a 	mov	r4,zero
 50835a0:	5083a040 	call	5083a04 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 50835a4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 50835a8:	5083a3c0 	call	5083a3c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 50835ac:	01800034 	movhi	r6,0
 50835b0:	31800a04 	addi	r6,r6,40
 50835b4:	01400034 	movhi	r5,0
 50835b8:	29400a04 	addi	r5,r5,40
 50835bc:	01000034 	movhi	r4,0
 50835c0:	21000a04 	addi	r4,r4,40
 50835c4:	5084ca80 	call	5084ca8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 50835c8:	50848500 	call	5084850 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 50835cc:	01014234 	movhi	r4,1288
 50835d0:	21122c04 	addi	r4,r4,18608
 50835d4:	50854a80 	call	50854a8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 50835d8:	d0a01217 	ldw	r2,-32696(gp)
 50835dc:	d0e01317 	ldw	r3,-32692(gp)
 50835e0:	d1201417 	ldw	r4,-32688(gp)
 50835e4:	200d883a 	mov	r6,r4
 50835e8:	180b883a 	mov	r5,r3
 50835ec:	1009883a 	mov	r4,r2
 50835f0:	50802900 	call	5080290 <main>
 50835f4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 50835f8:	01000044 	movi	r4,1
 50835fc:	50830c80 	call	50830c8 <close>
  exit (result);
 5083600:	e13fff17 	ldw	r4,-4(fp)
 5083604:	50854bc0 	call	50854bc <exit>

05083608 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 5083608:	defffe04 	addi	sp,sp,-8
 508360c:	df000115 	stw	fp,4(sp)
 5083610:	df000104 	addi	fp,sp,4
 5083614:	e13fff15 	stw	r4,-4(fp)
}
 5083618:	0001883a 	nop
 508361c:	e037883a 	mov	sp,fp
 5083620:	df000017 	ldw	fp,0(sp)
 5083624:	dec00104 	addi	sp,sp,4
 5083628:	f800283a 	ret

0508362c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 508362c:	defffe04 	addi	sp,sp,-8
 5083630:	df000115 	stw	fp,4(sp)
 5083634:	df000104 	addi	fp,sp,4
 5083638:	e13fff15 	stw	r4,-4(fp)
}
 508363c:	0001883a 	nop
 5083640:	e037883a 	mov	sp,fp
 5083644:	df000017 	ldw	fp,0(sp)
 5083648:	dec00104 	addi	sp,sp,4
 508364c:	f800283a 	ret

05083650 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5083650:	defffe04 	addi	sp,sp,-8
 5083654:	dfc00115 	stw	ra,4(sp)
 5083658:	df000015 	stw	fp,0(sp)
 508365c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5083660:	d0a00917 	ldw	r2,-32732(gp)
 5083664:	10000326 	beq	r2,zero,5083674 <alt_get_errno+0x24>
 5083668:	d0a00917 	ldw	r2,-32732(gp)
 508366c:	103ee83a 	callr	r2
 5083670:	00000106 	br	5083678 <alt_get_errno+0x28>
 5083674:	d0a01104 	addi	r2,gp,-32700
}
 5083678:	e037883a 	mov	sp,fp
 508367c:	dfc00117 	ldw	ra,4(sp)
 5083680:	df000017 	ldw	fp,0(sp)
 5083684:	dec00204 	addi	sp,sp,8
 5083688:	f800283a 	ret

0508368c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 508368c:	defff904 	addi	sp,sp,-28
 5083690:	dfc00615 	stw	ra,24(sp)
 5083694:	df000515 	stw	fp,20(sp)
 5083698:	df000504 	addi	fp,sp,20
 508369c:	e13ffd15 	stw	r4,-12(fp)
 50836a0:	e17ffe15 	stw	r5,-8(fp)
 50836a4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50836a8:	e0bffd17 	ldw	r2,-12(fp)
 50836ac:	10000616 	blt	r2,zero,50836c8 <read+0x3c>
 50836b0:	e0bffd17 	ldw	r2,-12(fp)
 50836b4:	10c00324 	muli	r3,r2,12
 50836b8:	00800034 	movhi	r2,0
 50836bc:	10822704 	addi	r2,r2,2204
 50836c0:	1885883a 	add	r2,r3,r2
 50836c4:	00000106 	br	50836cc <read+0x40>
 50836c8:	0005883a 	mov	r2,zero
 50836cc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 50836d0:	e0bffb17 	ldw	r2,-20(fp)
 50836d4:	10002226 	beq	r2,zero,5083760 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 50836d8:	e0bffb17 	ldw	r2,-20(fp)
 50836dc:	10800217 	ldw	r2,8(r2)
 50836e0:	108000cc 	andi	r2,r2,3
 50836e4:	10800060 	cmpeqi	r2,r2,1
 50836e8:	1000181e 	bne	r2,zero,508374c <read+0xc0>
        (fd->dev->read))
 50836ec:	e0bffb17 	ldw	r2,-20(fp)
 50836f0:	10800017 	ldw	r2,0(r2)
 50836f4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 50836f8:	10001426 	beq	r2,zero,508374c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 50836fc:	e0bffb17 	ldw	r2,-20(fp)
 5083700:	10800017 	ldw	r2,0(r2)
 5083704:	10800517 	ldw	r2,20(r2)
 5083708:	e0ffff17 	ldw	r3,-4(fp)
 508370c:	180d883a 	mov	r6,r3
 5083710:	e17ffe17 	ldw	r5,-8(fp)
 5083714:	e13ffb17 	ldw	r4,-20(fp)
 5083718:	103ee83a 	callr	r2
 508371c:	e0bffc15 	stw	r2,-16(fp)
 5083720:	e0bffc17 	ldw	r2,-16(fp)
 5083724:	1000070e 	bge	r2,zero,5083744 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 5083728:	50836500 	call	5083650 <alt_get_errno>
 508372c:	1007883a 	mov	r3,r2
 5083730:	e0bffc17 	ldw	r2,-16(fp)
 5083734:	0085c83a 	sub	r2,zero,r2
 5083738:	18800015 	stw	r2,0(r3)
          return -1;
 508373c:	00bfffc4 	movi	r2,-1
 5083740:	00000c06 	br	5083774 <read+0xe8>
        }
        return rval;
 5083744:	e0bffc17 	ldw	r2,-16(fp)
 5083748:	00000a06 	br	5083774 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 508374c:	50836500 	call	5083650 <alt_get_errno>
 5083750:	1007883a 	mov	r3,r2
 5083754:	00800344 	movi	r2,13
 5083758:	18800015 	stw	r2,0(r3)
 508375c:	00000406 	br	5083770 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 5083760:	50836500 	call	5083650 <alt_get_errno>
 5083764:	1007883a 	mov	r3,r2
 5083768:	00801444 	movi	r2,81
 508376c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 5083770:	00bfffc4 	movi	r2,-1
}
 5083774:	e037883a 	mov	sp,fp
 5083778:	dfc00117 	ldw	ra,4(sp)
 508377c:	df000017 	ldw	fp,0(sp)
 5083780:	dec00204 	addi	sp,sp,8
 5083784:	f800283a 	ret

05083788 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 5083788:	defffe04 	addi	sp,sp,-8
 508378c:	df000115 	stw	fp,4(sp)
 5083790:	df000104 	addi	fp,sp,4
 5083794:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 5083798:	e0bfff17 	ldw	r2,-4(fp)
 508379c:	108000d0 	cmplti	r2,r2,3
 50837a0:	10000d1e 	bne	r2,zero,50837d8 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 50837a4:	00800034 	movhi	r2,0
 50837a8:	10822704 	addi	r2,r2,2204
 50837ac:	e0ffff17 	ldw	r3,-4(fp)
 50837b0:	18c00324 	muli	r3,r3,12
 50837b4:	10c5883a 	add	r2,r2,r3
 50837b8:	10800204 	addi	r2,r2,8
 50837bc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 50837c0:	00800034 	movhi	r2,0
 50837c4:	10822704 	addi	r2,r2,2204
 50837c8:	e0ffff17 	ldw	r3,-4(fp)
 50837cc:	18c00324 	muli	r3,r3,12
 50837d0:	10c5883a 	add	r2,r2,r3
 50837d4:	10000015 	stw	zero,0(r2)
  }
}
 50837d8:	0001883a 	nop
 50837dc:	e037883a 	mov	sp,fp
 50837e0:	df000017 	ldw	fp,0(sp)
 50837e4:	dec00104 	addi	sp,sp,4
 50837e8:	f800283a 	ret

050837ec <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 50837ec:	defff904 	addi	sp,sp,-28
 50837f0:	df000615 	stw	fp,24(sp)
 50837f4:	df000604 	addi	fp,sp,24
 50837f8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50837fc:	0005303a 	rdctl	r2,status
 5083800:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5083804:	e0fffe17 	ldw	r3,-8(fp)
 5083808:	00bfff84 	movi	r2,-2
 508380c:	1884703a 	and	r2,r3,r2
 5083810:	1001703a 	wrctl	status,r2
  
  return context;
 5083814:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 5083818:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 508381c:	d0a00a17 	ldw	r2,-32728(gp)
 5083820:	10c000c4 	addi	r3,r2,3
 5083824:	00bfff04 	movi	r2,-4
 5083828:	1884703a 	and	r2,r3,r2
 508382c:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 5083830:	d0e00a17 	ldw	r3,-32728(gp)
 5083834:	e0bfff17 	ldw	r2,-4(fp)
 5083838:	1887883a 	add	r3,r3,r2
 508383c:	00810034 	movhi	r2,1024
 5083840:	10800004 	addi	r2,r2,0
 5083844:	10c0062e 	bgeu	r2,r3,5083860 <sbrk+0x74>
 5083848:	e0bffb17 	ldw	r2,-20(fp)
 508384c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5083850:	e0bffa17 	ldw	r2,-24(fp)
 5083854:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 5083858:	00bfffc4 	movi	r2,-1
 508385c:	00000b06 	br	508388c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 5083860:	d0a00a17 	ldw	r2,-32728(gp)
 5083864:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 5083868:	d0e00a17 	ldw	r3,-32728(gp)
 508386c:	e0bfff17 	ldw	r2,-4(fp)
 5083870:	1885883a 	add	r2,r3,r2
 5083874:	d0a00a15 	stw	r2,-32728(gp)
 5083878:	e0bffb17 	ldw	r2,-20(fp)
 508387c:	e0bffc15 	stw	r2,-16(fp)
 5083880:	e0bffc17 	ldw	r2,-16(fp)
 5083884:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 5083888:	e0bffd17 	ldw	r2,-12(fp)
} 
 508388c:	e037883a 	mov	sp,fp
 5083890:	df000017 	ldw	fp,0(sp)
 5083894:	dec00104 	addi	sp,sp,4
 5083898:	f800283a 	ret

0508389c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 508389c:	defffe04 	addi	sp,sp,-8
 50838a0:	dfc00115 	stw	ra,4(sp)
 50838a4:	df000015 	stw	fp,0(sp)
 50838a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 50838ac:	d0a00917 	ldw	r2,-32732(gp)
 50838b0:	10000326 	beq	r2,zero,50838c0 <alt_get_errno+0x24>
 50838b4:	d0a00917 	ldw	r2,-32732(gp)
 50838b8:	103ee83a 	callr	r2
 50838bc:	00000106 	br	50838c4 <alt_get_errno+0x28>
 50838c0:	d0a01104 	addi	r2,gp,-32700
}
 50838c4:	e037883a 	mov	sp,fp
 50838c8:	dfc00117 	ldw	ra,4(sp)
 50838cc:	df000017 	ldw	fp,0(sp)
 50838d0:	dec00204 	addi	sp,sp,8
 50838d4:	f800283a 	ret

050838d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 50838d8:	defff904 	addi	sp,sp,-28
 50838dc:	dfc00615 	stw	ra,24(sp)
 50838e0:	df000515 	stw	fp,20(sp)
 50838e4:	df000504 	addi	fp,sp,20
 50838e8:	e13ffd15 	stw	r4,-12(fp)
 50838ec:	e17ffe15 	stw	r5,-8(fp)
 50838f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 50838f4:	e0bffd17 	ldw	r2,-12(fp)
 50838f8:	10000616 	blt	r2,zero,5083914 <write+0x3c>
 50838fc:	e0bffd17 	ldw	r2,-12(fp)
 5083900:	10c00324 	muli	r3,r2,12
 5083904:	00800034 	movhi	r2,0
 5083908:	10822704 	addi	r2,r2,2204
 508390c:	1885883a 	add	r2,r3,r2
 5083910:	00000106 	br	5083918 <write+0x40>
 5083914:	0005883a 	mov	r2,zero
 5083918:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 508391c:	e0bffb17 	ldw	r2,-20(fp)
 5083920:	10002126 	beq	r2,zero,50839a8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 5083924:	e0bffb17 	ldw	r2,-20(fp)
 5083928:	10800217 	ldw	r2,8(r2)
 508392c:	108000cc 	andi	r2,r2,3
 5083930:	10001826 	beq	r2,zero,5083994 <write+0xbc>
 5083934:	e0bffb17 	ldw	r2,-20(fp)
 5083938:	10800017 	ldw	r2,0(r2)
 508393c:	10800617 	ldw	r2,24(r2)
 5083940:	10001426 	beq	r2,zero,5083994 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 5083944:	e0bffb17 	ldw	r2,-20(fp)
 5083948:	10800017 	ldw	r2,0(r2)
 508394c:	10800617 	ldw	r2,24(r2)
 5083950:	e0ffff17 	ldw	r3,-4(fp)
 5083954:	180d883a 	mov	r6,r3
 5083958:	e17ffe17 	ldw	r5,-8(fp)
 508395c:	e13ffb17 	ldw	r4,-20(fp)
 5083960:	103ee83a 	callr	r2
 5083964:	e0bffc15 	stw	r2,-16(fp)
 5083968:	e0bffc17 	ldw	r2,-16(fp)
 508396c:	1000070e 	bge	r2,zero,508398c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 5083970:	508389c0 	call	508389c <alt_get_errno>
 5083974:	1007883a 	mov	r3,r2
 5083978:	e0bffc17 	ldw	r2,-16(fp)
 508397c:	0085c83a 	sub	r2,zero,r2
 5083980:	18800015 	stw	r2,0(r3)
        return -1;
 5083984:	00bfffc4 	movi	r2,-1
 5083988:	00000c06 	br	50839bc <write+0xe4>
      }
      return rval;
 508398c:	e0bffc17 	ldw	r2,-16(fp)
 5083990:	00000a06 	br	50839bc <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 5083994:	508389c0 	call	508389c <alt_get_errno>
 5083998:	1007883a 	mov	r3,r2
 508399c:	00800344 	movi	r2,13
 50839a0:	18800015 	stw	r2,0(r3)
 50839a4:	00000406 	br	50839b8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 50839a8:	508389c0 	call	508389c <alt_get_errno>
 50839ac:	1007883a 	mov	r3,r2
 50839b0:	00801444 	movi	r2,81
 50839b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 50839b8:	00bfffc4 	movi	r2,-1
}
 50839bc:	e037883a 	mov	sp,fp
 50839c0:	dfc00117 	ldw	ra,4(sp)
 50839c4:	df000017 	ldw	fp,0(sp)
 50839c8:	dec00204 	addi	sp,sp,8
 50839cc:	f800283a 	ret

050839d0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 50839d0:	defffd04 	addi	sp,sp,-12
 50839d4:	dfc00215 	stw	ra,8(sp)
 50839d8:	df000115 	stw	fp,4(sp)
 50839dc:	df000104 	addi	fp,sp,4
 50839e0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 50839e4:	d1600604 	addi	r5,gp,-32744
 50839e8:	e13fff17 	ldw	r4,-4(fp)
 50839ec:	50847ac0 	call	50847ac <alt_dev_llist_insert>
}
 50839f0:	e037883a 	mov	sp,fp
 50839f4:	dfc00117 	ldw	ra,4(sp)
 50839f8:	df000017 	ldw	fp,0(sp)
 50839fc:	dec00204 	addi	sp,sp,8
 5083a00:	f800283a 	ret

05083a04 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 5083a04:	defffd04 	addi	sp,sp,-12
 5083a08:	dfc00215 	stw	ra,8(sp)
 5083a0c:	df000115 	stw	fp,4(sp)
 5083a10:	df000104 	addi	fp,sp,4
 5083a14:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 5083a18:	508511c0 	call	508511c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 5083a1c:	00800044 	movi	r2,1
 5083a20:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 5083a24:	0001883a 	nop
 5083a28:	e037883a 	mov	sp,fp
 5083a2c:	dfc00117 	ldw	ra,4(sp)
 5083a30:	df000017 	ldw	fp,0(sp)
 5083a34:	dec00204 	addi	sp,sp,8
 5083a38:	f800283a 	ret

05083a3c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 5083a3c:	defffe04 	addi	sp,sp,-8
 5083a40:	dfc00115 	stw	ra,4(sp)
 5083a44:	df000015 	stw	fp,0(sp)
 5083a48:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 5083a4c:	01c0fa04 	movi	r7,1000
 5083a50:	000d883a 	mov	r6,zero
 5083a54:	000b883a 	mov	r5,zero
 5083a58:	01014434 	movhi	r4,1296
 5083a5c:	21040804 	addi	r4,r4,4128
 5083a60:	50845800 	call	5084580 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 5083a64:	01800044 	movi	r6,1
 5083a68:	000b883a 	mov	r5,zero
 5083a6c:	01000034 	movhi	r4,0
 5083a70:	21029104 	addi	r4,r4,2628
 5083a74:	5083c040 	call	5083c04 <altera_avalon_jtag_uart_init>
 5083a78:	01000034 	movhi	r4,0
 5083a7c:	21028704 	addi	r4,r4,2588
 5083a80:	50839d00 	call	50839d0 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 5083a84:	0001883a 	nop
}
 5083a88:	0001883a 	nop
 5083a8c:	e037883a 	mov	sp,fp
 5083a90:	dfc00117 	ldw	ra,4(sp)
 5083a94:	df000017 	ldw	fp,0(sp)
 5083a98:	dec00204 	addi	sp,sp,8
 5083a9c:	f800283a 	ret

05083aa0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 5083aa0:	defffa04 	addi	sp,sp,-24
 5083aa4:	dfc00515 	stw	ra,20(sp)
 5083aa8:	df000415 	stw	fp,16(sp)
 5083aac:	df000404 	addi	fp,sp,16
 5083ab0:	e13ffd15 	stw	r4,-12(fp)
 5083ab4:	e17ffe15 	stw	r5,-8(fp)
 5083ab8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5083abc:	e0bffd17 	ldw	r2,-12(fp)
 5083ac0:	10800017 	ldw	r2,0(r2)
 5083ac4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 5083ac8:	e0bffc17 	ldw	r2,-16(fp)
 5083acc:	10c00a04 	addi	r3,r2,40
 5083ad0:	e0bffd17 	ldw	r2,-12(fp)
 5083ad4:	10800217 	ldw	r2,8(r2)
 5083ad8:	100f883a 	mov	r7,r2
 5083adc:	e1bfff17 	ldw	r6,-4(fp)
 5083ae0:	e17ffe17 	ldw	r5,-8(fp)
 5083ae4:	1809883a 	mov	r4,r3
 5083ae8:	50840c80 	call	50840c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 5083aec:	e037883a 	mov	sp,fp
 5083af0:	dfc00117 	ldw	ra,4(sp)
 5083af4:	df000017 	ldw	fp,0(sp)
 5083af8:	dec00204 	addi	sp,sp,8
 5083afc:	f800283a 	ret

05083b00 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 5083b00:	defffa04 	addi	sp,sp,-24
 5083b04:	dfc00515 	stw	ra,20(sp)
 5083b08:	df000415 	stw	fp,16(sp)
 5083b0c:	df000404 	addi	fp,sp,16
 5083b10:	e13ffd15 	stw	r4,-12(fp)
 5083b14:	e17ffe15 	stw	r5,-8(fp)
 5083b18:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5083b1c:	e0bffd17 	ldw	r2,-12(fp)
 5083b20:	10800017 	ldw	r2,0(r2)
 5083b24:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 5083b28:	e0bffc17 	ldw	r2,-16(fp)
 5083b2c:	10c00a04 	addi	r3,r2,40
 5083b30:	e0bffd17 	ldw	r2,-12(fp)
 5083b34:	10800217 	ldw	r2,8(r2)
 5083b38:	100f883a 	mov	r7,r2
 5083b3c:	e1bfff17 	ldw	r6,-4(fp)
 5083b40:	e17ffe17 	ldw	r5,-8(fp)
 5083b44:	1809883a 	mov	r4,r3
 5083b48:	50842e40 	call	50842e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 5083b4c:	e037883a 	mov	sp,fp
 5083b50:	dfc00117 	ldw	ra,4(sp)
 5083b54:	df000017 	ldw	fp,0(sp)
 5083b58:	dec00204 	addi	sp,sp,8
 5083b5c:	f800283a 	ret

05083b60 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 5083b60:	defffc04 	addi	sp,sp,-16
 5083b64:	dfc00315 	stw	ra,12(sp)
 5083b68:	df000215 	stw	fp,8(sp)
 5083b6c:	df000204 	addi	fp,sp,8
 5083b70:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 5083b74:	e0bfff17 	ldw	r2,-4(fp)
 5083b78:	10800017 	ldw	r2,0(r2)
 5083b7c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 5083b80:	e0bffe17 	ldw	r2,-8(fp)
 5083b84:	10c00a04 	addi	r3,r2,40
 5083b88:	e0bfff17 	ldw	r2,-4(fp)
 5083b8c:	10800217 	ldw	r2,8(r2)
 5083b90:	100b883a 	mov	r5,r2
 5083b94:	1809883a 	mov	r4,r3
 5083b98:	5083f700 	call	5083f70 <altera_avalon_jtag_uart_close>
}
 5083b9c:	e037883a 	mov	sp,fp
 5083ba0:	dfc00117 	ldw	ra,4(sp)
 5083ba4:	df000017 	ldw	fp,0(sp)
 5083ba8:	dec00204 	addi	sp,sp,8
 5083bac:	f800283a 	ret

05083bb0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 5083bb0:	defffa04 	addi	sp,sp,-24
 5083bb4:	dfc00515 	stw	ra,20(sp)
 5083bb8:	df000415 	stw	fp,16(sp)
 5083bbc:	df000404 	addi	fp,sp,16
 5083bc0:	e13ffd15 	stw	r4,-12(fp)
 5083bc4:	e17ffe15 	stw	r5,-8(fp)
 5083bc8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 5083bcc:	e0bffd17 	ldw	r2,-12(fp)
 5083bd0:	10800017 	ldw	r2,0(r2)
 5083bd4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 5083bd8:	e0bffc17 	ldw	r2,-16(fp)
 5083bdc:	10800a04 	addi	r2,r2,40
 5083be0:	e1bfff17 	ldw	r6,-4(fp)
 5083be4:	e17ffe17 	ldw	r5,-8(fp)
 5083be8:	1009883a 	mov	r4,r2
 5083bec:	5083fd80 	call	5083fd8 <altera_avalon_jtag_uart_ioctl>
}
 5083bf0:	e037883a 	mov	sp,fp
 5083bf4:	dfc00117 	ldw	ra,4(sp)
 5083bf8:	df000017 	ldw	fp,0(sp)
 5083bfc:	dec00204 	addi	sp,sp,8
 5083c00:	f800283a 	ret

05083c04 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 5083c04:	defffa04 	addi	sp,sp,-24
 5083c08:	dfc00515 	stw	ra,20(sp)
 5083c0c:	df000415 	stw	fp,16(sp)
 5083c10:	df000404 	addi	fp,sp,16
 5083c14:	e13ffd15 	stw	r4,-12(fp)
 5083c18:	e17ffe15 	stw	r5,-8(fp)
 5083c1c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5083c20:	e0bffd17 	ldw	r2,-12(fp)
 5083c24:	00c00044 	movi	r3,1
 5083c28:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 5083c2c:	e0bffd17 	ldw	r2,-12(fp)
 5083c30:	10800017 	ldw	r2,0(r2)
 5083c34:	10800104 	addi	r2,r2,4
 5083c38:	1007883a 	mov	r3,r2
 5083c3c:	e0bffd17 	ldw	r2,-12(fp)
 5083c40:	10800817 	ldw	r2,32(r2)
 5083c44:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 5083c48:	e0bffe17 	ldw	r2,-8(fp)
 5083c4c:	e0ffff17 	ldw	r3,-4(fp)
 5083c50:	d8000015 	stw	zero,0(sp)
 5083c54:	e1fffd17 	ldw	r7,-12(fp)
 5083c58:	01814234 	movhi	r6,1288
 5083c5c:	318f3104 	addi	r6,r6,15556
 5083c60:	180b883a 	mov	r5,r3
 5083c64:	1009883a 	mov	r4,r2
 5083c68:	50849440 	call	5084944 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 5083c6c:	e0bffd17 	ldw	r2,-12(fp)
 5083c70:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 5083c74:	e0bffd17 	ldw	r2,-12(fp)
 5083c78:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 5083c7c:	d0e01617 	ldw	r3,-32680(gp)
 5083c80:	e1fffd17 	ldw	r7,-12(fp)
 5083c84:	01814234 	movhi	r6,1288
 5083c88:	318fb404 	addi	r6,r6,16080
 5083c8c:	180b883a 	mov	r5,r3
 5083c90:	1009883a 	mov	r4,r2
 5083c94:	50845fc0 	call	50845fc <alt_alarm_start>
 5083c98:	1000040e 	bge	r2,zero,5083cac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 5083c9c:	e0fffd17 	ldw	r3,-12(fp)
 5083ca0:	00a00034 	movhi	r2,32768
 5083ca4:	10bfffc4 	addi	r2,r2,-1
 5083ca8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 5083cac:	0001883a 	nop
 5083cb0:	e037883a 	mov	sp,fp
 5083cb4:	dfc00117 	ldw	ra,4(sp)
 5083cb8:	df000017 	ldw	fp,0(sp)
 5083cbc:	dec00204 	addi	sp,sp,8
 5083cc0:	f800283a 	ret

05083cc4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 5083cc4:	defff804 	addi	sp,sp,-32
 5083cc8:	df000715 	stw	fp,28(sp)
 5083ccc:	df000704 	addi	fp,sp,28
 5083cd0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 5083cd4:	e0bfff17 	ldw	r2,-4(fp)
 5083cd8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 5083cdc:	e0bffb17 	ldw	r2,-20(fp)
 5083ce0:	10800017 	ldw	r2,0(r2)
 5083ce4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5083ce8:	e0bffc17 	ldw	r2,-16(fp)
 5083cec:	10800104 	addi	r2,r2,4
 5083cf0:	10800037 	ldwio	r2,0(r2)
 5083cf4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 5083cf8:	e0bffd17 	ldw	r2,-12(fp)
 5083cfc:	1080c00c 	andi	r2,r2,768
 5083d00:	10006d26 	beq	r2,zero,5083eb8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 5083d04:	e0bffd17 	ldw	r2,-12(fp)
 5083d08:	1080400c 	andi	r2,r2,256
 5083d0c:	10003526 	beq	r2,zero,5083de4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 5083d10:	00800074 	movhi	r2,1
 5083d14:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5083d18:	e0bffb17 	ldw	r2,-20(fp)
 5083d1c:	10800a17 	ldw	r2,40(r2)
 5083d20:	10800044 	addi	r2,r2,1
 5083d24:	1081ffcc 	andi	r2,r2,2047
 5083d28:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 5083d2c:	e0bffb17 	ldw	r2,-20(fp)
 5083d30:	10c00b17 	ldw	r3,44(r2)
 5083d34:	e0bffe17 	ldw	r2,-8(fp)
 5083d38:	18801526 	beq	r3,r2,5083d90 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 5083d3c:	e0bffc17 	ldw	r2,-16(fp)
 5083d40:	10800037 	ldwio	r2,0(r2)
 5083d44:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 5083d48:	e0bff917 	ldw	r2,-28(fp)
 5083d4c:	10a0000c 	andi	r2,r2,32768
 5083d50:	10001126 	beq	r2,zero,5083d98 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 5083d54:	e0bffb17 	ldw	r2,-20(fp)
 5083d58:	10800a17 	ldw	r2,40(r2)
 5083d5c:	e0fff917 	ldw	r3,-28(fp)
 5083d60:	1809883a 	mov	r4,r3
 5083d64:	e0fffb17 	ldw	r3,-20(fp)
 5083d68:	1885883a 	add	r2,r3,r2
 5083d6c:	10800e04 	addi	r2,r2,56
 5083d70:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5083d74:	e0bffb17 	ldw	r2,-20(fp)
 5083d78:	10800a17 	ldw	r2,40(r2)
 5083d7c:	10800044 	addi	r2,r2,1
 5083d80:	10c1ffcc 	andi	r3,r2,2047
 5083d84:	e0bffb17 	ldw	r2,-20(fp)
 5083d88:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 5083d8c:	003fe206 	br	5083d18 <__flash_rwdata_start+0xffffe494>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 5083d90:	0001883a 	nop
 5083d94:	00000106 	br	5083d9c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 5083d98:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 5083d9c:	e0bff917 	ldw	r2,-28(fp)
 5083da0:	10bfffec 	andhi	r2,r2,65535
 5083da4:	10000f26 	beq	r2,zero,5083de4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 5083da8:	e0bffb17 	ldw	r2,-20(fp)
 5083dac:	10c00817 	ldw	r3,32(r2)
 5083db0:	00bfff84 	movi	r2,-2
 5083db4:	1886703a 	and	r3,r3,r2
 5083db8:	e0bffb17 	ldw	r2,-20(fp)
 5083dbc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 5083dc0:	e0bffc17 	ldw	r2,-16(fp)
 5083dc4:	10800104 	addi	r2,r2,4
 5083dc8:	1007883a 	mov	r3,r2
 5083dcc:	e0bffb17 	ldw	r2,-20(fp)
 5083dd0:	10800817 	ldw	r2,32(r2)
 5083dd4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5083dd8:	e0bffc17 	ldw	r2,-16(fp)
 5083ddc:	10800104 	addi	r2,r2,4
 5083de0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 5083de4:	e0bffd17 	ldw	r2,-12(fp)
 5083de8:	1080800c 	andi	r2,r2,512
 5083dec:	103fbe26 	beq	r2,zero,5083ce8 <__flash_rwdata_start+0xffffe464>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 5083df0:	e0bffd17 	ldw	r2,-12(fp)
 5083df4:	1004d43a 	srli	r2,r2,16
 5083df8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 5083dfc:	00001406 	br	5083e50 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 5083e00:	e0bffc17 	ldw	r2,-16(fp)
 5083e04:	e0fffb17 	ldw	r3,-20(fp)
 5083e08:	18c00d17 	ldw	r3,52(r3)
 5083e0c:	e13ffb17 	ldw	r4,-20(fp)
 5083e10:	20c7883a 	add	r3,r4,r3
 5083e14:	18c20e04 	addi	r3,r3,2104
 5083e18:	18c00003 	ldbu	r3,0(r3)
 5083e1c:	18c03fcc 	andi	r3,r3,255
 5083e20:	18c0201c 	xori	r3,r3,128
 5083e24:	18ffe004 	addi	r3,r3,-128
 5083e28:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5083e2c:	e0bffb17 	ldw	r2,-20(fp)
 5083e30:	10800d17 	ldw	r2,52(r2)
 5083e34:	10800044 	addi	r2,r2,1
 5083e38:	10c1ffcc 	andi	r3,r2,2047
 5083e3c:	e0bffb17 	ldw	r2,-20(fp)
 5083e40:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 5083e44:	e0bffa17 	ldw	r2,-24(fp)
 5083e48:	10bfffc4 	addi	r2,r2,-1
 5083e4c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 5083e50:	e0bffa17 	ldw	r2,-24(fp)
 5083e54:	10000526 	beq	r2,zero,5083e6c <altera_avalon_jtag_uart_irq+0x1a8>
 5083e58:	e0bffb17 	ldw	r2,-20(fp)
 5083e5c:	10c00d17 	ldw	r3,52(r2)
 5083e60:	e0bffb17 	ldw	r2,-20(fp)
 5083e64:	10800c17 	ldw	r2,48(r2)
 5083e68:	18bfe51e 	bne	r3,r2,5083e00 <__flash_rwdata_start+0xffffe57c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 5083e6c:	e0bffa17 	ldw	r2,-24(fp)
 5083e70:	103f9d26 	beq	r2,zero,5083ce8 <__flash_rwdata_start+0xffffe464>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5083e74:	e0bffb17 	ldw	r2,-20(fp)
 5083e78:	10c00817 	ldw	r3,32(r2)
 5083e7c:	00bfff44 	movi	r2,-3
 5083e80:	1886703a 	and	r3,r3,r2
 5083e84:	e0bffb17 	ldw	r2,-20(fp)
 5083e88:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5083e8c:	e0bffb17 	ldw	r2,-20(fp)
 5083e90:	10800017 	ldw	r2,0(r2)
 5083e94:	10800104 	addi	r2,r2,4
 5083e98:	1007883a 	mov	r3,r2
 5083e9c:	e0bffb17 	ldw	r2,-20(fp)
 5083ea0:	10800817 	ldw	r2,32(r2)
 5083ea4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 5083ea8:	e0bffc17 	ldw	r2,-16(fp)
 5083eac:	10800104 	addi	r2,r2,4
 5083eb0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 5083eb4:	003f8c06 	br	5083ce8 <__flash_rwdata_start+0xffffe464>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 5083eb8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 5083ebc:	0001883a 	nop
 5083ec0:	e037883a 	mov	sp,fp
 5083ec4:	df000017 	ldw	fp,0(sp)
 5083ec8:	dec00104 	addi	sp,sp,4
 5083ecc:	f800283a 	ret

05083ed0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 5083ed0:	defff804 	addi	sp,sp,-32
 5083ed4:	df000715 	stw	fp,28(sp)
 5083ed8:	df000704 	addi	fp,sp,28
 5083edc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 5083ee0:	e0bffb17 	ldw	r2,-20(fp)
 5083ee4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 5083ee8:	e0bff917 	ldw	r2,-28(fp)
 5083eec:	10800017 	ldw	r2,0(r2)
 5083ef0:	10800104 	addi	r2,r2,4
 5083ef4:	10800037 	ldwio	r2,0(r2)
 5083ef8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 5083efc:	e0bffa17 	ldw	r2,-24(fp)
 5083f00:	1081000c 	andi	r2,r2,1024
 5083f04:	10000b26 	beq	r2,zero,5083f34 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 5083f08:	e0bff917 	ldw	r2,-28(fp)
 5083f0c:	10800017 	ldw	r2,0(r2)
 5083f10:	10800104 	addi	r2,r2,4
 5083f14:	1007883a 	mov	r3,r2
 5083f18:	e0bff917 	ldw	r2,-28(fp)
 5083f1c:	10800817 	ldw	r2,32(r2)
 5083f20:	10810014 	ori	r2,r2,1024
 5083f24:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 5083f28:	e0bff917 	ldw	r2,-28(fp)
 5083f2c:	10000915 	stw	zero,36(r2)
 5083f30:	00000a06 	br	5083f5c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 5083f34:	e0bff917 	ldw	r2,-28(fp)
 5083f38:	10c00917 	ldw	r3,36(r2)
 5083f3c:	00a00034 	movhi	r2,32768
 5083f40:	10bfff04 	addi	r2,r2,-4
 5083f44:	10c00536 	bltu	r2,r3,5083f5c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 5083f48:	e0bff917 	ldw	r2,-28(fp)
 5083f4c:	10800917 	ldw	r2,36(r2)
 5083f50:	10c00044 	addi	r3,r2,1
 5083f54:	e0bff917 	ldw	r2,-28(fp)
 5083f58:	10c00915 	stw	r3,36(r2)
 5083f5c:	d0a01617 	ldw	r2,-32680(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 5083f60:	e037883a 	mov	sp,fp
 5083f64:	df000017 	ldw	fp,0(sp)
 5083f68:	dec00104 	addi	sp,sp,4
 5083f6c:	f800283a 	ret

05083f70 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 5083f70:	defffd04 	addi	sp,sp,-12
 5083f74:	df000215 	stw	fp,8(sp)
 5083f78:	df000204 	addi	fp,sp,8
 5083f7c:	e13ffe15 	stw	r4,-8(fp)
 5083f80:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5083f84:	00000506 	br	5083f9c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 5083f88:	e0bfff17 	ldw	r2,-4(fp)
 5083f8c:	1090000c 	andi	r2,r2,16384
 5083f90:	10000226 	beq	r2,zero,5083f9c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 5083f94:	00bffd44 	movi	r2,-11
 5083f98:	00000b06 	br	5083fc8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 5083f9c:	e0bffe17 	ldw	r2,-8(fp)
 5083fa0:	10c00d17 	ldw	r3,52(r2)
 5083fa4:	e0bffe17 	ldw	r2,-8(fp)
 5083fa8:	10800c17 	ldw	r2,48(r2)
 5083fac:	18800526 	beq	r3,r2,5083fc4 <altera_avalon_jtag_uart_close+0x54>
 5083fb0:	e0bffe17 	ldw	r2,-8(fp)
 5083fb4:	10c00917 	ldw	r3,36(r2)
 5083fb8:	e0bffe17 	ldw	r2,-8(fp)
 5083fbc:	10800117 	ldw	r2,4(r2)
 5083fc0:	18bff136 	bltu	r3,r2,5083f88 <__flash_rwdata_start+0xffffe704>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 5083fc4:	0005883a 	mov	r2,zero
}
 5083fc8:	e037883a 	mov	sp,fp
 5083fcc:	df000017 	ldw	fp,0(sp)
 5083fd0:	dec00104 	addi	sp,sp,4
 5083fd4:	f800283a 	ret

05083fd8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 5083fd8:	defffa04 	addi	sp,sp,-24
 5083fdc:	df000515 	stw	fp,20(sp)
 5083fe0:	df000504 	addi	fp,sp,20
 5083fe4:	e13ffd15 	stw	r4,-12(fp)
 5083fe8:	e17ffe15 	stw	r5,-8(fp)
 5083fec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 5083ff0:	00bff9c4 	movi	r2,-25
 5083ff4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 5083ff8:	e0bffe17 	ldw	r2,-8(fp)
 5083ffc:	10da8060 	cmpeqi	r3,r2,27137
 5084000:	1800031e 	bne	r3,zero,5084010 <altera_avalon_jtag_uart_ioctl+0x38>
 5084004:	109a80a0 	cmpeqi	r2,r2,27138
 5084008:	1000181e 	bne	r2,zero,508406c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 508400c:	00002906 	br	50840b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 5084010:	e0bffd17 	ldw	r2,-12(fp)
 5084014:	10c00117 	ldw	r3,4(r2)
 5084018:	00a00034 	movhi	r2,32768
 508401c:	10bfffc4 	addi	r2,r2,-1
 5084020:	18802126 	beq	r3,r2,50840a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 5084024:	e0bfff17 	ldw	r2,-4(fp)
 5084028:	10800017 	ldw	r2,0(r2)
 508402c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 5084030:	e0bffc17 	ldw	r2,-16(fp)
 5084034:	10800090 	cmplti	r2,r2,2
 5084038:	1000061e 	bne	r2,zero,5084054 <altera_avalon_jtag_uart_ioctl+0x7c>
 508403c:	e0fffc17 	ldw	r3,-16(fp)
 5084040:	00a00034 	movhi	r2,32768
 5084044:	10bfffc4 	addi	r2,r2,-1
 5084048:	18800226 	beq	r3,r2,5084054 <altera_avalon_jtag_uart_ioctl+0x7c>
 508404c:	e0bffc17 	ldw	r2,-16(fp)
 5084050:	00000206 	br	508405c <altera_avalon_jtag_uart_ioctl+0x84>
 5084054:	00a00034 	movhi	r2,32768
 5084058:	10bfff84 	addi	r2,r2,-2
 508405c:	e0fffd17 	ldw	r3,-12(fp)
 5084060:	18800115 	stw	r2,4(r3)
      rc = 0;
 5084064:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 5084068:	00000f06 	br	50840a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 508406c:	e0bffd17 	ldw	r2,-12(fp)
 5084070:	10c00117 	ldw	r3,4(r2)
 5084074:	00a00034 	movhi	r2,32768
 5084078:	10bfffc4 	addi	r2,r2,-1
 508407c:	18800c26 	beq	r3,r2,50840b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 5084080:	e0bffd17 	ldw	r2,-12(fp)
 5084084:	10c00917 	ldw	r3,36(r2)
 5084088:	e0bffd17 	ldw	r2,-12(fp)
 508408c:	10800117 	ldw	r2,4(r2)
 5084090:	1885803a 	cmpltu	r2,r3,r2
 5084094:	10c03fcc 	andi	r3,r2,255
 5084098:	e0bfff17 	ldw	r2,-4(fp)
 508409c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 50840a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 50840a4:	00000206 	br	50840b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 50840a8:	0001883a 	nop
 50840ac:	00000106 	br	50840b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 50840b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 50840b4:	e0bffb17 	ldw	r2,-20(fp)
}
 50840b8:	e037883a 	mov	sp,fp
 50840bc:	df000017 	ldw	fp,0(sp)
 50840c0:	dec00104 	addi	sp,sp,4
 50840c4:	f800283a 	ret

050840c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 50840c8:	defff304 	addi	sp,sp,-52
 50840cc:	dfc00c15 	stw	ra,48(sp)
 50840d0:	df000b15 	stw	fp,44(sp)
 50840d4:	df000b04 	addi	fp,sp,44
 50840d8:	e13ffc15 	stw	r4,-16(fp)
 50840dc:	e17ffd15 	stw	r5,-12(fp)
 50840e0:	e1bffe15 	stw	r6,-8(fp)
 50840e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 50840e8:	e0bffd17 	ldw	r2,-12(fp)
 50840ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 50840f0:	00004706 	br	5084210 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 50840f4:	e0bffc17 	ldw	r2,-16(fp)
 50840f8:	10800a17 	ldw	r2,40(r2)
 50840fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 5084100:	e0bffc17 	ldw	r2,-16(fp)
 5084104:	10800b17 	ldw	r2,44(r2)
 5084108:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 508410c:	e0fff717 	ldw	r3,-36(fp)
 5084110:	e0bff817 	ldw	r2,-32(fp)
 5084114:	18800536 	bltu	r3,r2,508412c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 5084118:	e0fff717 	ldw	r3,-36(fp)
 508411c:	e0bff817 	ldw	r2,-32(fp)
 5084120:	1885c83a 	sub	r2,r3,r2
 5084124:	e0bff615 	stw	r2,-40(fp)
 5084128:	00000406 	br	508413c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 508412c:	00c20004 	movi	r3,2048
 5084130:	e0bff817 	ldw	r2,-32(fp)
 5084134:	1885c83a 	sub	r2,r3,r2
 5084138:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 508413c:	e0bff617 	ldw	r2,-40(fp)
 5084140:	10001e26 	beq	r2,zero,50841bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 5084144:	e0fffe17 	ldw	r3,-8(fp)
 5084148:	e0bff617 	ldw	r2,-40(fp)
 508414c:	1880022e 	bgeu	r3,r2,5084158 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 5084150:	e0bffe17 	ldw	r2,-8(fp)
 5084154:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 5084158:	e0bffc17 	ldw	r2,-16(fp)
 508415c:	10c00e04 	addi	r3,r2,56
 5084160:	e0bff817 	ldw	r2,-32(fp)
 5084164:	1885883a 	add	r2,r3,r2
 5084168:	e1bff617 	ldw	r6,-40(fp)
 508416c:	100b883a 	mov	r5,r2
 5084170:	e13ff517 	ldw	r4,-44(fp)
 5084174:	50817040 	call	5081704 <memcpy>
      ptr   += n;
 5084178:	e0fff517 	ldw	r3,-44(fp)
 508417c:	e0bff617 	ldw	r2,-40(fp)
 5084180:	1885883a 	add	r2,r3,r2
 5084184:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 5084188:	e0fffe17 	ldw	r3,-8(fp)
 508418c:	e0bff617 	ldw	r2,-40(fp)
 5084190:	1885c83a 	sub	r2,r3,r2
 5084194:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 5084198:	e0fff817 	ldw	r3,-32(fp)
 508419c:	e0bff617 	ldw	r2,-40(fp)
 50841a0:	1885883a 	add	r2,r3,r2
 50841a4:	10c1ffcc 	andi	r3,r2,2047
 50841a8:	e0bffc17 	ldw	r2,-16(fp)
 50841ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 50841b0:	e0bffe17 	ldw	r2,-8(fp)
 50841b4:	00bfcf16 	blt	zero,r2,50840f4 <__flash_rwdata_start+0xffffe870>
 50841b8:	00000106 	br	50841c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 50841bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 50841c0:	e0fff517 	ldw	r3,-44(fp)
 50841c4:	e0bffd17 	ldw	r2,-12(fp)
 50841c8:	1880141e 	bne	r3,r2,508421c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 50841cc:	e0bfff17 	ldw	r2,-4(fp)
 50841d0:	1090000c 	andi	r2,r2,16384
 50841d4:	1000131e 	bne	r2,zero,5084224 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 50841d8:	0001883a 	nop
 50841dc:	e0bffc17 	ldw	r2,-16(fp)
 50841e0:	10c00a17 	ldw	r3,40(r2)
 50841e4:	e0bff717 	ldw	r2,-36(fp)
 50841e8:	1880051e 	bne	r3,r2,5084200 <altera_avalon_jtag_uart_read+0x138>
 50841ec:	e0bffc17 	ldw	r2,-16(fp)
 50841f0:	10c00917 	ldw	r3,36(r2)
 50841f4:	e0bffc17 	ldw	r2,-16(fp)
 50841f8:	10800117 	ldw	r2,4(r2)
 50841fc:	18bff736 	bltu	r3,r2,50841dc <__flash_rwdata_start+0xffffe958>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 5084200:	e0bffc17 	ldw	r2,-16(fp)
 5084204:	10c00a17 	ldw	r3,40(r2)
 5084208:	e0bff717 	ldw	r2,-36(fp)
 508420c:	18800726 	beq	r3,r2,508422c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 5084210:	e0bffe17 	ldw	r2,-8(fp)
 5084214:	00bfb716 	blt	zero,r2,50840f4 <__flash_rwdata_start+0xffffe870>
 5084218:	00000506 	br	5084230 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 508421c:	0001883a 	nop
 5084220:	00000306 	br	5084230 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 5084224:	0001883a 	nop
 5084228:	00000106 	br	5084230 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 508422c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 5084230:	e0fff517 	ldw	r3,-44(fp)
 5084234:	e0bffd17 	ldw	r2,-12(fp)
 5084238:	18801826 	beq	r3,r2,508429c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 508423c:	0005303a 	rdctl	r2,status
 5084240:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5084244:	e0fffb17 	ldw	r3,-20(fp)
 5084248:	00bfff84 	movi	r2,-2
 508424c:	1884703a 	and	r2,r3,r2
 5084250:	1001703a 	wrctl	status,r2
  
  return context;
 5084254:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 5084258:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 508425c:	e0bffc17 	ldw	r2,-16(fp)
 5084260:	10800817 	ldw	r2,32(r2)
 5084264:	10c00054 	ori	r3,r2,1
 5084268:	e0bffc17 	ldw	r2,-16(fp)
 508426c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5084270:	e0bffc17 	ldw	r2,-16(fp)
 5084274:	10800017 	ldw	r2,0(r2)
 5084278:	10800104 	addi	r2,r2,4
 508427c:	1007883a 	mov	r3,r2
 5084280:	e0bffc17 	ldw	r2,-16(fp)
 5084284:	10800817 	ldw	r2,32(r2)
 5084288:	18800035 	stwio	r2,0(r3)
 508428c:	e0bffa17 	ldw	r2,-24(fp)
 5084290:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5084294:	e0bff917 	ldw	r2,-28(fp)
 5084298:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 508429c:	e0fff517 	ldw	r3,-44(fp)
 50842a0:	e0bffd17 	ldw	r2,-12(fp)
 50842a4:	18800426 	beq	r3,r2,50842b8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 50842a8:	e0fff517 	ldw	r3,-44(fp)
 50842ac:	e0bffd17 	ldw	r2,-12(fp)
 50842b0:	1885c83a 	sub	r2,r3,r2
 50842b4:	00000606 	br	50842d0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 50842b8:	e0bfff17 	ldw	r2,-4(fp)
 50842bc:	1090000c 	andi	r2,r2,16384
 50842c0:	10000226 	beq	r2,zero,50842cc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 50842c4:	00bffd44 	movi	r2,-11
 50842c8:	00000106 	br	50842d0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 50842cc:	00bffec4 	movi	r2,-5
}
 50842d0:	e037883a 	mov	sp,fp
 50842d4:	dfc00117 	ldw	ra,4(sp)
 50842d8:	df000017 	ldw	fp,0(sp)
 50842dc:	dec00204 	addi	sp,sp,8
 50842e0:	f800283a 	ret

050842e4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 50842e4:	defff304 	addi	sp,sp,-52
 50842e8:	dfc00c15 	stw	ra,48(sp)
 50842ec:	df000b15 	stw	fp,44(sp)
 50842f0:	df000b04 	addi	fp,sp,44
 50842f4:	e13ffc15 	stw	r4,-16(fp)
 50842f8:	e17ffd15 	stw	r5,-12(fp)
 50842fc:	e1bffe15 	stw	r6,-8(fp)
 5084300:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 5084304:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 5084308:	e0bffd17 	ldw	r2,-12(fp)
 508430c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 5084310:	00003706 	br	50843f0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 5084314:	e0bffc17 	ldw	r2,-16(fp)
 5084318:	10800c17 	ldw	r2,48(r2)
 508431c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 5084320:	e0bffc17 	ldw	r2,-16(fp)
 5084324:	10800d17 	ldw	r2,52(r2)
 5084328:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 508432c:	e0fff917 	ldw	r3,-28(fp)
 5084330:	e0bff517 	ldw	r2,-44(fp)
 5084334:	1880062e 	bgeu	r3,r2,5084350 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 5084338:	e0fff517 	ldw	r3,-44(fp)
 508433c:	e0bff917 	ldw	r2,-28(fp)
 5084340:	1885c83a 	sub	r2,r3,r2
 5084344:	10bfffc4 	addi	r2,r2,-1
 5084348:	e0bff615 	stw	r2,-40(fp)
 508434c:	00000b06 	br	508437c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 5084350:	e0bff517 	ldw	r2,-44(fp)
 5084354:	10000526 	beq	r2,zero,508436c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 5084358:	00c20004 	movi	r3,2048
 508435c:	e0bff917 	ldw	r2,-28(fp)
 5084360:	1885c83a 	sub	r2,r3,r2
 5084364:	e0bff615 	stw	r2,-40(fp)
 5084368:	00000406 	br	508437c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 508436c:	00c1ffc4 	movi	r3,2047
 5084370:	e0bff917 	ldw	r2,-28(fp)
 5084374:	1885c83a 	sub	r2,r3,r2
 5084378:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 508437c:	e0bff617 	ldw	r2,-40(fp)
 5084380:	10001e26 	beq	r2,zero,50843fc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 5084384:	e0fffe17 	ldw	r3,-8(fp)
 5084388:	e0bff617 	ldw	r2,-40(fp)
 508438c:	1880022e 	bgeu	r3,r2,5084398 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 5084390:	e0bffe17 	ldw	r2,-8(fp)
 5084394:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 5084398:	e0bffc17 	ldw	r2,-16(fp)
 508439c:	10c20e04 	addi	r3,r2,2104
 50843a0:	e0bff917 	ldw	r2,-28(fp)
 50843a4:	1885883a 	add	r2,r3,r2
 50843a8:	e1bff617 	ldw	r6,-40(fp)
 50843ac:	e17ffd17 	ldw	r5,-12(fp)
 50843b0:	1009883a 	mov	r4,r2
 50843b4:	50817040 	call	5081704 <memcpy>
      ptr   += n;
 50843b8:	e0fffd17 	ldw	r3,-12(fp)
 50843bc:	e0bff617 	ldw	r2,-40(fp)
 50843c0:	1885883a 	add	r2,r3,r2
 50843c4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 50843c8:	e0fffe17 	ldw	r3,-8(fp)
 50843cc:	e0bff617 	ldw	r2,-40(fp)
 50843d0:	1885c83a 	sub	r2,r3,r2
 50843d4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 50843d8:	e0fff917 	ldw	r3,-28(fp)
 50843dc:	e0bff617 	ldw	r2,-40(fp)
 50843e0:	1885883a 	add	r2,r3,r2
 50843e4:	10c1ffcc 	andi	r3,r2,2047
 50843e8:	e0bffc17 	ldw	r2,-16(fp)
 50843ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 50843f0:	e0bffe17 	ldw	r2,-8(fp)
 50843f4:	00bfc716 	blt	zero,r2,5084314 <__flash_rwdata_start+0xffffea90>
 50843f8:	00000106 	br	5084400 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 50843fc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5084400:	0005303a 	rdctl	r2,status
 5084404:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5084408:	e0fffb17 	ldw	r3,-20(fp)
 508440c:	00bfff84 	movi	r2,-2
 5084410:	1884703a 	and	r2,r3,r2
 5084414:	1001703a 	wrctl	status,r2
  
  return context;
 5084418:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 508441c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 5084420:	e0bffc17 	ldw	r2,-16(fp)
 5084424:	10800817 	ldw	r2,32(r2)
 5084428:	10c00094 	ori	r3,r2,2
 508442c:	e0bffc17 	ldw	r2,-16(fp)
 5084430:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 5084434:	e0bffc17 	ldw	r2,-16(fp)
 5084438:	10800017 	ldw	r2,0(r2)
 508443c:	10800104 	addi	r2,r2,4
 5084440:	1007883a 	mov	r3,r2
 5084444:	e0bffc17 	ldw	r2,-16(fp)
 5084448:	10800817 	ldw	r2,32(r2)
 508444c:	18800035 	stwio	r2,0(r3)
 5084450:	e0bffa17 	ldw	r2,-24(fp)
 5084454:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5084458:	e0bff817 	ldw	r2,-32(fp)
 508445c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 5084460:	e0bffe17 	ldw	r2,-8(fp)
 5084464:	0080100e 	bge	zero,r2,50844a8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 5084468:	e0bfff17 	ldw	r2,-4(fp)
 508446c:	1090000c 	andi	r2,r2,16384
 5084470:	1000101e 	bne	r2,zero,50844b4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 5084474:	0001883a 	nop
 5084478:	e0bffc17 	ldw	r2,-16(fp)
 508447c:	10c00d17 	ldw	r3,52(r2)
 5084480:	e0bff517 	ldw	r2,-44(fp)
 5084484:	1880051e 	bne	r3,r2,508449c <altera_avalon_jtag_uart_write+0x1b8>
 5084488:	e0bffc17 	ldw	r2,-16(fp)
 508448c:	10c00917 	ldw	r3,36(r2)
 5084490:	e0bffc17 	ldw	r2,-16(fp)
 5084494:	10800117 	ldw	r2,4(r2)
 5084498:	18bff736 	bltu	r3,r2,5084478 <__flash_rwdata_start+0xffffebf4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 508449c:	e0bffc17 	ldw	r2,-16(fp)
 50844a0:	10800917 	ldw	r2,36(r2)
 50844a4:	1000051e 	bne	r2,zero,50844bc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 50844a8:	e0bffe17 	ldw	r2,-8(fp)
 50844ac:	00bfd016 	blt	zero,r2,50843f0 <__flash_rwdata_start+0xffffeb6c>
 50844b0:	00000306 	br	50844c0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 50844b4:	0001883a 	nop
 50844b8:	00000106 	br	50844c0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 50844bc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 50844c0:	e0fffd17 	ldw	r3,-12(fp)
 50844c4:	e0bff717 	ldw	r2,-36(fp)
 50844c8:	18800426 	beq	r3,r2,50844dc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 50844cc:	e0fffd17 	ldw	r3,-12(fp)
 50844d0:	e0bff717 	ldw	r2,-36(fp)
 50844d4:	1885c83a 	sub	r2,r3,r2
 50844d8:	00000606 	br	50844f4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 50844dc:	e0bfff17 	ldw	r2,-4(fp)
 50844e0:	1090000c 	andi	r2,r2,16384
 50844e4:	10000226 	beq	r2,zero,50844f0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 50844e8:	00bffd44 	movi	r2,-11
 50844ec:	00000106 	br	50844f4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 50844f0:	00bffec4 	movi	r2,-5
}
 50844f4:	e037883a 	mov	sp,fp
 50844f8:	dfc00117 	ldw	ra,4(sp)
 50844fc:	df000017 	ldw	fp,0(sp)
 5084500:	dec00204 	addi	sp,sp,8
 5084504:	f800283a 	ret

05084508 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 5084508:	defffa04 	addi	sp,sp,-24
 508450c:	dfc00515 	stw	ra,20(sp)
 5084510:	df000415 	stw	fp,16(sp)
 5084514:	df000404 	addi	fp,sp,16
 5084518:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 508451c:	0007883a 	mov	r3,zero
 5084520:	e0bfff17 	ldw	r2,-4(fp)
 5084524:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 5084528:	e0bfff17 	ldw	r2,-4(fp)
 508452c:	10800104 	addi	r2,r2,4
 5084530:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5084534:	0005303a 	rdctl	r2,status
 5084538:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508453c:	e0fffd17 	ldw	r3,-12(fp)
 5084540:	00bfff84 	movi	r2,-2
 5084544:	1884703a 	and	r2,r3,r2
 5084548:	1001703a 	wrctl	status,r2
  
  return context;
 508454c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 5084550:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 5084554:	50850140 	call	5085014 <alt_tick>
 5084558:	e0bffc17 	ldw	r2,-16(fp)
 508455c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5084560:	e0bffe17 	ldw	r2,-8(fp)
 5084564:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 5084568:	0001883a 	nop
 508456c:	e037883a 	mov	sp,fp
 5084570:	dfc00117 	ldw	ra,4(sp)
 5084574:	df000017 	ldw	fp,0(sp)
 5084578:	dec00204 	addi	sp,sp,8
 508457c:	f800283a 	ret

05084580 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 5084580:	defff804 	addi	sp,sp,-32
 5084584:	dfc00715 	stw	ra,28(sp)
 5084588:	df000615 	stw	fp,24(sp)
 508458c:	df000604 	addi	fp,sp,24
 5084590:	e13ffc15 	stw	r4,-16(fp)
 5084594:	e17ffd15 	stw	r5,-12(fp)
 5084598:	e1bffe15 	stw	r6,-8(fp)
 508459c:	e1ffff15 	stw	r7,-4(fp)
 50845a0:	e0bfff17 	ldw	r2,-4(fp)
 50845a4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 50845a8:	d0a01617 	ldw	r2,-32680(gp)
 50845ac:	1000021e 	bne	r2,zero,50845b8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 50845b0:	e0bffb17 	ldw	r2,-20(fp)
 50845b4:	d0a01615 	stw	r2,-32680(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 50845b8:	e0bffc17 	ldw	r2,-16(fp)
 50845bc:	10800104 	addi	r2,r2,4
 50845c0:	00c001c4 	movi	r3,7
 50845c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 50845c8:	d8000015 	stw	zero,0(sp)
 50845cc:	e1fffc17 	ldw	r7,-16(fp)
 50845d0:	01814234 	movhi	r6,1288
 50845d4:	31914204 	addi	r6,r6,17672
 50845d8:	e17ffe17 	ldw	r5,-8(fp)
 50845dc:	e13ffd17 	ldw	r4,-12(fp)
 50845e0:	50849440 	call	5084944 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 50845e4:	0001883a 	nop
 50845e8:	e037883a 	mov	sp,fp
 50845ec:	dfc00117 	ldw	ra,4(sp)
 50845f0:	df000017 	ldw	fp,0(sp)
 50845f4:	dec00204 	addi	sp,sp,8
 50845f8:	f800283a 	ret

050845fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 50845fc:	defff504 	addi	sp,sp,-44
 5084600:	df000a15 	stw	fp,40(sp)
 5084604:	df000a04 	addi	fp,sp,40
 5084608:	e13ffc15 	stw	r4,-16(fp)
 508460c:	e17ffd15 	stw	r5,-12(fp)
 5084610:	e1bffe15 	stw	r6,-8(fp)
 5084614:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 5084618:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 508461c:	d0a01617 	ldw	r2,-32680(gp)
  
  if (alt_ticks_per_second ())
 5084620:	10003c26 	beq	r2,zero,5084714 <alt_alarm_start+0x118>
  {
    if (alarm)
 5084624:	e0bffc17 	ldw	r2,-16(fp)
 5084628:	10003826 	beq	r2,zero,508470c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 508462c:	e0bffc17 	ldw	r2,-16(fp)
 5084630:	e0fffe17 	ldw	r3,-8(fp)
 5084634:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 5084638:	e0bffc17 	ldw	r2,-16(fp)
 508463c:	e0ffff17 	ldw	r3,-4(fp)
 5084640:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5084644:	0005303a 	rdctl	r2,status
 5084648:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 508464c:	e0fff917 	ldw	r3,-28(fp)
 5084650:	00bfff84 	movi	r2,-2
 5084654:	1884703a 	and	r2,r3,r2
 5084658:	1001703a 	wrctl	status,r2
  
  return context;
 508465c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 5084660:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 5084664:	d0a01717 	ldw	r2,-32676(gp)
      
      current_nticks = alt_nticks();
 5084668:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 508466c:	e0fffd17 	ldw	r3,-12(fp)
 5084670:	e0bff617 	ldw	r2,-40(fp)
 5084674:	1885883a 	add	r2,r3,r2
 5084678:	10c00044 	addi	r3,r2,1
 508467c:	e0bffc17 	ldw	r2,-16(fp)
 5084680:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 5084684:	e0bffc17 	ldw	r2,-16(fp)
 5084688:	10c00217 	ldw	r3,8(r2)
 508468c:	e0bff617 	ldw	r2,-40(fp)
 5084690:	1880042e 	bgeu	r3,r2,50846a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 5084694:	e0bffc17 	ldw	r2,-16(fp)
 5084698:	00c00044 	movi	r3,1
 508469c:	10c00405 	stb	r3,16(r2)
 50846a0:	00000206 	br	50846ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 50846a4:	e0bffc17 	ldw	r2,-16(fp)
 50846a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 50846ac:	e0bffc17 	ldw	r2,-16(fp)
 50846b0:	d0e00c04 	addi	r3,gp,-32720
 50846b4:	e0fffa15 	stw	r3,-24(fp)
 50846b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 50846bc:	e0bffb17 	ldw	r2,-20(fp)
 50846c0:	e0fffa17 	ldw	r3,-24(fp)
 50846c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 50846c8:	e0bffa17 	ldw	r2,-24(fp)
 50846cc:	10c00017 	ldw	r3,0(r2)
 50846d0:	e0bffb17 	ldw	r2,-20(fp)
 50846d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 50846d8:	e0bffa17 	ldw	r2,-24(fp)
 50846dc:	10800017 	ldw	r2,0(r2)
 50846e0:	e0fffb17 	ldw	r3,-20(fp)
 50846e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 50846e8:	e0bffa17 	ldw	r2,-24(fp)
 50846ec:	e0fffb17 	ldw	r3,-20(fp)
 50846f0:	10c00015 	stw	r3,0(r2)
 50846f4:	e0bff817 	ldw	r2,-32(fp)
 50846f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50846fc:	e0bff717 	ldw	r2,-36(fp)
 5084700:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 5084704:	0005883a 	mov	r2,zero
 5084708:	00000306 	br	5084718 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 508470c:	00bffa84 	movi	r2,-22
 5084710:	00000106 	br	5084718 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 5084714:	00bfde84 	movi	r2,-134
  }
}
 5084718:	e037883a 	mov	sp,fp
 508471c:	df000017 	ldw	fp,0(sp)
 5084720:	dec00104 	addi	sp,sp,4
 5084724:	f800283a 	ret

05084728 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 5084728:	defffe04 	addi	sp,sp,-8
 508472c:	df000115 	stw	fp,4(sp)
 5084730:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 5084734:	e03fff15 	stw	zero,-4(fp)
 5084738:	00000506 	br	5084750 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 508473c:	e0bfff17 	ldw	r2,-4(fp)
 5084740:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 5084744:	e0bfff17 	ldw	r2,-4(fp)
 5084748:	10800804 	addi	r2,r2,32
 508474c:	e0bfff15 	stw	r2,-4(fp)
 5084750:	e0bfff17 	ldw	r2,-4(fp)
 5084754:	10820030 	cmpltui	r2,r2,2048
 5084758:	103ff81e 	bne	r2,zero,508473c <__flash_rwdata_start+0xffffeeb8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 508475c:	0001883a 	nop
 5084760:	e037883a 	mov	sp,fp
 5084764:	df000017 	ldw	fp,0(sp)
 5084768:	dec00104 	addi	sp,sp,4
 508476c:	f800283a 	ret

05084770 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5084770:	defffe04 	addi	sp,sp,-8
 5084774:	dfc00115 	stw	ra,4(sp)
 5084778:	df000015 	stw	fp,0(sp)
 508477c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5084780:	d0a00917 	ldw	r2,-32732(gp)
 5084784:	10000326 	beq	r2,zero,5084794 <alt_get_errno+0x24>
 5084788:	d0a00917 	ldw	r2,-32732(gp)
 508478c:	103ee83a 	callr	r2
 5084790:	00000106 	br	5084798 <alt_get_errno+0x28>
 5084794:	d0a01104 	addi	r2,gp,-32700
}
 5084798:	e037883a 	mov	sp,fp
 508479c:	dfc00117 	ldw	ra,4(sp)
 50847a0:	df000017 	ldw	fp,0(sp)
 50847a4:	dec00204 	addi	sp,sp,8
 50847a8:	f800283a 	ret

050847ac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 50847ac:	defffa04 	addi	sp,sp,-24
 50847b0:	dfc00515 	stw	ra,20(sp)
 50847b4:	df000415 	stw	fp,16(sp)
 50847b8:	df000404 	addi	fp,sp,16
 50847bc:	e13ffe15 	stw	r4,-8(fp)
 50847c0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 50847c4:	e0bffe17 	ldw	r2,-8(fp)
 50847c8:	10000326 	beq	r2,zero,50847d8 <alt_dev_llist_insert+0x2c>
 50847cc:	e0bffe17 	ldw	r2,-8(fp)
 50847d0:	10800217 	ldw	r2,8(r2)
 50847d4:	1000061e 	bne	r2,zero,50847f0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 50847d8:	50847700 	call	5084770 <alt_get_errno>
 50847dc:	1007883a 	mov	r3,r2
 50847e0:	00800584 	movi	r2,22
 50847e4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 50847e8:	00bffa84 	movi	r2,-22
 50847ec:	00001306 	br	508483c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 50847f0:	e0bffe17 	ldw	r2,-8(fp)
 50847f4:	e0ffff17 	ldw	r3,-4(fp)
 50847f8:	e0fffc15 	stw	r3,-16(fp)
 50847fc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 5084800:	e0bffd17 	ldw	r2,-12(fp)
 5084804:	e0fffc17 	ldw	r3,-16(fp)
 5084808:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 508480c:	e0bffc17 	ldw	r2,-16(fp)
 5084810:	10c00017 	ldw	r3,0(r2)
 5084814:	e0bffd17 	ldw	r2,-12(fp)
 5084818:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 508481c:	e0bffc17 	ldw	r2,-16(fp)
 5084820:	10800017 	ldw	r2,0(r2)
 5084824:	e0fffd17 	ldw	r3,-12(fp)
 5084828:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 508482c:	e0bffc17 	ldw	r2,-16(fp)
 5084830:	e0fffd17 	ldw	r3,-12(fp)
 5084834:	10c00015 	stw	r3,0(r2)

  return 0;  
 5084838:	0005883a 	mov	r2,zero
}
 508483c:	e037883a 	mov	sp,fp
 5084840:	dfc00117 	ldw	ra,4(sp)
 5084844:	df000017 	ldw	fp,0(sp)
 5084848:	dec00204 	addi	sp,sp,8
 508484c:	f800283a 	ret

05084850 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 5084850:	defffd04 	addi	sp,sp,-12
 5084854:	dfc00215 	stw	ra,8(sp)
 5084858:	df000115 	stw	fp,4(sp)
 508485c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 5084860:	00814234 	movhi	r2,1288
 5084864:	10960e04 	addi	r2,r2,22584
 5084868:	e0bfff15 	stw	r2,-4(fp)
 508486c:	00000606 	br	5084888 <_do_ctors+0x38>
        (*ctor) (); 
 5084870:	e0bfff17 	ldw	r2,-4(fp)
 5084874:	10800017 	ldw	r2,0(r2)
 5084878:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 508487c:	e0bfff17 	ldw	r2,-4(fp)
 5084880:	10bfff04 	addi	r2,r2,-4
 5084884:	e0bfff15 	stw	r2,-4(fp)
 5084888:	e0ffff17 	ldw	r3,-4(fp)
 508488c:	00814234 	movhi	r2,1288
 5084890:	10960f04 	addi	r2,r2,22588
 5084894:	18bff62e 	bgeu	r3,r2,5084870 <__flash_rwdata_start+0xffffefec>
        (*ctor) (); 
}
 5084898:	0001883a 	nop
 508489c:	e037883a 	mov	sp,fp
 50848a0:	dfc00117 	ldw	ra,4(sp)
 50848a4:	df000017 	ldw	fp,0(sp)
 50848a8:	dec00204 	addi	sp,sp,8
 50848ac:	f800283a 	ret

050848b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 50848b0:	defffd04 	addi	sp,sp,-12
 50848b4:	dfc00215 	stw	ra,8(sp)
 50848b8:	df000115 	stw	fp,4(sp)
 50848bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 50848c0:	00814234 	movhi	r2,1288
 50848c4:	10960e04 	addi	r2,r2,22584
 50848c8:	e0bfff15 	stw	r2,-4(fp)
 50848cc:	00000606 	br	50848e8 <_do_dtors+0x38>
        (*dtor) (); 
 50848d0:	e0bfff17 	ldw	r2,-4(fp)
 50848d4:	10800017 	ldw	r2,0(r2)
 50848d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 50848dc:	e0bfff17 	ldw	r2,-4(fp)
 50848e0:	10bfff04 	addi	r2,r2,-4
 50848e4:	e0bfff15 	stw	r2,-4(fp)
 50848e8:	e0ffff17 	ldw	r3,-4(fp)
 50848ec:	00814234 	movhi	r2,1288
 50848f0:	10960f04 	addi	r2,r2,22588
 50848f4:	18bff62e 	bgeu	r3,r2,50848d0 <__flash_rwdata_start+0xfffff04c>
        (*dtor) (); 
}
 50848f8:	0001883a 	nop
 50848fc:	e037883a 	mov	sp,fp
 5084900:	dfc00117 	ldw	ra,4(sp)
 5084904:	df000017 	ldw	fp,0(sp)
 5084908:	dec00204 	addi	sp,sp,8
 508490c:	f800283a 	ret

05084910 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 5084910:	defffe04 	addi	sp,sp,-8
 5084914:	dfc00115 	stw	ra,4(sp)
 5084918:	df000015 	stw	fp,0(sp)
 508491c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 5084920:	01440004 	movi	r5,4096
 5084924:	0009883a 	mov	r4,zero
 5084928:	508537c0 	call	508537c <alt_icache_flush>
#endif
}
 508492c:	0001883a 	nop
 5084930:	e037883a 	mov	sp,fp
 5084934:	dfc00117 	ldw	ra,4(sp)
 5084938:	df000017 	ldw	fp,0(sp)
 508493c:	dec00204 	addi	sp,sp,8
 5084940:	f800283a 	ret

05084944 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 5084944:	defff904 	addi	sp,sp,-28
 5084948:	dfc00615 	stw	ra,24(sp)
 508494c:	df000515 	stw	fp,20(sp)
 5084950:	df000504 	addi	fp,sp,20
 5084954:	e13ffc15 	stw	r4,-16(fp)
 5084958:	e17ffd15 	stw	r5,-12(fp)
 508495c:	e1bffe15 	stw	r6,-8(fp)
 5084960:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 5084964:	e0800217 	ldw	r2,8(fp)
 5084968:	d8800015 	stw	r2,0(sp)
 508496c:	e1ffff17 	ldw	r7,-4(fp)
 5084970:	e1bffe17 	ldw	r6,-8(fp)
 5084974:	e17ffd17 	ldw	r5,-12(fp)
 5084978:	e13ffc17 	ldw	r4,-16(fp)
 508497c:	5084af40 	call	5084af4 <alt_iic_isr_register>
}  
 5084980:	e037883a 	mov	sp,fp
 5084984:	dfc00117 	ldw	ra,4(sp)
 5084988:	df000017 	ldw	fp,0(sp)
 508498c:	dec00204 	addi	sp,sp,8
 5084990:	f800283a 	ret

05084994 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 5084994:	defff904 	addi	sp,sp,-28
 5084998:	df000615 	stw	fp,24(sp)
 508499c:	df000604 	addi	fp,sp,24
 50849a0:	e13ffe15 	stw	r4,-8(fp)
 50849a4:	e17fff15 	stw	r5,-4(fp)
 50849a8:	e0bfff17 	ldw	r2,-4(fp)
 50849ac:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 50849b0:	0005303a 	rdctl	r2,status
 50849b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 50849b8:	e0fffb17 	ldw	r3,-20(fp)
 50849bc:	00bfff84 	movi	r2,-2
 50849c0:	1884703a 	and	r2,r3,r2
 50849c4:	1001703a 	wrctl	status,r2
  
  return context;
 50849c8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 50849cc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 50849d0:	00c00044 	movi	r3,1
 50849d4:	e0bffa17 	ldw	r2,-24(fp)
 50849d8:	1884983a 	sll	r2,r3,r2
 50849dc:	1007883a 	mov	r3,r2
 50849e0:	d0a01517 	ldw	r2,-32684(gp)
 50849e4:	1884b03a 	or	r2,r3,r2
 50849e8:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 50849ec:	d0a01517 	ldw	r2,-32684(gp)
 50849f0:	100170fa 	wrctl	ienable,r2
 50849f4:	e0bffc17 	ldw	r2,-16(fp)
 50849f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 50849fc:	e0bffd17 	ldw	r2,-12(fp)
 5084a00:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5084a04:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 5084a08:	0001883a 	nop
}
 5084a0c:	e037883a 	mov	sp,fp
 5084a10:	df000017 	ldw	fp,0(sp)
 5084a14:	dec00104 	addi	sp,sp,4
 5084a18:	f800283a 	ret

05084a1c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 5084a1c:	defff904 	addi	sp,sp,-28
 5084a20:	df000615 	stw	fp,24(sp)
 5084a24:	df000604 	addi	fp,sp,24
 5084a28:	e13ffe15 	stw	r4,-8(fp)
 5084a2c:	e17fff15 	stw	r5,-4(fp)
 5084a30:	e0bfff17 	ldw	r2,-4(fp)
 5084a34:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5084a38:	0005303a 	rdctl	r2,status
 5084a3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5084a40:	e0fffb17 	ldw	r3,-20(fp)
 5084a44:	00bfff84 	movi	r2,-2
 5084a48:	1884703a 	and	r2,r3,r2
 5084a4c:	1001703a 	wrctl	status,r2
  
  return context;
 5084a50:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 5084a54:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 5084a58:	00c00044 	movi	r3,1
 5084a5c:	e0bffa17 	ldw	r2,-24(fp)
 5084a60:	1884983a 	sll	r2,r3,r2
 5084a64:	0084303a 	nor	r2,zero,r2
 5084a68:	1007883a 	mov	r3,r2
 5084a6c:	d0a01517 	ldw	r2,-32684(gp)
 5084a70:	1884703a 	and	r2,r3,r2
 5084a74:	d0a01515 	stw	r2,-32684(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 5084a78:	d0a01517 	ldw	r2,-32684(gp)
 5084a7c:	100170fa 	wrctl	ienable,r2
 5084a80:	e0bffc17 	ldw	r2,-16(fp)
 5084a84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5084a88:	e0bffd17 	ldw	r2,-12(fp)
 5084a8c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 5084a90:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 5084a94:	0001883a 	nop
}
 5084a98:	e037883a 	mov	sp,fp
 5084a9c:	df000017 	ldw	fp,0(sp)
 5084aa0:	dec00104 	addi	sp,sp,4
 5084aa4:	f800283a 	ret

05084aa8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 5084aa8:	defffc04 	addi	sp,sp,-16
 5084aac:	df000315 	stw	fp,12(sp)
 5084ab0:	df000304 	addi	fp,sp,12
 5084ab4:	e13ffe15 	stw	r4,-8(fp)
 5084ab8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 5084abc:	000530fa 	rdctl	r2,ienable
 5084ac0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 5084ac4:	00c00044 	movi	r3,1
 5084ac8:	e0bfff17 	ldw	r2,-4(fp)
 5084acc:	1884983a 	sll	r2,r3,r2
 5084ad0:	1007883a 	mov	r3,r2
 5084ad4:	e0bffd17 	ldw	r2,-12(fp)
 5084ad8:	1884703a 	and	r2,r3,r2
 5084adc:	1004c03a 	cmpne	r2,r2,zero
 5084ae0:	10803fcc 	andi	r2,r2,255
}
 5084ae4:	e037883a 	mov	sp,fp
 5084ae8:	df000017 	ldw	fp,0(sp)
 5084aec:	dec00104 	addi	sp,sp,4
 5084af0:	f800283a 	ret

05084af4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 5084af4:	defff504 	addi	sp,sp,-44
 5084af8:	dfc00a15 	stw	ra,40(sp)
 5084afc:	df000915 	stw	fp,36(sp)
 5084b00:	df000904 	addi	fp,sp,36
 5084b04:	e13ffc15 	stw	r4,-16(fp)
 5084b08:	e17ffd15 	stw	r5,-12(fp)
 5084b0c:	e1bffe15 	stw	r6,-8(fp)
 5084b10:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 5084b14:	00bffa84 	movi	r2,-22
 5084b18:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 5084b1c:	e0bffd17 	ldw	r2,-12(fp)
 5084b20:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 5084b24:	e0bff817 	ldw	r2,-32(fp)
 5084b28:	10800808 	cmpgei	r2,r2,32
 5084b2c:	1000271e 	bne	r2,zero,5084bcc <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5084b30:	0005303a 	rdctl	r2,status
 5084b34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5084b38:	e0fffb17 	ldw	r3,-20(fp)
 5084b3c:	00bfff84 	movi	r2,-2
 5084b40:	1884703a 	and	r2,r3,r2
 5084b44:	1001703a 	wrctl	status,r2
  
  return context;
 5084b48:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 5084b4c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 5084b50:	00800034 	movhi	r2,0
 5084b54:	1086c204 	addi	r2,r2,6920
 5084b58:	e0fff817 	ldw	r3,-32(fp)
 5084b5c:	180690fa 	slli	r3,r3,3
 5084b60:	10c5883a 	add	r2,r2,r3
 5084b64:	e0fffe17 	ldw	r3,-8(fp)
 5084b68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 5084b6c:	00800034 	movhi	r2,0
 5084b70:	1086c204 	addi	r2,r2,6920
 5084b74:	e0fff817 	ldw	r3,-32(fp)
 5084b78:	180690fa 	slli	r3,r3,3
 5084b7c:	10c5883a 	add	r2,r2,r3
 5084b80:	10800104 	addi	r2,r2,4
 5084b84:	e0ffff17 	ldw	r3,-4(fp)
 5084b88:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 5084b8c:	e0bffe17 	ldw	r2,-8(fp)
 5084b90:	10000526 	beq	r2,zero,5084ba8 <alt_iic_isr_register+0xb4>
 5084b94:	e0bff817 	ldw	r2,-32(fp)
 5084b98:	100b883a 	mov	r5,r2
 5084b9c:	e13ffc17 	ldw	r4,-16(fp)
 5084ba0:	50849940 	call	5084994 <alt_ic_irq_enable>
 5084ba4:	00000406 	br	5084bb8 <alt_iic_isr_register+0xc4>
 5084ba8:	e0bff817 	ldw	r2,-32(fp)
 5084bac:	100b883a 	mov	r5,r2
 5084bb0:	e13ffc17 	ldw	r4,-16(fp)
 5084bb4:	5084a1c0 	call	5084a1c <alt_ic_irq_disable>
 5084bb8:	e0bff715 	stw	r2,-36(fp)
 5084bbc:	e0bffa17 	ldw	r2,-24(fp)
 5084bc0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5084bc4:	e0bff917 	ldw	r2,-28(fp)
 5084bc8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 5084bcc:	e0bff717 	ldw	r2,-36(fp)
}
 5084bd0:	e037883a 	mov	sp,fp
 5084bd4:	dfc00117 	ldw	ra,4(sp)
 5084bd8:	df000017 	ldw	fp,0(sp)
 5084bdc:	dec00204 	addi	sp,sp,8
 5084be0:	f800283a 	ret

05084be4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 5084be4:	defff904 	addi	sp,sp,-28
 5084be8:	dfc00615 	stw	ra,24(sp)
 5084bec:	df000515 	stw	fp,20(sp)
 5084bf0:	df000504 	addi	fp,sp,20
 5084bf4:	e13ffc15 	stw	r4,-16(fp)
 5084bf8:	e17ffd15 	stw	r5,-12(fp)
 5084bfc:	e1bffe15 	stw	r6,-8(fp)
 5084c00:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 5084c04:	e1bfff17 	ldw	r6,-4(fp)
 5084c08:	e17ffe17 	ldw	r5,-8(fp)
 5084c0c:	e13ffd17 	ldw	r4,-12(fp)
 5084c10:	5084e240 	call	5084e24 <open>
 5084c14:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 5084c18:	e0bffb17 	ldw	r2,-20(fp)
 5084c1c:	10001c16 	blt	r2,zero,5084c90 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 5084c20:	00800034 	movhi	r2,0
 5084c24:	10822704 	addi	r2,r2,2204
 5084c28:	e0fffb17 	ldw	r3,-20(fp)
 5084c2c:	18c00324 	muli	r3,r3,12
 5084c30:	10c5883a 	add	r2,r2,r3
 5084c34:	10c00017 	ldw	r3,0(r2)
 5084c38:	e0bffc17 	ldw	r2,-16(fp)
 5084c3c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 5084c40:	00800034 	movhi	r2,0
 5084c44:	10822704 	addi	r2,r2,2204
 5084c48:	e0fffb17 	ldw	r3,-20(fp)
 5084c4c:	18c00324 	muli	r3,r3,12
 5084c50:	10c5883a 	add	r2,r2,r3
 5084c54:	10800104 	addi	r2,r2,4
 5084c58:	10c00017 	ldw	r3,0(r2)
 5084c5c:	e0bffc17 	ldw	r2,-16(fp)
 5084c60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 5084c64:	00800034 	movhi	r2,0
 5084c68:	10822704 	addi	r2,r2,2204
 5084c6c:	e0fffb17 	ldw	r3,-20(fp)
 5084c70:	18c00324 	muli	r3,r3,12
 5084c74:	10c5883a 	add	r2,r2,r3
 5084c78:	10800204 	addi	r2,r2,8
 5084c7c:	10c00017 	ldw	r3,0(r2)
 5084c80:	e0bffc17 	ldw	r2,-16(fp)
 5084c84:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 5084c88:	e13ffb17 	ldw	r4,-20(fp)
 5084c8c:	50837880 	call	5083788 <alt_release_fd>
  }
} 
 5084c90:	0001883a 	nop
 5084c94:	e037883a 	mov	sp,fp
 5084c98:	dfc00117 	ldw	ra,4(sp)
 5084c9c:	df000017 	ldw	fp,0(sp)
 5084ca0:	dec00204 	addi	sp,sp,8
 5084ca4:	f800283a 	ret

05084ca8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 5084ca8:	defffb04 	addi	sp,sp,-20
 5084cac:	dfc00415 	stw	ra,16(sp)
 5084cb0:	df000315 	stw	fp,12(sp)
 5084cb4:	df000304 	addi	fp,sp,12
 5084cb8:	e13ffd15 	stw	r4,-12(fp)
 5084cbc:	e17ffe15 	stw	r5,-8(fp)
 5084cc0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 5084cc4:	01c07fc4 	movi	r7,511
 5084cc8:	01800044 	movi	r6,1
 5084ccc:	e17ffd17 	ldw	r5,-12(fp)
 5084cd0:	01000034 	movhi	r4,0
 5084cd4:	21022a04 	addi	r4,r4,2216
 5084cd8:	5084be40 	call	5084be4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 5084cdc:	01c07fc4 	movi	r7,511
 5084ce0:	000d883a 	mov	r6,zero
 5084ce4:	e17ffe17 	ldw	r5,-8(fp)
 5084ce8:	01000034 	movhi	r4,0
 5084cec:	21022704 	addi	r4,r4,2204
 5084cf0:	5084be40 	call	5084be4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 5084cf4:	01c07fc4 	movi	r7,511
 5084cf8:	01800044 	movi	r6,1
 5084cfc:	e17fff17 	ldw	r5,-4(fp)
 5084d00:	01000034 	movhi	r4,0
 5084d04:	21022d04 	addi	r4,r4,2228
 5084d08:	5084be40 	call	5084be4 <alt_open_fd>
}  
 5084d0c:	0001883a 	nop
 5084d10:	e037883a 	mov	sp,fp
 5084d14:	dfc00117 	ldw	ra,4(sp)
 5084d18:	df000017 	ldw	fp,0(sp)
 5084d1c:	dec00204 	addi	sp,sp,8
 5084d20:	f800283a 	ret

05084d24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 5084d24:	defffe04 	addi	sp,sp,-8
 5084d28:	dfc00115 	stw	ra,4(sp)
 5084d2c:	df000015 	stw	fp,0(sp)
 5084d30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 5084d34:	d0a00917 	ldw	r2,-32732(gp)
 5084d38:	10000326 	beq	r2,zero,5084d48 <alt_get_errno+0x24>
 5084d3c:	d0a00917 	ldw	r2,-32732(gp)
 5084d40:	103ee83a 	callr	r2
 5084d44:	00000106 	br	5084d4c <alt_get_errno+0x28>
 5084d48:	d0a01104 	addi	r2,gp,-32700
}
 5084d4c:	e037883a 	mov	sp,fp
 5084d50:	dfc00117 	ldw	ra,4(sp)
 5084d54:	df000017 	ldw	fp,0(sp)
 5084d58:	dec00204 	addi	sp,sp,8
 5084d5c:	f800283a 	ret

05084d60 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 5084d60:	defffd04 	addi	sp,sp,-12
 5084d64:	df000215 	stw	fp,8(sp)
 5084d68:	df000204 	addi	fp,sp,8
 5084d6c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 5084d70:	e0bfff17 	ldw	r2,-4(fp)
 5084d74:	10800217 	ldw	r2,8(r2)
 5084d78:	10d00034 	orhi	r3,r2,16384
 5084d7c:	e0bfff17 	ldw	r2,-4(fp)
 5084d80:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5084d84:	e03ffe15 	stw	zero,-8(fp)
 5084d88:	00001d06 	br	5084e00 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5084d8c:	00800034 	movhi	r2,0
 5084d90:	10822704 	addi	r2,r2,2204
 5084d94:	e0fffe17 	ldw	r3,-8(fp)
 5084d98:	18c00324 	muli	r3,r3,12
 5084d9c:	10c5883a 	add	r2,r2,r3
 5084da0:	10c00017 	ldw	r3,0(r2)
 5084da4:	e0bfff17 	ldw	r2,-4(fp)
 5084da8:	10800017 	ldw	r2,0(r2)
 5084dac:	1880111e 	bne	r3,r2,5084df4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5084db0:	00800034 	movhi	r2,0
 5084db4:	10822704 	addi	r2,r2,2204
 5084db8:	e0fffe17 	ldw	r3,-8(fp)
 5084dbc:	18c00324 	muli	r3,r3,12
 5084dc0:	10c5883a 	add	r2,r2,r3
 5084dc4:	10800204 	addi	r2,r2,8
 5084dc8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 5084dcc:	1000090e 	bge	r2,zero,5084df4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 5084dd0:	e0bffe17 	ldw	r2,-8(fp)
 5084dd4:	10c00324 	muli	r3,r2,12
 5084dd8:	00800034 	movhi	r2,0
 5084ddc:	10822704 	addi	r2,r2,2204
 5084de0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 5084de4:	e0bfff17 	ldw	r2,-4(fp)
 5084de8:	18800226 	beq	r3,r2,5084df4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 5084dec:	00bffcc4 	movi	r2,-13
 5084df0:	00000806 	br	5084e14 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 5084df4:	e0bffe17 	ldw	r2,-8(fp)
 5084df8:	10800044 	addi	r2,r2,1
 5084dfc:	e0bffe15 	stw	r2,-8(fp)
 5084e00:	d0a00817 	ldw	r2,-32736(gp)
 5084e04:	1007883a 	mov	r3,r2
 5084e08:	e0bffe17 	ldw	r2,-8(fp)
 5084e0c:	18bfdf2e 	bgeu	r3,r2,5084d8c <__flash_rwdata_start+0xfffff508>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 5084e10:	0005883a 	mov	r2,zero
}
 5084e14:	e037883a 	mov	sp,fp
 5084e18:	df000017 	ldw	fp,0(sp)
 5084e1c:	dec00104 	addi	sp,sp,4
 5084e20:	f800283a 	ret

05084e24 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 5084e24:	defff604 	addi	sp,sp,-40
 5084e28:	dfc00915 	stw	ra,36(sp)
 5084e2c:	df000815 	stw	fp,32(sp)
 5084e30:	df000804 	addi	fp,sp,32
 5084e34:	e13ffd15 	stw	r4,-12(fp)
 5084e38:	e17ffe15 	stw	r5,-8(fp)
 5084e3c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 5084e40:	00bfffc4 	movi	r2,-1
 5084e44:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 5084e48:	00bffb44 	movi	r2,-19
 5084e4c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 5084e50:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 5084e54:	d1600604 	addi	r5,gp,-32744
 5084e58:	e13ffd17 	ldw	r4,-12(fp)
 5084e5c:	50851400 	call	5085140 <alt_find_dev>
 5084e60:	e0bff815 	stw	r2,-32(fp)
 5084e64:	e0bff817 	ldw	r2,-32(fp)
 5084e68:	1000051e 	bne	r2,zero,5084e80 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 5084e6c:	e13ffd17 	ldw	r4,-12(fp)
 5084e70:	50851d00 	call	50851d0 <alt_find_file>
 5084e74:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 5084e78:	00800044 	movi	r2,1
 5084e7c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 5084e80:	e0bff817 	ldw	r2,-32(fp)
 5084e84:	10002926 	beq	r2,zero,5084f2c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 5084e88:	e13ff817 	ldw	r4,-32(fp)
 5084e8c:	50852d80 	call	50852d8 <alt_get_fd>
 5084e90:	e0bff915 	stw	r2,-28(fp)
 5084e94:	e0bff917 	ldw	r2,-28(fp)
 5084e98:	1000030e 	bge	r2,zero,5084ea8 <open+0x84>
    {
      status = index;
 5084e9c:	e0bff917 	ldw	r2,-28(fp)
 5084ea0:	e0bffa15 	stw	r2,-24(fp)
 5084ea4:	00002306 	br	5084f34 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 5084ea8:	e0bff917 	ldw	r2,-28(fp)
 5084eac:	10c00324 	muli	r3,r2,12
 5084eb0:	00800034 	movhi	r2,0
 5084eb4:	10822704 	addi	r2,r2,2204
 5084eb8:	1885883a 	add	r2,r3,r2
 5084ebc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 5084ec0:	e0fffe17 	ldw	r3,-8(fp)
 5084ec4:	00900034 	movhi	r2,16384
 5084ec8:	10bfffc4 	addi	r2,r2,-1
 5084ecc:	1886703a 	and	r3,r3,r2
 5084ed0:	e0bffc17 	ldw	r2,-16(fp)
 5084ed4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 5084ed8:	e0bffb17 	ldw	r2,-20(fp)
 5084edc:	1000051e 	bne	r2,zero,5084ef4 <open+0xd0>
 5084ee0:	e13ffc17 	ldw	r4,-16(fp)
 5084ee4:	5084d600 	call	5084d60 <alt_file_locked>
 5084ee8:	e0bffa15 	stw	r2,-24(fp)
 5084eec:	e0bffa17 	ldw	r2,-24(fp)
 5084ef0:	10001016 	blt	r2,zero,5084f34 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 5084ef4:	e0bff817 	ldw	r2,-32(fp)
 5084ef8:	10800317 	ldw	r2,12(r2)
 5084efc:	10000826 	beq	r2,zero,5084f20 <open+0xfc>
 5084f00:	e0bff817 	ldw	r2,-32(fp)
 5084f04:	10800317 	ldw	r2,12(r2)
 5084f08:	e1ffff17 	ldw	r7,-4(fp)
 5084f0c:	e1bffe17 	ldw	r6,-8(fp)
 5084f10:	e17ffd17 	ldw	r5,-12(fp)
 5084f14:	e13ffc17 	ldw	r4,-16(fp)
 5084f18:	103ee83a 	callr	r2
 5084f1c:	00000106 	br	5084f24 <open+0x100>
 5084f20:	0005883a 	mov	r2,zero
 5084f24:	e0bffa15 	stw	r2,-24(fp)
 5084f28:	00000206 	br	5084f34 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 5084f2c:	00bffb44 	movi	r2,-19
 5084f30:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 5084f34:	e0bffa17 	ldw	r2,-24(fp)
 5084f38:	1000090e 	bge	r2,zero,5084f60 <open+0x13c>
  {
    alt_release_fd (index);  
 5084f3c:	e13ff917 	ldw	r4,-28(fp)
 5084f40:	50837880 	call	5083788 <alt_release_fd>
    ALT_ERRNO = -status;
 5084f44:	5084d240 	call	5084d24 <alt_get_errno>
 5084f48:	1007883a 	mov	r3,r2
 5084f4c:	e0bffa17 	ldw	r2,-24(fp)
 5084f50:	0085c83a 	sub	r2,zero,r2
 5084f54:	18800015 	stw	r2,0(r3)
    return -1;
 5084f58:	00bfffc4 	movi	r2,-1
 5084f5c:	00000106 	br	5084f64 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 5084f60:	e0bff917 	ldw	r2,-28(fp)
}
 5084f64:	e037883a 	mov	sp,fp
 5084f68:	dfc00117 	ldw	ra,4(sp)
 5084f6c:	df000017 	ldw	fp,0(sp)
 5084f70:	dec00204 	addi	sp,sp,8
 5084f74:	f800283a 	ret

05084f78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 5084f78:	defffa04 	addi	sp,sp,-24
 5084f7c:	df000515 	stw	fp,20(sp)
 5084f80:	df000504 	addi	fp,sp,20
 5084f84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 5084f88:	0005303a 	rdctl	r2,status
 5084f8c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 5084f90:	e0fffc17 	ldw	r3,-16(fp)
 5084f94:	00bfff84 	movi	r2,-2
 5084f98:	1884703a 	and	r2,r3,r2
 5084f9c:	1001703a 	wrctl	status,r2
  
  return context;
 5084fa0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 5084fa4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 5084fa8:	e0bfff17 	ldw	r2,-4(fp)
 5084fac:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 5084fb0:	e0bffd17 	ldw	r2,-12(fp)
 5084fb4:	10800017 	ldw	r2,0(r2)
 5084fb8:	e0fffd17 	ldw	r3,-12(fp)
 5084fbc:	18c00117 	ldw	r3,4(r3)
 5084fc0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 5084fc4:	e0bffd17 	ldw	r2,-12(fp)
 5084fc8:	10800117 	ldw	r2,4(r2)
 5084fcc:	e0fffd17 	ldw	r3,-12(fp)
 5084fd0:	18c00017 	ldw	r3,0(r3)
 5084fd4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 5084fd8:	e0bffd17 	ldw	r2,-12(fp)
 5084fdc:	e0fffd17 	ldw	r3,-12(fp)
 5084fe0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 5084fe4:	e0bffd17 	ldw	r2,-12(fp)
 5084fe8:	e0fffd17 	ldw	r3,-12(fp)
 5084fec:	10c00015 	stw	r3,0(r2)
 5084ff0:	e0bffb17 	ldw	r2,-20(fp)
 5084ff4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 5084ff8:	e0bffe17 	ldw	r2,-8(fp)
 5084ffc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 5085000:	0001883a 	nop
 5085004:	e037883a 	mov	sp,fp
 5085008:	df000017 	ldw	fp,0(sp)
 508500c:	dec00104 	addi	sp,sp,4
 5085010:	f800283a 	ret

05085014 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 5085014:	defffb04 	addi	sp,sp,-20
 5085018:	dfc00415 	stw	ra,16(sp)
 508501c:	df000315 	stw	fp,12(sp)
 5085020:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 5085024:	d0a00c17 	ldw	r2,-32720(gp)
 5085028:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 508502c:	d0a01717 	ldw	r2,-32676(gp)
 5085030:	10800044 	addi	r2,r2,1
 5085034:	d0a01715 	stw	r2,-32676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 5085038:	00002e06 	br	50850f4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 508503c:	e0bffd17 	ldw	r2,-12(fp)
 5085040:	10800017 	ldw	r2,0(r2)
 5085044:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 5085048:	e0bffd17 	ldw	r2,-12(fp)
 508504c:	10800403 	ldbu	r2,16(r2)
 5085050:	10803fcc 	andi	r2,r2,255
 5085054:	10000426 	beq	r2,zero,5085068 <alt_tick+0x54>
 5085058:	d0a01717 	ldw	r2,-32676(gp)
 508505c:	1000021e 	bne	r2,zero,5085068 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 5085060:	e0bffd17 	ldw	r2,-12(fp)
 5085064:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 5085068:	e0bffd17 	ldw	r2,-12(fp)
 508506c:	10800217 	ldw	r2,8(r2)
 5085070:	d0e01717 	ldw	r3,-32676(gp)
 5085074:	18801d36 	bltu	r3,r2,50850ec <alt_tick+0xd8>
 5085078:	e0bffd17 	ldw	r2,-12(fp)
 508507c:	10800403 	ldbu	r2,16(r2)
 5085080:	10803fcc 	andi	r2,r2,255
 5085084:	1000191e 	bne	r2,zero,50850ec <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 5085088:	e0bffd17 	ldw	r2,-12(fp)
 508508c:	10800317 	ldw	r2,12(r2)
 5085090:	e0fffd17 	ldw	r3,-12(fp)
 5085094:	18c00517 	ldw	r3,20(r3)
 5085098:	1809883a 	mov	r4,r3
 508509c:	103ee83a 	callr	r2
 50850a0:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 50850a4:	e0bfff17 	ldw	r2,-4(fp)
 50850a8:	1000031e 	bne	r2,zero,50850b8 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 50850ac:	e13ffd17 	ldw	r4,-12(fp)
 50850b0:	5084f780 	call	5084f78 <alt_alarm_stop>
 50850b4:	00000d06 	br	50850ec <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 50850b8:	e0bffd17 	ldw	r2,-12(fp)
 50850bc:	10c00217 	ldw	r3,8(r2)
 50850c0:	e0bfff17 	ldw	r2,-4(fp)
 50850c4:	1887883a 	add	r3,r3,r2
 50850c8:	e0bffd17 	ldw	r2,-12(fp)
 50850cc:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 50850d0:	e0bffd17 	ldw	r2,-12(fp)
 50850d4:	10c00217 	ldw	r3,8(r2)
 50850d8:	d0a01717 	ldw	r2,-32676(gp)
 50850dc:	1880032e 	bgeu	r3,r2,50850ec <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 50850e0:	e0bffd17 	ldw	r2,-12(fp)
 50850e4:	00c00044 	movi	r3,1
 50850e8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 50850ec:	e0bffe17 	ldw	r2,-8(fp)
 50850f0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 50850f4:	e0fffd17 	ldw	r3,-12(fp)
 50850f8:	d0a00c04 	addi	r2,gp,-32720
 50850fc:	18bfcf1e 	bne	r3,r2,508503c <__flash_rwdata_start+0xfffff7b8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 5085100:	0001883a 	nop
}
 5085104:	0001883a 	nop
 5085108:	e037883a 	mov	sp,fp
 508510c:	dfc00117 	ldw	ra,4(sp)
 5085110:	df000017 	ldw	fp,0(sp)
 5085114:	dec00204 	addi	sp,sp,8
 5085118:	f800283a 	ret

0508511c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 508511c:	deffff04 	addi	sp,sp,-4
 5085120:	df000015 	stw	fp,0(sp)
 5085124:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 5085128:	000170fa 	wrctl	ienable,zero
}
 508512c:	0001883a 	nop
 5085130:	e037883a 	mov	sp,fp
 5085134:	df000017 	ldw	fp,0(sp)
 5085138:	dec00104 	addi	sp,sp,4
 508513c:	f800283a 	ret

05085140 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 5085140:	defffa04 	addi	sp,sp,-24
 5085144:	dfc00515 	stw	ra,20(sp)
 5085148:	df000415 	stw	fp,16(sp)
 508514c:	df000404 	addi	fp,sp,16
 5085150:	e13ffe15 	stw	r4,-8(fp)
 5085154:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 5085158:	e0bfff17 	ldw	r2,-4(fp)
 508515c:	10800017 	ldw	r2,0(r2)
 5085160:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 5085164:	e13ffe17 	ldw	r4,-8(fp)
 5085168:	50803980 	call	5080398 <strlen>
 508516c:	10800044 	addi	r2,r2,1
 5085170:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 5085174:	00000d06 	br	50851ac <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 5085178:	e0bffc17 	ldw	r2,-16(fp)
 508517c:	10800217 	ldw	r2,8(r2)
 5085180:	e0fffd17 	ldw	r3,-12(fp)
 5085184:	180d883a 	mov	r6,r3
 5085188:	e17ffe17 	ldw	r5,-8(fp)
 508518c:	1009883a 	mov	r4,r2
 5085190:	50854f40 	call	50854f4 <memcmp>
 5085194:	1000021e 	bne	r2,zero,50851a0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 5085198:	e0bffc17 	ldw	r2,-16(fp)
 508519c:	00000706 	br	50851bc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 50851a0:	e0bffc17 	ldw	r2,-16(fp)
 50851a4:	10800017 	ldw	r2,0(r2)
 50851a8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 50851ac:	e0fffc17 	ldw	r3,-16(fp)
 50851b0:	e0bfff17 	ldw	r2,-4(fp)
 50851b4:	18bff01e 	bne	r3,r2,5085178 <__flash_rwdata_start+0xfffff8f4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 50851b8:	0005883a 	mov	r2,zero
}
 50851bc:	e037883a 	mov	sp,fp
 50851c0:	dfc00117 	ldw	ra,4(sp)
 50851c4:	df000017 	ldw	fp,0(sp)
 50851c8:	dec00204 	addi	sp,sp,8
 50851cc:	f800283a 	ret

050851d0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 50851d0:	defffb04 	addi	sp,sp,-20
 50851d4:	dfc00415 	stw	ra,16(sp)
 50851d8:	df000315 	stw	fp,12(sp)
 50851dc:	df000304 	addi	fp,sp,12
 50851e0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 50851e4:	d0a00417 	ldw	r2,-32752(gp)
 50851e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 50851ec:	00003106 	br	50852b4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 50851f0:	e0bffd17 	ldw	r2,-12(fp)
 50851f4:	10800217 	ldw	r2,8(r2)
 50851f8:	1009883a 	mov	r4,r2
 50851fc:	50803980 	call	5080398 <strlen>
 5085200:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 5085204:	e0bffd17 	ldw	r2,-12(fp)
 5085208:	10c00217 	ldw	r3,8(r2)
 508520c:	e0bffe17 	ldw	r2,-8(fp)
 5085210:	10bfffc4 	addi	r2,r2,-1
 5085214:	1885883a 	add	r2,r3,r2
 5085218:	10800003 	ldbu	r2,0(r2)
 508521c:	10803fcc 	andi	r2,r2,255
 5085220:	1080201c 	xori	r2,r2,128
 5085224:	10bfe004 	addi	r2,r2,-128
 5085228:	10800bd8 	cmpnei	r2,r2,47
 508522c:	1000031e 	bne	r2,zero,508523c <alt_find_file+0x6c>
    {
      len -= 1;
 5085230:	e0bffe17 	ldw	r2,-8(fp)
 5085234:	10bfffc4 	addi	r2,r2,-1
 5085238:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 508523c:	e0bffe17 	ldw	r2,-8(fp)
 5085240:	e0ffff17 	ldw	r3,-4(fp)
 5085244:	1885883a 	add	r2,r3,r2
 5085248:	10800003 	ldbu	r2,0(r2)
 508524c:	10803fcc 	andi	r2,r2,255
 5085250:	1080201c 	xori	r2,r2,128
 5085254:	10bfe004 	addi	r2,r2,-128
 5085258:	10800be0 	cmpeqi	r2,r2,47
 508525c:	1000081e 	bne	r2,zero,5085280 <alt_find_file+0xb0>
 5085260:	e0bffe17 	ldw	r2,-8(fp)
 5085264:	e0ffff17 	ldw	r3,-4(fp)
 5085268:	1885883a 	add	r2,r3,r2
 508526c:	10800003 	ldbu	r2,0(r2)
 5085270:	10803fcc 	andi	r2,r2,255
 5085274:	1080201c 	xori	r2,r2,128
 5085278:	10bfe004 	addi	r2,r2,-128
 508527c:	10000a1e 	bne	r2,zero,50852a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 5085280:	e0bffd17 	ldw	r2,-12(fp)
 5085284:	10800217 	ldw	r2,8(r2)
 5085288:	e0fffe17 	ldw	r3,-8(fp)
 508528c:	180d883a 	mov	r6,r3
 5085290:	e17fff17 	ldw	r5,-4(fp)
 5085294:	1009883a 	mov	r4,r2
 5085298:	50854f40 	call	50854f4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 508529c:	1000021e 	bne	r2,zero,50852a8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 50852a0:	e0bffd17 	ldw	r2,-12(fp)
 50852a4:	00000706 	br	50852c4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 50852a8:	e0bffd17 	ldw	r2,-12(fp)
 50852ac:	10800017 	ldw	r2,0(r2)
 50852b0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 50852b4:	e0fffd17 	ldw	r3,-12(fp)
 50852b8:	d0a00404 	addi	r2,gp,-32752
 50852bc:	18bfcc1e 	bne	r3,r2,50851f0 <__flash_rwdata_start+0xfffff96c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 50852c0:	0005883a 	mov	r2,zero
}
 50852c4:	e037883a 	mov	sp,fp
 50852c8:	dfc00117 	ldw	ra,4(sp)
 50852cc:	df000017 	ldw	fp,0(sp)
 50852d0:	dec00204 	addi	sp,sp,8
 50852d4:	f800283a 	ret

050852d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 50852d8:	defffc04 	addi	sp,sp,-16
 50852dc:	df000315 	stw	fp,12(sp)
 50852e0:	df000304 	addi	fp,sp,12
 50852e4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 50852e8:	00bffa04 	movi	r2,-24
 50852ec:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 50852f0:	e03ffd15 	stw	zero,-12(fp)
 50852f4:	00001906 	br	508535c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 50852f8:	00800034 	movhi	r2,0
 50852fc:	10822704 	addi	r2,r2,2204
 5085300:	e0fffd17 	ldw	r3,-12(fp)
 5085304:	18c00324 	muli	r3,r3,12
 5085308:	10c5883a 	add	r2,r2,r3
 508530c:	10800017 	ldw	r2,0(r2)
 5085310:	10000f1e 	bne	r2,zero,5085350 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 5085314:	00800034 	movhi	r2,0
 5085318:	10822704 	addi	r2,r2,2204
 508531c:	e0fffd17 	ldw	r3,-12(fp)
 5085320:	18c00324 	muli	r3,r3,12
 5085324:	10c5883a 	add	r2,r2,r3
 5085328:	e0ffff17 	ldw	r3,-4(fp)
 508532c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 5085330:	d0e00817 	ldw	r3,-32736(gp)
 5085334:	e0bffd17 	ldw	r2,-12(fp)
 5085338:	1880020e 	bge	r3,r2,5085344 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 508533c:	e0bffd17 	ldw	r2,-12(fp)
 5085340:	d0a00815 	stw	r2,-32736(gp)
      }
      rc = i;
 5085344:	e0bffd17 	ldw	r2,-12(fp)
 5085348:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 508534c:	00000606 	br	5085368 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 5085350:	e0bffd17 	ldw	r2,-12(fp)
 5085354:	10800044 	addi	r2,r2,1
 5085358:	e0bffd15 	stw	r2,-12(fp)
 508535c:	e0bffd17 	ldw	r2,-12(fp)
 5085360:	10800810 	cmplti	r2,r2,32
 5085364:	103fe41e 	bne	r2,zero,50852f8 <__flash_rwdata_start+0xfffffa74>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 5085368:	e0bffe17 	ldw	r2,-8(fp)
}
 508536c:	e037883a 	mov	sp,fp
 5085370:	df000017 	ldw	fp,0(sp)
 5085374:	dec00104 	addi	sp,sp,4
 5085378:	f800283a 	ret

0508537c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 508537c:	defffb04 	addi	sp,sp,-20
 5085380:	df000415 	stw	fp,16(sp)
 5085384:	df000404 	addi	fp,sp,16
 5085388:	e13ffe15 	stw	r4,-8(fp)
 508538c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 5085390:	e0bfff17 	ldw	r2,-4(fp)
 5085394:	10840070 	cmpltui	r2,r2,4097
 5085398:	1000021e 	bne	r2,zero,50853a4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 508539c:	00840004 	movi	r2,4096
 50853a0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 50853a4:	e0fffe17 	ldw	r3,-8(fp)
 50853a8:	e0bfff17 	ldw	r2,-4(fp)
 50853ac:	1885883a 	add	r2,r3,r2
 50853b0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 50853b4:	e0bffe17 	ldw	r2,-8(fp)
 50853b8:	e0bffc15 	stw	r2,-16(fp)
 50853bc:	00000506 	br	50853d4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 50853c0:	e0bffc17 	ldw	r2,-16(fp)
 50853c4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 50853c8:	e0bffc17 	ldw	r2,-16(fp)
 50853cc:	10800804 	addi	r2,r2,32
 50853d0:	e0bffc15 	stw	r2,-16(fp)
 50853d4:	e0fffc17 	ldw	r3,-16(fp)
 50853d8:	e0bffd17 	ldw	r2,-12(fp)
 50853dc:	18bff836 	bltu	r3,r2,50853c0 <__flash_rwdata_start+0xfffffb3c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 50853e0:	e0bffe17 	ldw	r2,-8(fp)
 50853e4:	108007cc 	andi	r2,r2,31
 50853e8:	10000226 	beq	r2,zero,50853f4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 50853ec:	e0bffc17 	ldw	r2,-16(fp)
 50853f0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 50853f4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 50853f8:	0001883a 	nop
 50853fc:	e037883a 	mov	sp,fp
 5085400:	df000017 	ldw	fp,0(sp)
 5085404:	dec00104 	addi	sp,sp,4
 5085408:	f800283a 	ret

0508540c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 508540c:	defffe04 	addi	sp,sp,-8
 5085410:	df000115 	stw	fp,4(sp)
 5085414:	df000104 	addi	fp,sp,4
 5085418:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 508541c:	e0bfff17 	ldw	r2,-4(fp)
 5085420:	10bffe84 	addi	r2,r2,-6
 5085424:	10c00428 	cmpgeui	r3,r2,16
 5085428:	18001a1e 	bne	r3,zero,5085494 <alt_exception_cause_generated_bad_addr+0x88>
 508542c:	100690ba 	slli	r3,r2,2
 5085430:	00814234 	movhi	r2,1288
 5085434:	10951104 	addi	r2,r2,21572
 5085438:	1885883a 	add	r2,r3,r2
 508543c:	10800017 	ldw	r2,0(r2)
 5085440:	1000683a 	jmp	r2
 5085444:	05085484 	movi	r20,8530
 5085448:	05085484 	movi	r20,8530
 508544c:	05085494 	movui	r20,8530
 5085450:	05085494 	movui	r20,8530
 5085454:	05085494 	movui	r20,8530
 5085458:	05085484 	movi	r20,8530
 508545c:	0508548c 	andi	r20,zero,8530
 5085460:	05085494 	movui	r20,8530
 5085464:	05085484 	movi	r20,8530
 5085468:	05085484 	movi	r20,8530
 508546c:	05085494 	movui	r20,8530
 5085470:	05085484 	movi	r20,8530
 5085474:	0508548c 	andi	r20,zero,8530
 5085478:	05085494 	movui	r20,8530
 508547c:	05085494 	movui	r20,8530
 5085480:	05085484 	movi	r20,8530
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 5085484:	00800044 	movi	r2,1
 5085488:	00000306 	br	5085498 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 508548c:	0005883a 	mov	r2,zero
 5085490:	00000106 	br	5085498 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 5085494:	0005883a 	mov	r2,zero
  }
}
 5085498:	e037883a 	mov	sp,fp
 508549c:	df000017 	ldw	fp,0(sp)
 50854a0:	dec00104 	addi	sp,sp,4
 50854a4:	f800283a 	ret

050854a8 <atexit>:
 50854a8:	200b883a 	mov	r5,r4
 50854ac:	000f883a 	mov	r7,zero
 50854b0:	000d883a 	mov	r6,zero
 50854b4:	0009883a 	mov	r4,zero
 50854b8:	50855701 	jmpi	5085570 <__register_exitproc>

050854bc <exit>:
 50854bc:	defffe04 	addi	sp,sp,-8
 50854c0:	000b883a 	mov	r5,zero
 50854c4:	dc000015 	stw	r16,0(sp)
 50854c8:	dfc00115 	stw	ra,4(sp)
 50854cc:	2021883a 	mov	r16,r4
 50854d0:	50856880 	call	5085688 <__call_exitprocs>
 50854d4:	00800034 	movhi	r2,0
 50854d8:	10869f04 	addi	r2,r2,6780
 50854dc:	11000017 	ldw	r4,0(r2)
 50854e0:	20800f17 	ldw	r2,60(r4)
 50854e4:	10000126 	beq	r2,zero,50854ec <exit+0x30>
 50854e8:	103ee83a 	callr	r2
 50854ec:	8009883a 	mov	r4,r16
 50854f0:	50858080 	call	5085808 <_exit>

050854f4 <memcmp>:
 50854f4:	01c000c4 	movi	r7,3
 50854f8:	3980192e 	bgeu	r7,r6,5085560 <memcmp+0x6c>
 50854fc:	2144b03a 	or	r2,r4,r5
 5085500:	11c4703a 	and	r2,r2,r7
 5085504:	10000f26 	beq	r2,zero,5085544 <memcmp+0x50>
 5085508:	20800003 	ldbu	r2,0(r4)
 508550c:	28c00003 	ldbu	r3,0(r5)
 5085510:	10c0151e 	bne	r2,r3,5085568 <memcmp+0x74>
 5085514:	31bfff84 	addi	r6,r6,-2
 5085518:	01ffffc4 	movi	r7,-1
 508551c:	00000406 	br	5085530 <memcmp+0x3c>
 5085520:	20800003 	ldbu	r2,0(r4)
 5085524:	28c00003 	ldbu	r3,0(r5)
 5085528:	31bfffc4 	addi	r6,r6,-1
 508552c:	10c00e1e 	bne	r2,r3,5085568 <memcmp+0x74>
 5085530:	21000044 	addi	r4,r4,1
 5085534:	29400044 	addi	r5,r5,1
 5085538:	31fff91e 	bne	r6,r7,5085520 <__flash_rwdata_start+0xfffffc9c>
 508553c:	0005883a 	mov	r2,zero
 5085540:	f800283a 	ret
 5085544:	20c00017 	ldw	r3,0(r4)
 5085548:	28800017 	ldw	r2,0(r5)
 508554c:	18bfee1e 	bne	r3,r2,5085508 <__flash_rwdata_start+0xfffffc84>
 5085550:	31bfff04 	addi	r6,r6,-4
 5085554:	21000104 	addi	r4,r4,4
 5085558:	29400104 	addi	r5,r5,4
 508555c:	39bff936 	bltu	r7,r6,5085544 <__flash_rwdata_start+0xfffffcc0>
 5085560:	303fe91e 	bne	r6,zero,5085508 <__flash_rwdata_start+0xfffffc84>
 5085564:	003ff506 	br	508553c <__flash_rwdata_start+0xfffffcb8>
 5085568:	10c5c83a 	sub	r2,r2,r3
 508556c:	f800283a 	ret

05085570 <__register_exitproc>:
 5085570:	defffa04 	addi	sp,sp,-24
 5085574:	dc000315 	stw	r16,12(sp)
 5085578:	04000034 	movhi	r16,0
 508557c:	84069f04 	addi	r16,r16,6780
 5085580:	80c00017 	ldw	r3,0(r16)
 5085584:	dc400415 	stw	r17,16(sp)
 5085588:	dfc00515 	stw	ra,20(sp)
 508558c:	18805217 	ldw	r2,328(r3)
 5085590:	2023883a 	mov	r17,r4
 5085594:	10003726 	beq	r2,zero,5085674 <__register_exitproc+0x104>
 5085598:	10c00117 	ldw	r3,4(r2)
 508559c:	010007c4 	movi	r4,31
 50855a0:	20c00e16 	blt	r4,r3,50855dc <__register_exitproc+0x6c>
 50855a4:	1a000044 	addi	r8,r3,1
 50855a8:	8800221e 	bne	r17,zero,5085634 <__register_exitproc+0xc4>
 50855ac:	18c00084 	addi	r3,r3,2
 50855b0:	18c7883a 	add	r3,r3,r3
 50855b4:	18c7883a 	add	r3,r3,r3
 50855b8:	12000115 	stw	r8,4(r2)
 50855bc:	10c7883a 	add	r3,r2,r3
 50855c0:	19400015 	stw	r5,0(r3)
 50855c4:	0005883a 	mov	r2,zero
 50855c8:	dfc00517 	ldw	ra,20(sp)
 50855cc:	dc400417 	ldw	r17,16(sp)
 50855d0:	dc000317 	ldw	r16,12(sp)
 50855d4:	dec00604 	addi	sp,sp,24
 50855d8:	f800283a 	ret
 50855dc:	00800034 	movhi	r2,0
 50855e0:	10800004 	addi	r2,r2,0
 50855e4:	10002626 	beq	r2,zero,5085680 <__register_exitproc+0x110>
 50855e8:	01006404 	movi	r4,400
 50855ec:	d9400015 	stw	r5,0(sp)
 50855f0:	d9800115 	stw	r6,4(sp)
 50855f4:	d9c00215 	stw	r7,8(sp)
 50855f8:	00000000 	call	0 <__alt_mem_sdram>
 50855fc:	d9400017 	ldw	r5,0(sp)
 5085600:	d9800117 	ldw	r6,4(sp)
 5085604:	d9c00217 	ldw	r7,8(sp)
 5085608:	10001d26 	beq	r2,zero,5085680 <__register_exitproc+0x110>
 508560c:	81000017 	ldw	r4,0(r16)
 5085610:	10000115 	stw	zero,4(r2)
 5085614:	02000044 	movi	r8,1
 5085618:	22405217 	ldw	r9,328(r4)
 508561c:	0007883a 	mov	r3,zero
 5085620:	12400015 	stw	r9,0(r2)
 5085624:	20805215 	stw	r2,328(r4)
 5085628:	10006215 	stw	zero,392(r2)
 508562c:	10006315 	stw	zero,396(r2)
 5085630:	883fde26 	beq	r17,zero,50855ac <__flash_rwdata_start+0xfffffd28>
 5085634:	18c9883a 	add	r4,r3,r3
 5085638:	2109883a 	add	r4,r4,r4
 508563c:	1109883a 	add	r4,r2,r4
 5085640:	21802215 	stw	r6,136(r4)
 5085644:	01800044 	movi	r6,1
 5085648:	12406217 	ldw	r9,392(r2)
 508564c:	30cc983a 	sll	r6,r6,r3
 5085650:	4992b03a 	or	r9,r9,r6
 5085654:	12406215 	stw	r9,392(r2)
 5085658:	21c04215 	stw	r7,264(r4)
 508565c:	01000084 	movi	r4,2
 5085660:	893fd21e 	bne	r17,r4,50855ac <__flash_rwdata_start+0xfffffd28>
 5085664:	11006317 	ldw	r4,396(r2)
 5085668:	218cb03a 	or	r6,r4,r6
 508566c:	11806315 	stw	r6,396(r2)
 5085670:	003fce06 	br	50855ac <__flash_rwdata_start+0xfffffd28>
 5085674:	18805304 	addi	r2,r3,332
 5085678:	18805215 	stw	r2,328(r3)
 508567c:	003fc606 	br	5085598 <__flash_rwdata_start+0xfffffd14>
 5085680:	00bfffc4 	movi	r2,-1
 5085684:	003fd006 	br	50855c8 <__flash_rwdata_start+0xfffffd44>

05085688 <__call_exitprocs>:
 5085688:	defff504 	addi	sp,sp,-44
 508568c:	df000915 	stw	fp,36(sp)
 5085690:	dd400615 	stw	r21,24(sp)
 5085694:	dc800315 	stw	r18,12(sp)
 5085698:	dfc00a15 	stw	ra,40(sp)
 508569c:	ddc00815 	stw	r23,32(sp)
 50856a0:	dd800715 	stw	r22,28(sp)
 50856a4:	dd000515 	stw	r20,20(sp)
 50856a8:	dcc00415 	stw	r19,16(sp)
 50856ac:	dc400215 	stw	r17,8(sp)
 50856b0:	dc000115 	stw	r16,4(sp)
 50856b4:	d9000015 	stw	r4,0(sp)
 50856b8:	2839883a 	mov	fp,r5
 50856bc:	04800044 	movi	r18,1
 50856c0:	057fffc4 	movi	r21,-1
 50856c4:	00800034 	movhi	r2,0
 50856c8:	10869f04 	addi	r2,r2,6780
 50856cc:	12000017 	ldw	r8,0(r2)
 50856d0:	45005217 	ldw	r20,328(r8)
 50856d4:	44c05204 	addi	r19,r8,328
 50856d8:	a0001c26 	beq	r20,zero,508574c <__call_exitprocs+0xc4>
 50856dc:	a0800117 	ldw	r2,4(r20)
 50856e0:	15ffffc4 	addi	r23,r2,-1
 50856e4:	b8000d16 	blt	r23,zero,508571c <__call_exitprocs+0x94>
 50856e8:	14000044 	addi	r16,r2,1
 50856ec:	8421883a 	add	r16,r16,r16
 50856f0:	8421883a 	add	r16,r16,r16
 50856f4:	84402004 	addi	r17,r16,128
 50856f8:	a463883a 	add	r17,r20,r17
 50856fc:	a421883a 	add	r16,r20,r16
 5085700:	e0001e26 	beq	fp,zero,508577c <__call_exitprocs+0xf4>
 5085704:	80804017 	ldw	r2,256(r16)
 5085708:	e0801c26 	beq	fp,r2,508577c <__call_exitprocs+0xf4>
 508570c:	bdffffc4 	addi	r23,r23,-1
 5085710:	843fff04 	addi	r16,r16,-4
 5085714:	8c7fff04 	addi	r17,r17,-4
 5085718:	bd7ff91e 	bne	r23,r21,5085700 <__flash_rwdata_start+0xfffffe7c>
 508571c:	00800034 	movhi	r2,0
 5085720:	10800004 	addi	r2,r2,0
 5085724:	10000926 	beq	r2,zero,508574c <__call_exitprocs+0xc4>
 5085728:	a0800117 	ldw	r2,4(r20)
 508572c:	1000301e 	bne	r2,zero,50857f0 <__call_exitprocs+0x168>
 5085730:	a0800017 	ldw	r2,0(r20)
 5085734:	10003226 	beq	r2,zero,5085800 <__call_exitprocs+0x178>
 5085738:	a009883a 	mov	r4,r20
 508573c:	98800015 	stw	r2,0(r19)
 5085740:	00000000 	call	0 <__alt_mem_sdram>
 5085744:	9d000017 	ldw	r20,0(r19)
 5085748:	a03fe41e 	bne	r20,zero,50856dc <__flash_rwdata_start+0xfffffe58>
 508574c:	dfc00a17 	ldw	ra,40(sp)
 5085750:	df000917 	ldw	fp,36(sp)
 5085754:	ddc00817 	ldw	r23,32(sp)
 5085758:	dd800717 	ldw	r22,28(sp)
 508575c:	dd400617 	ldw	r21,24(sp)
 5085760:	dd000517 	ldw	r20,20(sp)
 5085764:	dcc00417 	ldw	r19,16(sp)
 5085768:	dc800317 	ldw	r18,12(sp)
 508576c:	dc400217 	ldw	r17,8(sp)
 5085770:	dc000117 	ldw	r16,4(sp)
 5085774:	dec00b04 	addi	sp,sp,44
 5085778:	f800283a 	ret
 508577c:	a0800117 	ldw	r2,4(r20)
 5085780:	80c00017 	ldw	r3,0(r16)
 5085784:	10bfffc4 	addi	r2,r2,-1
 5085788:	15c01426 	beq	r2,r23,50857dc <__call_exitprocs+0x154>
 508578c:	80000015 	stw	zero,0(r16)
 5085790:	183fde26 	beq	r3,zero,508570c <__flash_rwdata_start+0xfffffe88>
 5085794:	95c8983a 	sll	r4,r18,r23
 5085798:	a0806217 	ldw	r2,392(r20)
 508579c:	a5800117 	ldw	r22,4(r20)
 50857a0:	2084703a 	and	r2,r4,r2
 50857a4:	10000b26 	beq	r2,zero,50857d4 <__call_exitprocs+0x14c>
 50857a8:	a0806317 	ldw	r2,396(r20)
 50857ac:	2088703a 	and	r4,r4,r2
 50857b0:	20000c1e 	bne	r4,zero,50857e4 <__call_exitprocs+0x15c>
 50857b4:	89400017 	ldw	r5,0(r17)
 50857b8:	d9000017 	ldw	r4,0(sp)
 50857bc:	183ee83a 	callr	r3
 50857c0:	a0800117 	ldw	r2,4(r20)
 50857c4:	15bfbf1e 	bne	r2,r22,50856c4 <__flash_rwdata_start+0xfffffe40>
 50857c8:	98800017 	ldw	r2,0(r19)
 50857cc:	153fcf26 	beq	r2,r20,508570c <__flash_rwdata_start+0xfffffe88>
 50857d0:	003fbc06 	br	50856c4 <__flash_rwdata_start+0xfffffe40>
 50857d4:	183ee83a 	callr	r3
 50857d8:	003ff906 	br	50857c0 <__flash_rwdata_start+0xffffff3c>
 50857dc:	a5c00115 	stw	r23,4(r20)
 50857e0:	003feb06 	br	5085790 <__flash_rwdata_start+0xffffff0c>
 50857e4:	89000017 	ldw	r4,0(r17)
 50857e8:	183ee83a 	callr	r3
 50857ec:	003ff406 	br	50857c0 <__flash_rwdata_start+0xffffff3c>
 50857f0:	a0800017 	ldw	r2,0(r20)
 50857f4:	a027883a 	mov	r19,r20
 50857f8:	1029883a 	mov	r20,r2
 50857fc:	003fb606 	br	50856d8 <__flash_rwdata_start+0xfffffe54>
 5085800:	0005883a 	mov	r2,zero
 5085804:	003ffb06 	br	50857f4 <__flash_rwdata_start+0xffffff70>

05085808 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 5085808:	defffd04 	addi	sp,sp,-12
 508580c:	df000215 	stw	fp,8(sp)
 5085810:	df000204 	addi	fp,sp,8
 5085814:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 5085818:	0001883a 	nop
 508581c:	e0bfff17 	ldw	r2,-4(fp)
 5085820:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 5085824:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 5085828:	10000226 	beq	r2,zero,5085834 <_exit+0x2c>
    ALT_SIM_FAIL();
 508582c:	002af070 	cmpltui	zero,zero,43969
 5085830:	00000106 	br	5085838 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 5085834:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 5085838:	003fff06 	br	5085838 <__flash_rwdata_start+0xffffffb4>
